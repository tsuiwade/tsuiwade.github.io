<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TsuiWade&#39;s blog</title>
  
  
  <link href="https://tsuiwade.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsuiwade.github.io/"/>
  <updated>2022-07-10T15:38:49.000Z</updated>
  <id>https://tsuiwade.github.io/</id>
  
  <author>
    <name>tsuiwade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>socket.io模块学习记录</title>
    <link href="https://tsuiwade.github.io/2022/07/10/blog53-socketio/"/>
    <id>https://tsuiwade.github.io/2022/07/10/blog53-socketio/</id>
    <published>2022-07-10T15:38:49.000Z</published>
    <updated>2022-07-10T15:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Socket.IO 是一个库，可以在客户端和服务器之间实现<strong>低延迟</strong>、<strong>双向</strong>和<strong>基于事件的</strong>通信</p><p><strong>Socket.IO</strong> 是一个面向实时 <a href="https://zh.m.wikipedia.org/w/index.php?title=Web_应用&amp;action=edit&amp;redlink=1">web 应用</a>的 <a href="https://zh.m.wikipedia.org/wiki/JavaScript">JavaScript</a> 库。它使得服务器和客户端之间实时双向的通信成为可能。他有两个部分：在<a href="https://zh.m.wikipedia.org/wiki/浏览器">浏览器</a>中运行的<a href="https://zh.m.wikipedia.org/wiki/客户端">客户端</a>库，和一个面向<a href="https://zh.m.wikipedia.org/wiki/Node.js">Node.js</a>的服务端库。两者有着几乎一样的<a href="https://zh.m.wikipedia.org/wiki/API">API</a>。像Node.js一样，它也是<a href="https://zh.m.wikipedia.org/w/index.php?title=事件驱动程序设计&amp;action=edit&amp;redlink=1">事件驱动</a>的.</p><p>Socket.IO 主要使用<a href="https://zh.m.wikipedia.org/wiki/WebSocket">WebSocket</a>协议。但是如果需要的话，Socket.io可以回退到几种其它方法，例如<a href="https://zh.m.wikipedia.org/wiki/Adobe_Flash">Adobe Flash</a> Sockets，<a href="https://zh.m.wikipedia.org/wiki/JSONP">JSONP</a>拉取，或是<a href="https://zh.m.wikipedia.org/wiki/Comet_(web技术">传统的AJAX拉取</a>)，并且在同时提供完全相同的接口。尽管它可以被用作WebSocket的<a href="https://zh.m.wikipedia.org/w/index.php?title=Wrapper_library&amp;action=edit&amp;redlink=1">包装库</a>，它还是提供了许多其它功能，比如广播至多个套接字，存储与不同客户有关的数据，和<a href="https://zh.m.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;redlink=1">异步IO操作</a>。</p><p>可以使用<a href="https://zh.m.wikipedia.org/wiki/Node包管理器">npm</a>（node 软件包）工具来安装。</p><p> Socket 为客户端和服务器提供了双向通信机制。</p><p>这意味着服务器可以 <em>推送</em> 消息给客户端。无论何时你发布一条消息，服务器都可以接收到消息并推送给其他连接到服务器的客户端。</p><p>Socket.IO 的核心理念就是允许发送、接收任意事件和任意数据。任意能被编码为 JSON 的对象都可以用于传输。二进制数据也是支持的。</p><p>这里的实现方案是，当用户输入消息时，服务器接收一个 <code>chat message</code> 事件。<code>index.html</code> 文件中的 <code>script</code> 部分现在应该内容如下：</p><p>接下来的目标就是让服务器将消息发送给其他用户。</p><p>要将事件发送给每个用户，Socket.IO 提供了 <code>io.emit</code> 方法：</p><hr><hr><h1 id="socket（套接字？插槽）"><a href="#socket（套接字？插槽）" class="headerlink" title="socket（套接字？插槽）"></a>socket（套接字？插槽）</h1><p>Socket其实并不是一个协议，而是为了方便使用TCP或UDP而抽象出来的一层，是位于应用层和传输控制层之间的一组接口。“Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，提供一套调用TCP/IP协议的API。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220711204509818.png" alt="image-20220711204509818" style="zoom:67%;" /></p><h1 id="websocket和http的关系"><a href="#websocket和http的关系" class="headerlink" title="websocket和http的关系"></a>websocket和http的关系</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>1、都是基于TCP的，都是可靠传输协议。</p><p>2、都是应用层协议。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220711203604868.png" alt="image-20220711203604868" style="zoom: 80%;" /></p><h1 id="Http、Socket、WebSocket之间联系与区别"><a href="#Http、Socket、WebSocket之间联系与区别" class="headerlink" title="Http、Socket、WebSocket之间联系与区别"></a><a href="https://www.cnblogs.com/aspirant/p/11334957.html">Http、Socket、WebSocket之间联系与区别</a></h1><p><strong>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</strong></p><p>可以把WebSocket想象成HTTP(应用层)，HTTP和Socket什么关系，WebSocket和Socket就是什么关系。</p><p>HTTP 协议有一个缺陷：通信只能由客户端发起，做不到服务器主动向客户端推送信息。</p><p><strong>WebSocket 协议 它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</strong></p><hr><p>socket和http的区别：<br>Http协议：简单的对象访问协议，对应于应用层。Http协议是基于TCP链接的。<br>tcp协议：对应于传输层<br>ip协议：对应于网络层<br>TCP/IP是传输层协议，主要解决数据如何在网络中传输；而Http是应用层协议，主要解决如何包装数据。</p><p><strong>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</strong></p><hr><p>Http连接：http连接就是所谓的短连接，及客户端向服务器发送一次请求，服务器端相应后连接即会断掉。</p><p>socket连接：socket连接及时所谓的长连接，理论上客户端和服务端一旦建立连接，则不会主动断掉；但是由于各种环境因素可能会是连接断开，比如说：服务器端或客户端主机down了，网络故障，或者两者之间长时间没有数据传输，网络防火墙可能会断开该链接已释放网络资源。所以当一个socket连接中没有数据的传输，那么为了位置连续的连接需要发送心跳消息，具体心跳消息格式是开发者自己定义的。</p><hr><p>1.HTTP的长连接一般就只能坚持一分钟而已，而且是浏览器决定的，你的页面很难控制这个行为。<br>Socket连接就可以维持很久，几天、数月都有可能，只要网络不断、程序不结束，而且是可以编程灵活控制的。<br>2.HTTP连接是建立在Socket连接之上。在实际的网络栈中，Socket连接的确是HTTP连接的一部分。但是从HTTP协议看，它的连接一般是指它本身的那部分。</p><hr><p>TCP/IP协议栈主要分为四层:应用层、传输层、网络层、数据链路层,</p><p>每层都有相应的协议，如下图（TCP/IP四层模型）</p><p>应用层包括http（万维网）、ftp（文件传输）、smtp（电子邮件）、dns、telnet</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/9dbde0322cc1482fa17b38a4e3bfe664.jpeg" alt="img"></p><p>之前不太懂为什么有OSI七层模型、四层模型，其实他们的区分标准在于OSI七层模型是理论上的分层方式，而四层模型是实践过程中的分层模型。</p><p>OSI七层模型ISO（国际标准化组织）提出的一套理论性的网络标准化协议，可以把它看成一本教科书，它在指定之前是没有经过实践的，而为什么我们实践的过程中又没有遵循OSI的标准来分层呢，是因为我们在实践的过程中发现有些功能不必要分得那么细，而TCP四层模型就是我们实践过程中发现比较合理的分层，虽然我们实际过程中都没有按OSI分为七层，但是OSI对我们实践过程分层有着指导性的意义。</p><p>五层协议将四层协议中的网络接口层分为数据链路层和物理层</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/v2-9120fb10ff256120099cd152799fe309_720w.jpg" alt="img"></p><p><strong>TPC/IP协议栈，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。</strong></p><p>把<strong>IP想像两个站点</strong>，<strong>TCP和UDP是高速公路，HTTP 、FTP 就是货车</strong>，而 Socket 就是两个站点的检票口。<strong>货车(http)在一端站点(ip)先通过检票口(socket)，检票后行驶在高速公路(tcp)上，到达另一站点(ip)卸载货物(http)。</strong></p><hr><p><a href="https://www.jianshu.com/p/4e80b931cdea">https://www.jianshu.com/p/4e80b931cdea</a></p><h3 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h3><p>Socket.io提供了基于事件的实时双向通讯</p><p>Browser和WebServer间的实时数据传输是一个很重要的需求，但最早只能通过AJAX轮询方式实现。在WebSocket标准没有推出之前，AJAX轮询是一种可行的方案。</p><p>AJAX轮询原理是设置定时器，定时通过AJAX同步服务端数据。这种方式存在延时且对服务端造成很大负载。直至2011年，IETF才标准化WebSocket - 一种基于TCP套接字进行收发数据的协议。</p><h3 id="WebSocket-协议"><a href="#WebSocket-协议" class="headerlink" title="WebSocket 协议"></a>WebSocket 协议</h3><p>WebSocket是HTML5新增的一种<strong>通信协议</strong>，其特点是服务端可以主动向客户端推送信息，客户端也可以主动向服务端发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p>在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后浏览器和服务端之间就形成了一条快速通道，两者之间就直接可以数据相互传送，带来的好处是</p><ol><li>相互沟通的<code>Header</code>很小，大概只有2Bytes。</li><li>服务器不再被动的接收到浏览器的请求之后才返回数据，而是在有新数据时就主动推送给浏览器。</li></ol><p>为了建立一个WebSocket连接，浏览器首先要向服务器发起一个HTTP请求，这个请求和通常的HTTP请求不同，包含了一些附加头信息，其中附加头信息<code>Upgrade: WebSocket</code>表明这是一个申请协议升级的HTTP请求。服务端解析这些头信息，然后产生应答信息返回给客户端，客户端和服务端的WebSocket连接就建立起来了。双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续直到客户端或者服务端的某一方主动关闭连接。</p><h3 id="为什么要使用WebSocket呢？"><a href="#为什么要使用WebSocket呢？" class="headerlink" title="为什么要使用WebSocket呢？"></a>为什么要使用WebSocket呢？</h3><p>Browser已经支持HTTP协议，为什么还要开发一种新的WebSocket协议呢？</p><p><strong>我们知道HTTP协议是一种单向的网络协议，在建立连接后，仅允许Browser/UserAgent向WebServer发出请求资源后，WebServer才能返回对应的数据，而WebServer不能主动的推送数据给Browser/UserAgent。</strong></p><p>最初这么设计HTTP协议的原因是，假设WebServer能主动的推送数据给Browser/UserAgent，那么Browser/UserAgent就太容易受到攻击了，一些广告商也会主动把广告在不经意间强行的传输给客户端，这不能不说是一个灾难。那么单向的HTTP协议给Web应用开发带哪些问题呢？</p><p>现在假设我们要开发一个基于Web的应用去获取当前WebServer的实时数据。例如股票实时行情、火车票剩余票数等。这就需要Browser/UserAgent与WebServer之间反复进行HTTP通信，Browser/UserAgent不断的发送请求去获取当前的实时数据。</p><p>常见的方式</p><ul><li>Polling</li></ul><p><strong>Polling轮询是通过Browser/UserAgent定时向WebServer发送HTTP请求</strong>，WebServer收到请求后把最新的数据发回给Browser/UserAgent，Browser/UserAgent得到数据后将其显示，然后再定期重复此过程。</p><p>虽然这样可以满足需求，但仍存在问题，例如某段时间内WebServer没有更新的数据，但Browser/UserAgent仍然会定时发送请求过来询问，WebServer可以把以前的老数据再传送过去，Browser/UserAgent把这些没有变化的数据再显示出来。这样既浪费网络带宽，有浪费CPU利用率。</p><p>如果说把Browser/UserAgent发送请求的周期调大一些，就可以缓解这个问题，但如果WebServer的数据更新很快时，这样又不能保证Web应用获取数据的实时性。</p><ul><li>LongPolling</li></ul><p>LongPolling是对Polling的一种改进。</p><p>Browser/UserAgent发送HTTP请求到WebServer，此时WebServer可以做2件事情：</p><ol><li>如果WebServer有新的数据需要传送，就立即把数据发回给Browser/UserAgent，Browser/UserAgent收到数据后，立即再发送HTTP请求给WebServer。</li><li>如果WebServer没有新数据需要传送，这里与Polling的方式不同的是，WebServer不是立即发送回应给Browser/UserAgent，而是将这个请求保持住，等待有新的数据来到，再去响应这个请求。当然，如果WebServer的数据长期没有更新，一段时间后，这个HTTP请求就会超时，Browser/UserAgent收到超时信息后，在立即发送一个新的HTTP请求给服务器，然后依次循环这个过程。</li></ol><p>LongPolling的方式虽然在某种程度上减少了网络带宽和CPU利用率等问题，但仍存在缺陷。</p><p>例如WebServer的数据更新速度较快，WebServer在传送一个数据包给Browser/UserAgent后必须等待Browser的下一个HTTP请求到来，才能传递第二个更新的数据包给Browser。这样的话，Browser显示实时数据最快的时间为2 xRTT（往返时间）。另外在网络拥堵的情况下，这个应该是不能让用户接受的。另外，由于HTTP数据包的头部数据量很大（通常有400多个字节），但真正被服务器需要的数据却很少（有时只有10个字节左右），这样的数据包在网络上周期性传输，难免对网络带宽是一种浪费。</p><p>综上所述，要是在Browser有一种新的网路一些，能支持客户端和服务端的双向通信，而且协议的头部又不那么庞大就very nice了。WebSocket正是肩负这样的使命登上了Web的舞台。</p><h3 id="WebSocket-原理"><a href="#WebSocket-原理" class="headerlink" title="WebSocket 原理"></a>WebSocket 原理</h3><p>WebSocket是一种<strong>双向通信协议</strong>，它建立在TCP之上，同HTTP一样通过TCP来传输数据，但与HTTP最大不同的是：</p><ol><li>WebSocket是一种双向通信协议，在建立连接后，WebSocket服务器和Browser/UserAgent都能主动的向对象发送或接收数据，就像Socket一样，不同的是WebSocket是一种建立在Web基础上的简单模拟Socket的协议。</li><li>WebSocket需要通过握手连接，类似TCP也需要客户端和服务端进行握手连接，连接成功后才能相互通信。</li></ol><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/4933701-2e68a6248c39caa9.gif" alt="img"></p><p>简单说明下WebSocket握手的过程</p><p>当Web应用端调用<code>new WebSocket(url)</code>接口时，Browser就开始了与地址为URL的WebServer建立握手连接的过程。</p><ol><li>Browser与WebSocket服务器通过TCP三次握手建立连接，如果这个建立连接失败，那么后面的过程就不会执行，Web应用将收到错误消息通知。</li><li>在TCP建立连接成功后，Browser/UserAgent通过HTTP协议传送WebSocket支持的版本号、协议的字版本号、原始地址、主机地址等一系列字段给服务端。</li><li>WebSocket服务器收到Browser/UserAgent发送来的握手请求后，如果数据包数据和格式正确，客户端和服务端的协议版本匹配等，就接受本次握手连接，并给出对应的数据回复，同样回复的数据包也是采用HTTP协议传输。</li><li>Browser收到服务器回复的数据包后，如果数据包内容、格式都没有问题的话，就表示本次连接成功，触发<code>onopen</code>消息，此时Web开发者就可以在此时通过<code>send</code>接口向服务器发送数据。否则，握手连接失败，Web应用会收到<code>onerror</code>消息，并且能知道连接失败的原因。</li></ol><h3 id="WebSocket与TCP、HTTP的关系"><a href="#WebSocket与TCP、HTTP的关系" class="headerlink" title="WebSocket与TCP、HTTP的关系"></a>WebSocket与TCP、HTTP的关系</h3><h1 id="“三次握手，四次挥手”你真的懂吗？"><a href="#“三次握手，四次挥手”你真的懂吗？" class="headerlink" title="“三次握手，四次挥手”你真的懂吗？"></a>“三次握手，四次挥手”你真的懂吗？</h1><p>客户端：是服务器吗？我要跟你通信，听得到我说话吗？<br>服务器：可以通信，你听得到我说话吗？<br>客户端：我也听得到。</p><p>是双工</p><p>三次握手和四次挥手TCP一定是客户端发起 （谁发请求谁就是客户端） （http是基于tcp连接的）</p><p>TCP滑动窗口<a href="https://www.bilibili.com/video/BV1PZ4y1P7zp">https://www.bilibili.com/video/BV1PZ4y1P7zp</a></p><p>UDP报文格式：源端口+目标端口+报文长度+内容</p><p>TCP报文格式，一行4字节，1字节8位</p><p>16位源端口号 | 16位目的端口号</p><p>32位序号（seq 每个报文的序号，随机生成</p><p>32位确认序号 ack （服务器的ack=客户端发起请求的seq+1， 客户端的ack=服务器的seq+1</p><p>4位首部长度 | 保留6位 | URG | ACK(1位标志位) | PSH | RST | SYN(1位， 为1则为新) | FIN(我要结束，我要断开) | 16位窗口大小 </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710220737099.png" alt="image-20220710220737099"></p><p>全文背诵：</p><p>面试官你好，这个问题我是知道的。TCP/IP协议是传输层的一个面向连接的安全可靠的传输协议。</p><p>三次握手的机制是为了保证能建立一个安全可靠的连接；第一次握手是由客户端发起，客户端会向服务端发送一个报文，报文里面SYN标志位是置1的，当服务端收到这个报文的时候就知道客户端要和我发起一个新的连接，于是服务端就向客户端发送一个确认消息包ACK位置1，以上两次握手之后，对于客户端而言，其实是已经知道了所有信息，就是我既能给服务端发送消息，我还能收到服务端的消息；对于服务端而言，两次握手是不够的，因为到目前为止，服务端只知道一件事情，就是客户端给我发送的消息我收的到，但是我发给客户端的消息，客户端能不能收到我还不知道。</p><p>所以还要进行第三次握手。第三次握手就是当客户端收到服务端发过来的确认消息的报文之后，还要继续给服务端进行一个回应，也是一个ACK位置1的一个确认消息。</p><p>通过以上三次连接，不管是服务端还是客户端都彼此知道了，我既能给对方发送消息也能收到对方的消息，那么这个连接就能被安全的建立了。</p><p>四次握手机制，也是由客户端（服务器也可以）首先发起的，客户端会发起一个报文，在报文里面FIN标志位置1；当服务端收到这报文之后，我就知道了客户端想要和我断开连接，但是此时服务端不一定能做好准备，因为当客户端发起断开连接的时候，对于服务端而言它极有可能有未发送完的的消息，它还要继续发送；所以此时对于服务端而言他只能进行一个消息确认，我先告诉对方，我知道你要和我断开连接了，但是我这还可能没有做好准备，你还需要等我一下，等会我会告诉你；于是，发完这个消息确认包后，可能稍作片刻，它可能会继续发送一个断开连接的报文，一个FIN位置1的报文，是由服务端发给客户端的，这个报文表示了服务端已经做好了断开连接的准备，那么当这个报文发给客户端的时候，客户端同样要给服务端继续发送一个消息确认的报文。一共有四次，通过这四次的相互沟通和连接，我就知道了，不管是服务端还是客户端都已经做好了断开连接的准备，于是连接就可以被断开了。</p><p>这是我对三次握手和四次挥手的理解。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710221248490.png" alt="image-20220710221248490"></p><p>为什么服务器要分两次挥手，因为有可能正在发送一个数据给客户端，不能立刻断开。</p><p>server的第二步说：我知道你要和我断开，你先等我一下，我还没传输完。</p><p>server的第三步说：我终于传输完了，客户端你断开吧。</p><h1 id="网络分层结构"><a href="#网络分层结构" class="headerlink" title="网络分层结构"></a>网络分层结构</h1><p>开放系统互连参考模型 (Open System Interconnect 简称OSI）</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220711171534690.png" alt="image-20220711171534690"></p><p>7、应用层：用户app里的数据，图片、声音、文字</p><p>6、表示层： 用bmp或jpeg编码表示图片数据，WAV或mp3编码表示声音数据，wmv或avi编码表示视频数据。</p><p>5、会话层：会话连接，建立两个应用软件之间的会话关系和连接。</p><p>4、传输层（数据段）：简历TCP或UDP连接，建立端到端的连接。 给报文打上端口号，例如80是网页数据，4000是qq数据</p><p>3、网络层（数据包）：给数据表打上ip地址，并且使用路由转发。使用的协议统一，网络层基于IP地址进行<strong>路由</strong>转发。进行数据传输：路由数据包，选择传递数据的最佳路径，支持逻辑<strong>寻址</strong>和路径选择。</p><p>2、数据链路层（数据帧）：以太网协议，mac地址，访问介质：定义如何格式化数据以便传输以及访问网络，支持错误检测。</p><p>1、物理层（数据位）：网线，二进制传输，定义了各种规范。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224132044.png" alt="image-20220710224132044"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224203925.png" alt="image-20220710224203925"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224218692.png" alt="image-20220710224218692"></p><h1 id="网络模型图"><a href="#网络模型图" class="headerlink" title="网络模型图"></a>网络模型图</h1><p>socket就是这里的TCP或UDP</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710230633852.png" alt="image-20220710230633852"></p><h1 id="基于TCP-UDP协议的应用层协议有哪些？"><a href="#基于TCP-UDP协议的应用层协议有哪些？" class="headerlink" title="基于TCP/UDP协议的应用层协议有哪些？"></a>基于TCP/UDP协议的应用层协议有哪些？</h1><p>1、基于TCP的<strong>应用层</strong>协议有：HTTP、FTP、SMTP、TELNET、SSH<br>协议    全称    默认端口<br>HTTP （ 浏览网页 ）    HyperText Transfer Protocol（超文本传输协议）    80<br>FTP    File Transfer Protocol (文件传输协议)    20用于传输数据，21用于传输控制信息<br>SMTP    Simple Mail Transfer Protocol (简单邮件传输协议)    25<br>TELNET    Teletype over the Network (远程登录，明码传输)    23<br>SSH    Secure Shell（远程，加密传输）    22<br>WebSocket 80或443端口</p><p>2、基于UDP的应用层协议：DNS、TFTP（简单文件传输协议）、SNMP：简单网络管理协议<br>协议    全称    默认端口<br>DNS    Domain Name Service (域名服务)    53<br>TFTP    Trivial File Transfer Protocol (简单文件传输协议)    69<br>SNMP    Simple Network Management Protocol (简单网络管理协议)    通过UDP端口161接收，只有Trap信息采用UDP端口162。<br>NTP    Network Time Protocol (网络时间协议)    123</p><hr><p>网络层有ip协议、IGMP、ICMP协议</p><p>数据链路层有ethernet以太网、ppp、PPPoE协议。</p><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><p><strong>传输控制协议TCP(Transmission Control Protocol)</strong></p><p> <strong>用户数据包协议UDP(User Datagram Protocol)</strong></p><p>TCP是面向连接的，通过三次握手建立客户端和服务端之间的可靠连接，而UDP是面向无连接的，可以直接给多台机器发送数据。<br>TCP是面向字节流的协议，字节流没有头尾，但是流通过报文段发送出去，UDP是面向报文的协议，通过数据报发送数据。<br>TCP有流量控制，拥塞控制等机制，而UDP只受数据生成的速率等影响，跟网络状况无关。<br>TCP保证可靠传输，超时重传。UDP使用尽最大努力交付。</p><p>UDP适合：直播，实时游戏，http3.0等场景。<br>不需要建立连接，一对一沟通，可以广播，对于丢包不敏感，网络较好的内网，即使网络不畅也不能降低数据发送的速度。</p><p>TCP适合发送文件 发送邮件 浏览网页</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224707044.png" alt="image-20220710224707044"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224734156.png" alt="image-20220710224734156"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224248909.png" alt="image-20220710224248909"></p><p>TCP面向字节流与UDP面向报文<br>之前对于tcp和udp只是记住了一个面向字节流，一个是面向报文的，但是并没有真正的理解，经过中间找工作的压力中间不停的面试和笔试，现在终于对于这两个概念有了一个全新的认识。<br>通俗的解释：</p><p>可以将tcp和upd看成不同公司的出租车，tcp这个公司的出租车司机（tcp头）在拉客的时候，一看来了一个乘客，可是自己车上还有三个位置，司机就会继续等，直到自己车上去同一个目的地的乘客坐满了才开车，因为tcp公司认为遵循Nagle算法可以提高效率，节省能源，从socket学校走出来三个团体的学生，每一个团体只有一个人，可能只要消耗一个tcp出租车。如果从socket学校出来了一个团队的学生，但是这个团队有6个学生，一号tcp出租车看看自己车上还有两个个空位置，就让这个团队的两个学生上车了，剩下的学生只能做下一辆车了。这也就造成了一个问题，一号出租车开到了城市中的一个小餐馆，餐馆老板并不知道他们四个学生是不是一个团队的，这也就是粘包粘包的问题。</p><p>udp公司的出租车与tcp公司的出租车不一样，udp公司有最新的科技，自己的车可以变大可以变小。只要有一个团队的人走过来，不管是一个人还是7个人，udp出租车都可以一次性给你送走（因为udp有核心科技，当然下层的ip层还是可能会分包的，这些我们不用管），不需要等待。到餐馆后，餐馆老板一看是udp公司的出租车，就知道这是一个团队的（也就是不会出现粘包粘包的问题）。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224302823.png" alt="image-20220710224302823"></p><h1 id="浏览器输入URL返回页面的过程——dns"><a href="#浏览器输入URL返回页面的过程——dns" class="headerlink" title="浏览器输入URL返回页面的过程——dns"></a>浏览器输入URL返回页面的过程——dns</h1><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224335246.png" alt="image-20220710224335246"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224354676.png" alt="image-20220710224354676"></p><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224430637.png" alt="image-20220710224430637"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224459231.png" alt="image-20220710224459231"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220710224528356.png" alt="image-20220710224528356"></p>]]></content>
    
    
    <summary type="html">Socket.io学习记录</summary>
    
    
    
    <category term="flutter" scheme="https://tsuiwade.github.io/categories/flutter/"/>
    
    
    <category term="flutter" scheme="https://tsuiwade.github.io/tags/flutter/"/>
    
    <category term="nodejs" scheme="https://tsuiwade.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第二章linux多进程开发</title>
    <link href="https://tsuiwade.github.io/2022/07/09/blog52-nowcoderProject2/"/>
    <id>https://tsuiwade.github.io/2022/07/09/blog52-nowcoderProject2/</id>
    <published>2022-07-09T11:14:33.000Z</published>
    <updated>2022-07-09T11:14:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709151547833.png" alt="image-20220709151547833"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709151741790.png" alt="image-20220709151741790"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152001679.png" alt="image-20220709152001679"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152137918.png" alt="image-20220709152137918"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152409441.png" alt="image-20220709152409441"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152513447.png" alt="image-20220709152513447" style="zoom: 67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152551801.png" alt="image-20220709152551801"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152730589.png" alt="image-20220709152730589" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152820578.png" alt="image-20220709152820578" style="zoom:80%;" /></p><hr><h2 id="2-1-进程的状态"><a href="#2-1-进程的状态" class="headerlink" title="2.1 进程的状态"></a>2.1 进程的状态</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709152922274.png" alt="image-20220709152922274"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709153613473.png" alt="image-20220709153613473"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709153917036.png" alt="image-20220709153917036" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709154108593.png" alt="image-20220709154108593"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709155121586.png" alt="image-20220709155121586"></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709154222057.png" alt="image-20220709154222057" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709154501219.png" alt="image-20220709154501219" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709155630565.png" alt="image-20220709155630565"></p><hr><h2 id="2-3-进程创建"><a href="#2-3-进程创建" class="headerlink" title="2.3 进程创建"></a>2.3 进程创建</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709155809181.png" alt="image-20220709155809181"></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709160329818.png" alt="image-20220709160329818"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709160502783.png" alt="image-20220709160502783" style="zoom:50%;" /></p><p>当前终端pid87186创建fork子进程87631（ 在父进程中 返回子进程的pid），一个父进程为87630，一个子进程87631。CPU时间片交替运行。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709161510202.png" alt="image-20220709161510202" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709161530157.png" alt="image-20220709161530157" style="zoom:50%;" /></p><hr><h2 id="2-4-父子进程关系及GDB多进程调试"><a href="#2-4-父子进程关系及GDB多进程调试" class="headerlink" title="2.4 父子进程关系及GDB多进程调试"></a>2.4 父子进程关系及GDB多进程调试</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709162506370.png" alt="image-20220709162506370"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709162743575.png" alt="image-20220709162743575" style="zoom:50%;" /></p><p>初始值一样，后续操作不一样。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709162845593.png" alt="image-20220709162845593" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712095224502.png" alt="image-20220712095224502"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709164650569.png" alt="image-20220709164650569"></p><p>父子进程间遵循<strong>读时共享写时复制</strong>的原则。只有进程空间的各段的内容要发生变化时（子进程或父进程进行写操作时，都会引起复制），才会将父进程的内容复制一份给子进程。<strong>父子进程在逻辑上仍然是严格相互独立的两个进程，各自维护各自的参数，只是在物理上实现了读时共享，写时复制。</strong> </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709173503178.png" alt="image-20220709173503178" style="zoom:50%;" /></p><hr><h2 id="2-5-父子进程关系"><a href="#2-5-父子进程关系" class="headerlink" title="2.5 父子进程关系"></a>2.5 父子进程关系</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709174528241.png" alt="image-20220709174528241" style="zoom:67%;" /></p><p>默认调试父进程，子进程自己跑自己的。   </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709174556763.png" alt="image-20220709174556763"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712170609358.png" alt="image-20220712170609358"></p><hr><h2 id="2-6-函数族"><a href="#2-6-函数族" class="headerlink" title="2.6 函数族"></a>2.6 函数族</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709191216787.png" alt="image-20220709191216787"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709192101771.png" alt="image-20220709192101771"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709192802851.png" alt="image-20220709192802851" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709192953530.png" alt="image-20220709192953530" style="zoom: 67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709193026626.png" alt="image-20220709193026626" style="zoom: 67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709193147788.png" alt="image-20220709193147788" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712193814626.png" alt="image-20220712193814626" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712193751377.png" alt="image-20220712193751377" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712184916552.png" alt="image-20220712184916552" style="zoom:67%;" /></p><p>hello world不在一起的原因是因为产生了孤儿进程</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712193959925.png" alt="image-20220712193959925" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712194119117.png" alt="image-20220712194119117" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712194438611.png" alt="image-20220712194438611"></p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709200757166.png" alt="image-20220709200757166"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709200943834.png" alt="image-20220709200943834" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709201041144.png" alt="image-20220709201041144" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709201148099.png" alt="image-20220709201148099"></p><p>正常</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712195746801.png" alt="image-20220712195746801" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712195707422.png" alt="image-20220712195707422"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712195924079.png" alt="image-20220712195924079"></p><p>子进程睡一秒钟，父进程早就死了</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709201834519.png" alt="image-20220709201834519"></p><p>​    孤儿进程的父进程号为1，父进程结束后会显示终端</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709202519128.png" alt="image-20220709202519128"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712200503016.png" alt="image-20220712200503016"></p><p>子进程死了父进程还在进行。父进程14859处于休眠状态，子进程14860是僵尸进程。，kill -9杀不死。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712200624838.png" alt="image-20220712200624838"></p><hr><h2 id="2-8wait函数"><a href="#2-8wait函数" class="headerlink" title="2.8wait函数"></a>2.8wait函数</h2><p>主要针对僵尸进程。学习如何在父进程中回收子进程的资源。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712201345734.png" alt="image-20220712201345734"></p><p>wait 等待子进程状态改变，包含子进程结束、被信号停止、被信号暂停。调用wait会去释放子进程的资源。父进程默认wait阻塞了，</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712203752609.png" alt="image-20220712203752609"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204045977.png" alt="image-20220712204045977" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204111704.png" alt="image-20220712204111704" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204152216.png" alt="image-20220712204152216" style="zoom:67%;" /></p><p>此时子进程已经死掉，成为僵尸进程。当被ctrl+c结束了父进程，僵尸进程就被进程号为1的进程回收了，因为父进程一死，子进程就变成孤儿进程。但并不能每次都结束父进程，应该在父进程中做一些操作。</p><p>wait(NULL) 不需要子进程退出的状态</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204332100.png" alt="image-20220712204332100" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712210245314.png" alt="image-20220712210245314" style="zoom:67%;" /></p><p>子进程一直在打印，父进程没有动，说明父进程阻塞了。通过kill -9 13478 ，父进程不阻塞了，就打印。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712210434033.png" alt="image-20220712210434033" style="zoom:67%;" /></p><p>然后全kill掉，此时没有子进程了。<strong>所有子进程都结束，则返回-1。</strong></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204628113.png" alt="image-20220712204628113" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204642539.png" alt="image-20220712204642539" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204712745.png" alt="image-20220712204712745" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712204935909.png" alt="image-20220712204935909" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712205016889.png" alt="image-20220712205016889" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712211021844.png" alt="image-20220712211021844" style="zoom:80%;" /></p><p>通过信号kill -9杀死</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712205059554.png" alt="image-20220712205059554" style="zoom:80%;" /></p><hr><h2 id="2-9-waitpid函数"><a href="#2-9-waitpid函数" class="headerlink" title="2.9 waitpid函数"></a>2.9 waitpid函数</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712213256356.png" alt="image-20220712213256356"></p><p>int ret = waitpid(-1, &amp;st, 0);阻塞情况</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712215332656.png" alt="image-20220712215332656"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712215357568.png" alt="image-20220712215357568"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712214101230.png" alt="image-20220712214101230"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712213910598.png" alt="image-20220712213910598" style="zoom:80%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712214144970.png" alt="image-20220712214144970"></p><p>父进程非阻塞。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712215625353.png" alt="image-20220712215625353" style="zoom:80%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712214240848.png" alt="image-20220712214240848"></p><p>所有子进程都结束之后，再回过来 ret返回了-1值。</p><hr><h2 id="2-10-进程间通信-IPC"><a href="#2-10-进程间通信-IPC" class="headerlink" title="2.10 进程间通信 IPC"></a>2.10 进程间通信 IPC</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712221317444.png" alt="image-20220712221317444"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712222017940.png" alt="image-20220712222017940"></p><hr><h2 id="2-11-匿名管道（PIPE）"><a href="#2-11-匿名管道（PIPE）" class="headerlink" title="2.11 匿名管道（PIPE）"></a>2.11 匿名管道（PIPE）</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220712222710566.png" alt="image-20220712222710566"></p><p>竖线为管道符，前后各为一个指令，ls为获取当前文件列表，wc -l统计个数。写入端就是向管道注入，管道读取端就是从管道输出。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713093759069.png" alt="image-20220713093759069"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713094021279.png" alt="image-20220713094021279"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713094503815.png" alt="image-20220713094503815"></p><p>父进程通过文件描述符5向管道写数据，子进程通过6从管道读数据，通过其管道5写数据，父进程通过6从管道读数据，父子进程共享文件描述符。 </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713094835797.png" alt="image-20220713094835797" style="zoom:50%;" /></p><p>管道数据结构为环形队列。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713095024204.png" alt="image-20220713095024204" style="zoom:67%;" /></p><h2 id="2-12-父子进程通过匿名管道通信"><a href="#2-12-父子进程通过匿名管道通信" class="headerlink" title="2.12 父子进程通过匿名管道通信"></a>2.12 父子进程通过匿名管道通信</h2><p>数据被写到管道的写端，（应该是入端）</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713095309303.png" alt="image-20220713095309303" style="zoom:50%;" /></p><p>子进程发送数据给父进程，父进程读取到数据 输出</p><p>在fork之前创建管道</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713095708508.png" alt="image-20220713095708508" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713095916244.png" alt="image-20220713095916244" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713095929370.png" alt="image-20220713095929370"></p><p>如果子进程写之前休眠10秒，父进程仍然是阻塞等待。管道默认是阻塞，当管道没有数据时，read阻塞，管道满了，write阻塞。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713100236399.png" alt="image-20220713100236399" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713100301798.png" alt="image-20220713100301798"></p><p>父进程先读后写，子进程先写后读。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713100626622.png" alt="image-20220713100626622" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713100739557.png" alt="image-20220713100739557" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713100758213.png" alt="image-20220713100758213" style="zoom:67%;" /></p><p>管道大小为4k</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713101030871.png" alt="image-20220713101030871" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713101045461.png" alt="image-20220713101045461"></p><p>注释掉sleep</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713101531493.png" alt="image-20220713101531493" style="zoom:67%;" /></p><p>输出有错误，乱码 且 收到自己发的数据，不对。</p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713102307570.png" alt="image-20220713102307570" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713102327586.png" alt="image-20220713102327586" style="zoom:50%;" /></p><p>现在情况变成了</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713102353491.png" alt="image-20220713102353491" style="zoom:50%;" /></p><p>所以在读的时候 父进程要关闭写端，子进程要关闭读端</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713102934517.png" alt="image-20220713102934517" style="zoom: 50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713102959385.png" alt="image-20220713102959385" style="zoom:50%;" /></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713103229311.png" alt="image-20220713103229311" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713104814569.png" alt="image-20220713104814569" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713104908704.png" alt="image-20220713104908704" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713105115971.png" alt="image-20220713105115971" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713105923789.png" alt="image-20220713105923789"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713110048778.png" alt="image-20220713110048778"></p><h2 id="2-14设置非阻塞"><a href="#2-14设置非阻塞" class="headerlink" title="2.14设置非阻塞"></a>2.14设置非阻塞</h2><p>阻塞状态：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713110640132.png" alt="image-20220713110640132" style="zoom:50%;" /> </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713110555043.png" alt="image-20220713110555043" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713110514941.png" alt="image-20220713110514941" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713110755428.png" alt="image-20220713110755428" style="zoom:67%;" /></p><p>  <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709110426450.png" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713111229004.png" alt="image-20220713111229004" style="zoom:50%;" /></p><p>父进程中</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713111534787.png" alt="image-20220713111534787" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713111545212.png" alt="image-20220713111545212" style="zoom:50%;" /></p><hr><h2 id="2-15有名管道（FIFO）"><a href="#2-15有名管道（FIFO）" class="headerlink" title="2.15有名管道（FIFO）"></a>2.15有名管道（FIFO）</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713112030962.png" alt="image-20220713112030962"></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713112131822.png" alt="image-20220713112131822"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713112720107.png" alt="image-20220713112720107"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713112734113.png" alt="image-20220713112734113"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713112936238.png" alt="image-20220713112936238"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113137997.png" alt="image-20220713113137997"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113513242.png" alt="image-20220713113513242"></p><p>   写数据</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113557719.png" alt="image-20220713113557719"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113735494.png" alt="image-20220713113735494"></p><p>读数据</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113857728.png" alt="image-20220713113857728"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713113931111.png" alt="image-20220713113931111"></p><p>写端停了，读端显示“写端断开连接”，程序结束。</p><p>运行读端，读端在open管道文件时阻塞了。运行写端，读端就运行了。</p><p>把读端停了，写端程序立马结束。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713114632610.png" alt="image-20220713114632610"></p><hr><h2 id="2-16-有名管道实现简单聊天功能"><a href="#2-16-有名管道实现简单聊天功能" class="headerlink" title="2.16 有名管道实现简单聊天功能"></a>2.16 有名管道实现简单聊天功能</h2><p>  <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713115229732.png" alt="image-20220713115229732"></p><p>chatA</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713123039338.png" alt="image-20220713123039338"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713123114228.png" alt="image-20220713123114228"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713123459756.png" alt="image-20220713123459756"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713123706381.png" alt="image-20220713123706381"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713123852092.png" alt="image-20220713123852092"></p><p>此时只能收一句 发一句，不能把读和写都放入同一个进程中，必定有一个阻塞。所以要把读写分别放到不同进程里。A父进程写，子进程读。B父进程读，子进程写。</p><h2 id="2-17内存映射"><a href="#2-17内存映射" class="headerlink" title="2.17内存映射"></a>2.17内存映射</h2><p>类似于动态库、共享库的位置。</p><p>可以指定映射 从文件的偏移量开始的len大小的文件。</p><p>内存映射之后，当修改了内存数据，也会同步到文件当中。 </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713141211276.png" alt="image-20220713141211276"></p><p>左右为进程中的内存数据。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713143305010.png" alt="image-20220713143305010" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713141859759.png" alt="image-20220713141859759"></p><p>映射文件到内存当中。</p><p>mmap()在调用进程的虚拟地址空间里，创建了一个映射</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713142227869.png" alt="image-20220713142227869"></p><ul><li>flags:<ul><li>map_shared 映射区的数据会自动和磁盘文件进行同步，进程间通信必须要设置这个选项。</li><li>map_private 不同步，内存映射区的数据修改了，对原来的文件不会修改，会重新出一个新的文件（copy on write）</li></ul></li></ul><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713142715528.png" alt="image-20220713142715528"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713142742847.png" alt="image-20220713142742847"></p><p>案例需求</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713142855197.png" alt="image-20220713142855197"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713150351372.png" alt="image-20220713150351372"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713150656773.png" alt="image-20220713150656773"></p><p>父进程读数据，子进程写数据。以文件为桥梁。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713150921776.png" alt="image-20220713150921776"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713150940667.png" alt="image-20220713150940667"></p><p>1、如果对mmap的返回值ptr做++操作，可以，但是munmap错误。</p><p>2、如果open时O_RDONLY，mmap时prot参数指定PROT_READ | PROT_WRITE 会产生错误，返回MAP_FAILED；两者权限应该一致，mmap权限小于等于open才对。</p><p>3、如果文件偏移量为1000，offset必须是4k的整数倍，所以会报错返回map_failed。</p><p>4、mmap什么情况下回调用失败？第二个参数length = 0， 第三个参数prot只指定了写权限。或者和open不一致会报错。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713151649555.png" alt="image-20220713151649555"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713151752961.png" alt="image-20220713151752961"></p><h3 id="使用内存映射实现文件拷贝的功能"><a href="#使用内存映射实现文件拷贝的功能" class="headerlink" title="使用内存映射实现文件拷贝的功能"></a>使用内存映射实现文件拷贝的功能</h3><p>把english.txt复制为cpy.txt</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713151957260.png" alt="image-20220713151957260"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713152315628.png" alt="image-20220713152315628"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713152434989.png" alt="image-20220713152434989"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713152512439.png" alt="image-20220713152512439"></p><p>之前为文件映射，下面为<strong>匿名映射 MAP_ANONYMOUS</strong> 。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713152941820.png" alt="image-20220713152941820"></p><p>内存映射为非阻塞的。 子进程读取，父进程写。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153100366.png" alt="image-20220713153100366"></p><hr><h2 id="2-19-信号概述"><a href="#2-19-信号概述" class="headerlink" title="2.19 信号概述"></a>2.19 信号概述</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153253383.png" alt="image-20220713153253383"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153613482.png" alt="image-20220713153613482"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153821911.png" alt="image-20220713153821911"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153901814.png" alt="image-20220713153901814"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713153946392.png" alt="image-20220713153946392"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154013335.png" alt="image-20220713154013335"></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154048465.png" alt="image-20220713154048465"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154055618.png" alt="image-20220713154055618"></p><p>针对core文件</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154842933.png" alt="image-20220713154842933"></p><p>用了buf野内存。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154912388.png" alt="image-20220713154912388"></p><p>要设置core文件</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154625742.png" alt="image-20220713154625742"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713155039196.png" alt="image-20220713155039196"></p><p>gdb a.out来调试，产生信号11。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713155148421.png" alt="image-20220713155148421"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713154413309.png" alt="image-20220713154413309"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160018537.png" alt="image-20220713160018537"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160111686.png" alt="image-20220713160111686"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160135830.png" alt="image-20220713160135830"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160419641.png" alt="image-20220713160419641"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160442910.png" alt="image-20220713160442910"></p><hr><h2 id="2-21-alarm函数"><a href="#2-21-alarm函数" class="headerlink" title="2.21 alarm函数"></a>2.21 alarm函数</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713160937737.png" alt="image-20220713160937737"></p><p>alarm（100）是不阻塞的。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713161131386.png" alt="image-20220713161131386"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713161145062.png" alt="image-20220713161145062"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713162237088.png" alt="image-20220713162237088"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713162352329.png" alt="image-20220713162352329"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713162644561.png" alt="image-20220713162644561"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713164815325.png" alt="image-20220713164815325"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713171214771.png" alt="image-20220713171214771"></p><p>过3s吼，每隔2秒定时一次。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713165638806.png" alt="image-20220713165638806"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713170125850.png" alt="image-20220713170125850"></p><p>立马调用“定时器开始了， 因为setitimer是非阻塞的。应该是每隔两秒钟发送一个信号，把进程杀死了，因为没有信号捕捉，所以没有定时的效果。</p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713172022840.png" alt="image-20220713172022840"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713172712393.png" alt="image-20220713172712393"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713182100095.png" alt="image-20220713182100095"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713183123518.png" alt="image-20220713183123518"></p><hr><h2 id="2-24信号集"><a href="#2-24信号集" class="headerlink" title="2.24信号集"></a>2.24信号集</h2><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713184355053.png" alt="image-20220713184355053"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713184959698.png" alt="image-20220713184959698"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185257423.png" alt="image-20220713185257423"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185450518.png" alt="image-20220713185450518"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185441191.png" alt="image-20220713185441191"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185727380.png" alt="image-20220713185727380"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185630069.png" alt="image-20220713185630069"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713185706086.png" alt="image-20220713185706086"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713190200384.png" alt="image-20220713190200384"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713190225161.png" alt="image-20220713190225161"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713190258103.png" alt="image-20220713190258103"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220713190611343.png" alt="image-20220713190611343"></p>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第二章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第一章linux系统编程入门</title>
    <link href="https://tsuiwade.github.io/2022/07/07/blog51-nowcoderProject1/"/>
    <id>https://tsuiwade.github.io/2022/07/07/blog51-nowcoderProject1/</id>
    <published>2022-07-07T10:37:42.000Z</published>
    <updated>2022-07-07T10:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>1.2GCC</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707104035969.png" alt="image-20220707104035969"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707103826857.png" alt="image-20220707103826857"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707234008969.png" alt="image-20220707234008969"></p><p>gcc test.c -E -o test.i 将源代码 经过预处理器 转换为预处理后源代码</p><p>gcc test.i -S -o test.s 将预处理后源代码 经过编译器 编译成汇编语言</p><p>gcc test.s -s -o test.o 将汇编语言 经过汇编器 汇编成目标代码（二进制文件）</p><p>./test.o 可以执行</p><p>gcc test.c -S 直接生成test.s</p><p>gcc test.c 直接生成a.out</p><p>gcc test.c -o test 生成可执行文件test</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707104106542.png" alt="image-20220707104106542"></p><hr><p>1.4 静态库的制作和使用</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707162622123.png" alt="image-20220707162622123"></p><p>lesson04下面有calc和library</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707211708002.png" alt="image-20220707211708002"></p><p>calc目录下</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707163507506.png" alt="image-20220707163507506"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707163558574.png" alt="image-20220707163558574"></p><p>library目录下，文件基本同calc中文件</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707212819186.png" alt="image-20220707212819186"></p><p>将静态库文件拷贝到library/lib下</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707213127527.png" alt="image-20220707213127527"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707213245664.png" alt="image-20220707213245664"></p><p> 在main中使用库文件 </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707213410642.png" alt="image-20220707213410642"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707213541008.png" alt="image-20220707213541008"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707164322392.png" alt="image-20220707164322392"></p><p>或者在library/src文件夹下</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707214201467.png" alt="image-20220707214201467"></p><hr><p>1.6 动态库的制作和使用</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707164605558.png" alt="image-20220707164605558"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707164918390.png" alt="image-20220707164918390"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707223732478.png" alt="image-20220707223732478"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707223928765.png" alt="image-20220707223928765"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707165332730.png" alt="image-20220707165332730"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707165444349.png" alt="image-20220707165444349"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707224945116.png" alt="image-20220707224945116"></p><p>有问题， 需要动态库加载到内存当中</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707230434407.png" alt="image-20220707230434407"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707230643122.png" alt="image-20220707230643122"></p><p>输入env输出环境变量</p><p>解决方法1</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707231740047.png" alt="image-20220707231740047"></p><p>$ 原有变量 ：增加新变量</p><p>此时仅在会话级别可行，新开会话不可行。</p><p>解决方法2，用户级别配置，根目录~下</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707232016476.png" alt="image-20220707232016476"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707232102006.png" alt="image-20220707232102006"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707232156867.png" alt="image-20220707232156867"></p><p>使其生效</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707232436634.png" alt="image-20220707232436634"></p><p>最后一样</p><p>方法4：修改/etc/ld.so.cache文件列表 里面是二进制数据，需要间接修改</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707233158730.png" alt="image-20220707233158730"></p><p>sudo vim /etc/ld.so.conf</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707233111497.png" alt="image-20220707233111497"></p><hr><p>动态库和静态库的优缺点</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707234615271.png" alt="image-20220707234615271"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220707234752872.png" alt="image-20220707234752872"></p><hr><p>1.10 makefile</p><p>在项目src文件夹下make指令</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708095030870.png" alt="image-20220708095030870"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708094453324.png" alt="image-20220708094453324"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708094309244.png" alt="image-20220708094309244"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708094938348.png" alt="image-20220708094938348"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708095911920.png" alt="image-20220708095911920"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708100317745.png" alt="image-20220708100317745"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708100203735.png" alt="image-20220708100203735"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708101408184.png" alt="image-20220708101408184"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708100416196.png" alt="image-20220708100416196"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708100606699.png" alt="image-20220708100606699"></p><p>删除依赖 make clean</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708100930274.png" alt="image-20220708100930274"></p><hr><p>1.13 GDB调试</p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708104655779.png" alt="image-20220708104655779"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708103904874.png" alt="image-20220708103904874"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708104440816.png" alt="image-20220708104440816"></p><p>没加调试信息就小点。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708105455704.png" alt="image-20220708105455704"></p><p>输入list，显示10行</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708114141209.png" alt="image-20220708114141209"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708114550493.png" alt="image-20220708114550493"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708114637397.png" alt="image-20220708114637397"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708115114472.png" alt="image-20220708115114472"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708134856843.png" alt="image-20220708134856843"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708135029955.png" alt="image-20220708135029955"></p><hr><p>1.17 文件IO</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708142349617.png" alt="image-20220708142349617"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708160455300.png" alt="image-20220708160455300"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708160948453.png" alt="image-20220708160948453"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708162755823.png" alt="image-20220708162755823"></p><p>   1.20 open 打开文件</p><p>!<img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709002625234.png" alt="image-20220709002625234"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708213355579.png" alt="image-20220708213355579" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708213611066.png" alt="image-20220708213611066"></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708213910568.png" alt="image-20220708213910568" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708213825026.png" alt="image-20220708213825026" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708214013338.png" alt="image-20220708214013338"></p><p>三参数的open函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708215043338.png" alt="image-20220708215043338"></p><p>rwx read/write/执行权限</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708215002576.png" alt="image-20220708215002576"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708215246114.png" alt="image-20220708215246114" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708215329505.png" alt="image-20220708215329505"></p><hr><p>1.22 read write函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708220033643.png" alt="image-20220708220033643"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220708220158280.png" alt="image-20220708220158280"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709002426032.png" alt="image-20220709002426032" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709002259381.png" alt="image-20220709002259381" style="zoom:50%;" /></p><hr><p>1.23 lseek函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709003122804.png" alt="image-20220709003122804"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709003329866.png" alt="image-20220709003329866"><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709003810022.png" alt="image-20220709003810022"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709003917559.png" alt="image-20220709003917559" style="zoom:50%;" /></p><hr><p>1.24 stat lstat</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709085617664.png" alt="image-20220709085617664"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090310940.png" alt="image-20220709090310940"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090340599.png" alt="image-20220709090340599"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090538760.png" alt="image-20220709090538760" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709085805573.png" alt="image-20220709085805573"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709085854663.png" alt="image-20220709085854663"></p><p>lstat 获取软连接信息，而stat会获取指向文件的信息</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090638561.png" alt="image-20220709090638561"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090650423.png" alt="image-20220709090650423"></p><hr><p>模拟实现ls -l 命令，想实现下图功能</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709090928800.png" alt="image-20220709090928800"></p><p>获取文件类型和文件权限</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092833342.png" alt="image-20220709092833342"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709093036912.png" alt="image-20220709093036912" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709091744552.png" alt="image-20220709091744552" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092003776.png" alt="image-20220709092003776" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092107457.png" alt="image-20220709092107457" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092140367.png" alt="image-20220709092140367" style="zoom:50%;" /></p><p>判断文件的访问权限</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092313183.png" alt="image-20220709092313183" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092335742.png" alt="image-20220709092335742" style="zoom:50%;" /></p><p>硬链接数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709092519798.png" alt="image-20220709092519798" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709093155773.png" alt="image-20220709093155773" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709093131959.png" alt="image-20220709093131959" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709093234697.png" alt="image-20220709093234697"></p><hr><p>1.26 文件属性操作函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709093328241.png" alt="image-20220709093328241"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709094543925.png" alt="image-20220709094543925"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709094623062.png" alt="image-20220709094623062" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709095750560.png" alt="image-20220709095750560" style="zoom:50%;" /></p><p>vim /etc/passwd</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709095934609.png" alt="image-20220709095934609"></p><p>vim /etc/group</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100008469.png" alt="image-20220709100008469" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100042295.png" alt="image-20220709100042295" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100538751.png" alt="image-20220709100538751" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100553738.png" alt="image-20220709100553738" style="zoom:50%;" /></p><hr><p>1.27 目录操作函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100717934.png" alt="image-20220709100717934"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709100833669.png" alt="image-20220709100833669" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709101206627.png" alt="image-20220709101206627" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709101242804.png" alt="image-20220709101242804" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709101657349.png" alt="image-20220709101657349" style="zoom:50%;" /></p><hr><p>1.28 目录遍历函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709101735515.png" alt="image-20220709101735515" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709101945277.png" alt="image-20220709101945277" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709102100519.png" alt="image-20220709102100519"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709102225716.png" alt="image-20220709102225716" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709102245473.png" alt="image-20220709102245473" style="zoom:50%;" /></p><p>例子 读取某目录下所有的普通文件个数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709102352952.png" alt="image-20220709102352952" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709103000975.png" alt="image-20220709103000975" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709103044165.png" alt="image-20220709103044165" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709103212645.png" alt="image-20220709103212645" style="zoom:50%;" /></p><hr><p>12 dup函数 文件描述符</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104010554.png" alt="image-20220709104010554" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104242605.png" alt="image-20220709104242605" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104452460.png" alt="image-20220709104452460" style="zoom:50%;" /></p><p> <img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104421778.png" alt="image-20220709104421778" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104522066.png" alt="image-20220709104522066"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709104804753.png" alt="image-20220709104804753"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709105353103.png" alt="image-20220709105353103" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709105455618.png" alt="image-20220709105455618" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709105521984.png" alt="image-20220709105521984"></p><hr><p>1.30 fcntl函数</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709105622552.png" alt="image-20220709105622552" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709110203689.png" alt="image-20220709110203689" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709110426450.png" alt="image-20220709110426450" style="zoom:67%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709110500361.png" alt="image-20220709110500361" style="zoom:50%;" /></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220709110631547.png" alt="image-20220709110631547" style="zoom:50%;" /></p>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第一章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ 并发</title>
    <link href="https://tsuiwade.github.io/2022/07/06/blog50-CPP-Concurrency-In-Action/"/>
    <id>https://tsuiwade.github.io/2022/07/06/blog50-CPP-Concurrency-In-Action/</id>
    <published>2022-07-06T14:45:05.000Z</published>
    <updated>2022-07-06T14:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>力扣1114 <a href="https://leetcode.cn/problems/print-in-order/solution/c-hu-chi-suo-tiao-jian-bian-liang-xin-hao-liang-yi/">https://leetcode.cn/problems/print-in-order/solution/c-hu-chi-suo-tiao-jian-bian-liang-xin-hao-liang-yi/</a></p><p>1、互斥量</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保证俩代码不会同时执行</span></span><br><span class="line"><span class="comment">// c++11并发与多线程视频课程_2_5</span></span><br><span class="line">mutex myMutex1;</span><br><span class="line"></span><br><span class="line">    myMutex1.lock();</span><br><span class="line">    <span class="comment">// code 1 </span></span><br><span class="line">    myMutex1.unlock();</span><br><span class="line"></span><br><span class="line">    myMutex1.lock();</span><br><span class="line">    <span class="comment">// code 2</span></span><br><span class="line">    myMutex1.unlock();</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误代码  </span></span><br><span class="line"><span class="comment">// 根据 c++ 标准，在一个线程尝试对一个 mutex 对象进行 unlock 操作时，mutex 对象的所有权必须在这个线程上；也就是说，应该由同一个线程来对一个 mutex 对象进行 lock 和 unlock 操作，否则会产生未定义行为。题目中提到了 first, second, third 三个函数分别是由三个不同的线程来调用的，但我们是在 Foo 对象构造时（可以是在 create 这几个线程的主线程中，也可以是在三个线程中的任意一个）对两个 mutex 对象进行 lock 操作的，因此，调用 first 和 second 函数的两个线程中至少有一个在尝试获取其他线程所拥有的 mutex 对象的所有权。</span></span><br><span class="line"><span class="comment">// 一把锁的上锁与解锁在不同线程中进行，在windows上会报错，在Linux上不会报错，可能力扣用的跑代码的机器是Linux所以这样不会出现问题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    mutex mtx1, mtx2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo() &#123;</span><br><span class="line">        mtx1.lock(), mtx2.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        mtx1.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        mtx1.lock();</span><br><span class="line">        printSecond();</span><br><span class="line">        mtx1.unlock();</span><br><span class="line">        mtx2.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        mtx2.lock();</span><br><span class="line">        printThird();</span><br><span class="line">        mtx2.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们只是通过 mutex 的机制来保护数据被同时访问，所以最好使用 lock_guard 或者 unique_lock 提供的 RAII 机制来管理 mutex 对象，而不是直接操作 mutex 对象；其中 lock_guard 只拥有构造和析构函数，用来实现 RAII 机制，而 unique_lock 是一个完整的 mutex 所有权包装器，封装了所有 mutex 的函数：</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    mutex mtx_1, mtx_2;</span><br><span class="line">    unique_lock&lt;mutex&gt; lock_1, lock_2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Foo() : lock_1(mtx_1, try_to_lock), lock_2(mtx_2, try_to_lock) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        lock_1.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard</span><span class="params">(mtx_1)</span></span>;</span><br><span class="line">        printSecond();</span><br><span class="line">        lock_2.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="function">lock_guard&lt;mutex&gt; <span class="title">guard</span><span class="params">(mtx_2)</span></span>;</span><br><span class="line">        printThird();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><p>2、条件变量</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line">    condition_variable cv;</span><br><span class="line">    mutex mtx;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printFirst)</span> </span>&#123;</span><br><span class="line">        printFirst();</span><br><span class="line">        k = <span class="number">1</span>;</span><br><span class="line">        cv.notify_all();    <span class="comment">// 通知其他所有在等待唤醒队列中的线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">second</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printSecond)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;   <span class="comment">// lock mtx</span></span><br><span class="line">        cv.wait(lock, [<span class="keyword">this</span>]()&#123; <span class="keyword">return</span> k == <span class="number">1</span>; &#125;);  <span class="comment">// unlock mtx，并阻塞等待唤醒通知，需要满足 k == 1 才能继续运行</span></span><br><span class="line">        printSecond();</span><br><span class="line">        k = <span class="number">2</span>;</span><br><span class="line">        cv.notify_one();    <span class="comment">// 随机通知一个（unspecified）在等待唤醒队列中的线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">third</span><span class="params">(function&lt;<span class="keyword">void</span>()&gt; printThird)</span> </span>&#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;   <span class="comment">// lock mtx</span></span><br><span class="line">        cv.wait(lock, [<span class="keyword">this</span>]()&#123; <span class="keyword">return</span> k == <span class="number">2</span>; &#125;);  <span class="comment">// unlock mtx，并阻塞等待唤醒通知，需要满足 k == 2 才能继续运行</span></span><br><span class="line">        printThird();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><a href="https://yelinji.gitbooks.io/cpp_concurrency_in_action/content/">https://yelinji.gitbooks.io/cpp_concurrency_in_action/content/</a>  作为对《C++ Concurrency in Action》的中文翻译。</p><hr><p>1.4</p><p>清单 1.1 一个简单的Hello, Concurrent World程序：</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;  //①</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span>  <span class="comment">//②</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello Concurrent World\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::thread <span class="title">t</span><span class="params">(hello)</span></span>;  <span class="comment">//③</span></span><br><span class="line">  t.join();  <span class="comment">//④</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p>2.1线程管理的基础</p><p><code>std::thread</code>可以用可调用类型构造，将带有函数调用符类型的实例传入<code>std::thread</code>类中，替换默认的构造函数。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">background_task</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    do_something();</span><br><span class="line">    do_something_else();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">background_task f;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::thread <span class="title">my_thread</span><span class="params">(f)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">作为对《C++ Concurrency in Action》的中文翻译。</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="https://tsuiwade.github.io/2022/07/06/blog49-segmentTree/"/>
    <id>https://tsuiwade.github.io/2022/07/06/blog49-segmentTree/</id>
    <published>2022-07-06T11:18:59.000Z</published>
    <updated>2022-07-06T11:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对力扣307题，找到题解 <a href="https://leetcode.cn/problems/range-sum-query-mutable/solution/by-lfool-v3x9/">https://leetcode.cn/problems/range-sum-query-mutable/solution/by-lfool-v3x9/</a></p><p><strong>线段树解决的是「区间和」的问题，且该「区间」会被修改</strong></p><p>所以<strong>线段树</strong>主要实现两个方法：「求区间和」&amp;&amp;「修改区间」，且时间复杂度均为 <code>O(logn)</code></p><p>始终记住一句话：<strong>线段树的每个节点代表一个区间</strong></p><p>从图中可以看到，每个节点代表一个区间，而节点的值就是该区间的和 (其实还可以根据题目问题，改变表示的含义！！)</p><p>数字之和「总数字之和 = 左区间数字之和 + 右区间数字之和」<br>最大公因数 (GCD)「总 GCD = gcd(左区间 GCD, 右区间 GCD)」<br>最大值「总最大值 = max(左区间最大值，右区间最大值)」</p><p>不符合区间加法的例子：</p><ul><li>众数「只知道左右区间的众数，没法求总区间的众数」</li><li>01 序列的最长连续零「只知道左右区间的最长连续零，没法知道总的最长连续零」</li></ul><hr><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; segmentTree;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            segmentTree[node] = nums[start];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        build(node * <span class="number">2</span> + <span class="number">1</span>, start, mid, nums);</span><br><span class="line">        build(node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end, nums);</span><br><span class="line">        segmentTree[node] = segmentTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmentTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val, <span class="keyword">int</span> node, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            segmentTree[node] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid) &#123;</span><br><span class="line">            change(index, val, node * <span class="number">2</span> + <span class="number">1</span>, start, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            change(index, val, node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">        segmentTree[node] = segmentTree[node * <span class="number">2</span> + <span class="number">1</span>] + segmentTree[node * <span class="number">2</span> + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">range</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> node, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == start &amp;&amp; right == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> segmentTree[node];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> range(left, right, node * <span class="number">2</span> + <span class="number">1</span>, start, mid);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left &gt; mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> range(left, right, node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> range(left, mid, node * <span class="number">2</span> + <span class="number">1</span>, start, mid) + range(mid + <span class="number">1</span>, right, node * <span class="number">2</span> + <span class="number">2</span>, mid + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NumArray(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) : n(nums.size()), segmentTree(nums.size() * <span class="number">4</span>) &#123;</span><br><span class="line">        build(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, nums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        change(index, val, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> range(left, right, <span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></h2><p>针对力扣307题的题解 <a href="https://leetcode.cn/problems/range-sum-query-mutable/solution/by-lfool-v3x9/">https://leetcode.cn/problems/range-sum-query-mutable/solution/by-lfool-v3x9/</a></p><ul><li>对于表示为「区间和」且对区间进行「加减」的更新操作的情况，我们在更新节点值的时候『需要✖️左右孩子区间叶子节点的数量 (注意是叶子节点的数量)』；我们在下推懒惰标记的时候『需要累加』！！(这种情况和模版一致！！) 如题目 最近的请求次数</li><li>对于表示为「区间和」且对区间进行「覆盖」的更新操作的情况，我们在更新节点值的时候『需要✖️左右孩子区间叶子节点的数量 (注意是叶子节点的数量)』；我们在下推懒惰标记的时候『不需要累加』！！(因为是覆盖操作！！) 如题目 区域和检索 - 数组可修改</li><li>对于表示为「区间最值」且对区间进行「加减」的更新操作的情况，我们在更新节点值的时候『不需要✖️左右孩子区间叶子节点的数量 (注意是叶子节点的数量)』；我们在下推懒惰标记的时候『需要累加』！！ 如题目 我的日程安排表 I、我的日程安排表 III</li></ul><p>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;针对力扣307题，找到题解 &lt;a href=&quot;https://leetcode.cn/problems/range-sum-query-mutable/solution/by-lfool-v3x9/&quot;&gt;https://leetcode.cn/problems/range-s</summary>
      
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>不同文件共享函数的使用问题</title>
    <link href="https://tsuiwade.github.io/2022/07/01/blog48-extern/"/>
    <id>https://tsuiwade.github.io/2022/07/01/blog48-extern/</id>
    <published>2022-07-01T16:18:41.000Z</published>
    <updated>2022-07-01T16:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="情景描述："><a href="#情景描述：" class="headerlink" title="情景描述："></a>情景描述：</h4><p>在qt的mainwindow.cpp下想使用udpthread.cpp下的函数，遇到定义的错误。</p><p>初始代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mainwindow.cpp</span></span><br><span class="line">直接使用BLEndianUint32</span><br><span class="line"><span class="comment">// udpthread.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |  ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |  ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现</p><p>error: use of undeclared identifier ‘BLEndianUint32’问题</p><hr><p>解决方法1：类的定义</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udpthread.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udpThread</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// udpthread.cpp</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span>  <span class="title">udpThread::BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |  ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |  ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// mainwindow.h</span></span><br><span class="line">    udpThread *MyUdp;</span><br><span class="line"><span class="comment">// mainwindow.cpp </span></span><br><span class="line">    MyUdp = <span class="keyword">new</span> udpThread;</span><br><span class="line">    value = MyUdp-&gt;BLEndianUint32(value);</span><br></pre></td></tr></table></figure><p>BLEndianUint32函数写成udpthread类的公有成员</p><p>而在mainwindow中实例化一个对象MyUdp，再调用函数BLEndianUint32。</p><p>或者在类中直接定义也可以。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udpthread.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udpThread</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |  ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |  ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br></pre></td></tr></table></figure><p>或者把成员函数声明成静态函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udpthread.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udpThread</span> :</span> <span class="keyword">public</span> QObject &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |  ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |  ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mainwindow.cpp </span></span><br><span class="line">    value = MyUdp-&gt;BLEndianUint32(value);  <span class="comment">// 1</span></span><br><span class="line">    value = udpThread::BLEndianUint32(value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>来源于 <a href="https://blog.csdn.net/weixin_43222324/article/details/99707095">https://blog.csdn.net/weixin_43222324/article/details/99707095</a></p><p>下面我们来分析一下为什么可以这样改       </p><p>（1）为什么要实例化</p><pre><code>   仍然以上面的类Student为例。类Student表示学生，这是一个抽象的概念，表示的是所有学生。实例化一个对象Student XiaoWang;，这个对象表示的是具体的学生小王，你还可以实例化别的对象比如小张、小刘、小李、小周、小赵等等，这些对象都是具体的某个学生。   类的成员函数getAge()的意思是得到学生的年龄，我们最直观的理解就是，学生的年龄那肯定是某一个具体的学生的年龄，如果你用Student.getAge()的方法调用年龄函数，那究竟得到的是哪个学生的年龄呢？所以对于这种非静态成员函数，我们要实例化一个对象比如学生小王，我们调用XiaoWang.getAge()得到的就是小王的年龄。</code></pre><p>（2）为什么调用静态函数不需要实例化</p><pre><code>   仍然以上面的类Student为例。如果现在我们要得到所有学生的平均年龄该怎么办呢？假如现在类Student里增加了一个函数getAverageAge()，我们想得到所有学生的平均年龄，难道还要先实例化一个对象表示具体的学生，再通过这个对象得到平均年龄吗？   所有学生的平均年龄，是学生类Student的一个共同特点，我们可以把得到平均年龄函数声明成静态函数，static int getAverageAge();，然后无需实例化对象，直接通过Student::getAverageAge();的方式调用。   类的静态函数表示的是这个类的一个共同特点，静态函数是类的所有对象所共享的，不是某一个对象特有的，就像平均年龄是所有学生所共有的而不是某个学生所特有的，因此，静态函数不需要实例化对象，直接通过类名::函数名的方式就能调用。</code></pre><p>因此，在选择用上面两种方法中的哪一种方法的时候，需要根据你写的函数的意义。</p><p>（1）如果你写的函数表示的是对象特有的特性，比如学生的年龄函数，用第一种方法，实例化对象再调用函数，更好。<br>（2）如果你写的函数表示的是这个类的所有对象共享的特性，比如所有学生的平均年龄函数，用第二种方法，将该函数声明成静态函数，更好。<br>       当然用哪种方法都可以，只是说用对场景更好。</p><hr><p>解决方法2：内联函数</p><p>内联的目的就是在编译期让编译器把使用函数的地方直接替换掉，而不是像普通函数一样通过链接器把地址链接上。这种情况，如果定义没有在头文件的话，编译器是无法进行函数替换的。所以C++规定，内联函数可以在程序中定义多次，只要内联函数定义在同一个cpp中只出现一次就行。</p><p>来源于：<a href="https://jiadebin.github.io/2017/04/03/%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%BC%95%E5%8F%91%E7%9A%84multiple-definition/">https://jiadebin.github.io/2017/04/03/%E5%A4%B4%E6%96%87%E4%BB%B6%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%BC%95%E5%8F%91%E7%9A%84multiple-definition/</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udpthread.h</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) |  ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |  ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在外就可以随意用BLEndianUint32了。</p><hr><p>解决方法3：extern基础函数？</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udpthread.h</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">BLEndianUint16</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>;</span><br><span class="line"><span class="comment">// mainwindow.cpp </span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">BLEndianUint16</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mainwindow.cpp </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BLEndianUint32</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((value &amp; <span class="number">0x000000FF</span>) &lt;&lt; <span class="number">24</span>) | ((value &amp; <span class="number">0x0000FF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">           ((value &amp; <span class="number">0x00FF0000</span>) &gt;&gt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF000000</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BLEndianUint16</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((value &amp; <span class="number">0x00FF</span>) &lt;&lt; <span class="number">8</span>) | ((value &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一次项目遇到的不同文件共享函数的使用问题，算是一个较为基础的问题，在此记录一下。</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>算法总结-图</title>
    <link href="https://tsuiwade.github.io/2022/06/30/blog47-algorithms/"/>
    <id>https://tsuiwade.github.io/2022/06/30/blog47-algorithms/</id>
    <published>2022-06-30T14:58:53.000Z</published>
    <updated>2022-06-30T14:58:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h4><p>「Kruskal 算法」是求解「加权无向图」的「最小生成树」的一种算法。</p><ol><li>所有边从小到大排序</li><li>依次加入最小生成树中，形成环则跳过</li><li>知道选择N-1条边为止</li></ol><p>LC. 1584</p><p>三元组：stl的对类，用户定义结构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( x != fa[x] ) </span><br><span class="line">            fa[x] = find(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        fa[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostConnectPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dist = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(points[x][<span class="number">0</span>] - points[y][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[x][<span class="number">1</span>] - points[y][<span class="number">1</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        fa.resize(n);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++ ) &#123;</span><br><span class="line">                edges.push_back(<span class="built_in">make_pair</span>(dist(i,j), <span class="built_in">make_pair</span>(i, j)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(edges.begin(), edges.end(), [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// sort(edges.begin(), edges.end()); 也可以</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; [len, <span class="built_in">pair</span>] : edges ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (find(<span class="built_in">pair</span>.first) != find(<span class="built_in">pair</span>.second)) &#123;</span><br><span class="line">                ans += len;</span><br><span class="line">                unify(<span class="built_in">pair</span>.first, <span class="built_in">pair</span>.second);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>三元组写成用户定义</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( x != fa[x] ) </span><br><span class="line">            fa[x] = find(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        fa[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="comment">// 注意此处</span></span><br><span class="line">        <span class="keyword">int</span> len, x, y;</span><br><span class="line">        Edge(<span class="keyword">int</span> len, <span class="keyword">int</span> x, <span class="keyword">int</span> y) : len(len), x(x), y(y) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostConnectPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> dist = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(points[x][<span class="number">0</span>] - points[y][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[x][<span class="number">1</span>] - points[y][<span class="number">1</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        fa.resize(n);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            fa[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// vector&lt;pair&lt;int, pair&lt;int, int&gt;&gt;&gt; edges;</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++ ) &#123;</span><br><span class="line">                <span class="comment">// edges.push_back(make_pair(dist(i,j), make_pair(i, j)));</span></span><br><span class="line">                edges.emplace_back(dist(i, j), i, j);  <span class="comment">// 注意此处</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(edges.begin(), edges.end(), [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; b)&#123; </span><br><span class="line">            <span class="keyword">return</span> a.len &lt; b.len;  <span class="comment">// 注意此处</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; [len, x, y] : edges ) &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; len &lt;&lt; &quot; &quot; &lt;&lt; pair.first &lt;&lt; &quot; &quot; &lt;&lt; pair.second &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (find(x) != find(y)) &#123;</span><br><span class="line">                ans += len;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">if</span> ( num == n ) <span class="keyword">break</span>;</span><br><span class="line">                unify(x, y);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并查集写成一个类</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    UnionFind (<span class="keyword">int</span> n) &#123;</span><br><span class="line">        fa.resize(n);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( x != fa[x] ) </span><br><span class="line">            fa[x] = find(fa[x]);</span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        fa[find(x)] = find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostConnectPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dist = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(points[x][<span class="number">0</span>] - points[y][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[x][<span class="number">1</span>] - points[y][<span class="number">1</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        <span class="function">UnionFind <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; edges;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++ ) &#123;</span><br><span class="line">                edges.push_back(<span class="built_in">make_pair</span>(dist(i,j), <span class="built_in">make_pair</span>(i, j)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(edges.begin(), edges.end(), [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; a, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; b)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; [len, <span class="built_in">pair</span>] : edges ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (uf.find(<span class="built_in">pair</span>.first) != uf.find(<span class="built_in">pair</span>.second)) &#123;</span><br><span class="line">                ans += len;</span><br><span class="line">                <span class="keyword">if</span> ( ++num == n ) <span class="keyword">break</span>;</span><br><span class="line">                uf.unify(<span class="built_in">pair</span>.first, <span class="built_in">pair</span>.second);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n2 log(n))，其中 n 是节点数。一般Kruskal 是O(mlogm) 的算法，但本题中m=n2</p><p>空间复杂度：O(n^2)，其中 n是节点数。并查集使用 O(n)的空间，边集数组需要使用 O(n^2) 的空间。</p><hr><h4 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h4><p>在「Kruskal 算法」中，我们通过增加边数来扩大「最小生成树」；适用于稀疏图</p><p>在「Prim 算法」中，我们通过增加顶点来扩大「最小生成树」。适用于稠密图</p><p>「切分定理」指的是：在一幅连通加权无向图中，给定任意的切分，如果有一条横切边的权值严格小于所有其他横切边，则这条边必然属于图的最小生成树中的一条边。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minCostConnectPoints</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dist = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(points[x][<span class="number">0</span>] - points[y][<span class="number">0</span>]) + <span class="built_in">abs</span>(points[x][<span class="number">1</span>] - points[y][<span class="number">1</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> n = points.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mindist</span><span class="params">(n, <span class="number">0</span>)</span></span>; <span class="comment">// 生成树 到 各点的最短距离</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            mindist[i] = dist(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        mindist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n<span class="number">-1</span>; k++) <span class="comment">// n-1次</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> minn = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[i] &amp;&amp; minn &gt; mindist[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    minn = mindist[i]; <span class="comment">// 找最小值</span></span><br><span class="line">                    pos = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cost += minn;</span><br><span class="line">            visited[pos] = <span class="literal">true</span>;</span><br><span class="line">            mindist[pos] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[i] &amp;&amp; dist(pos, i) &lt; mindist[i])</span><br><span class="line">                    mindist[i] = dist(pos, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Dijkstra-算法-ˈdeɪkstra"><a href="#Dijkstra-算法-ˈdeɪkstra" class="headerlink" title="Dijkstra 算法/ˈdɛɪkstra/."></a>Dijkstra 算法/ˈdɛɪkstra/.</h4><p>「Dijkstra 算法」解决的是加权有向图「单源最短路径」问题，其中该图的所有权重必须为非负数。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220629155416728.png" alt="image-20220629155416728"></p><p>LC 743 网络延迟时间</p><p>将所有节点分成两类：已确定从起点到当前点的最短路长度的节点，以及未确定从起点到当前点的最短路长度的节点（下面简称「未确定节点」和「已确定节点」）。</p><p>每次从「未确定节点」中取一个与起点距离最短的点，将它归类为「已确定节点」，并用它「更新」从起点到其他所有「未确定节点」的距离。直到所有点都被归类为「已确定节点」。</p><p>用节点 AA「更新」节点 BB 的意思是，用起点到节点 AA 的最短路长度加上从节点 AA 到节点 BB 的边的长度，去比较起点到节点 BB 的最短路长度，如果前者小于后者，就用前者更新后者。这种操作也被叫做「松弛」。</p><p>这里暗含的信息是：每次选择「未确定节点」时，起点到它的最短路径的长度可以被确定。</p><p>可以这样理解，因为我们已经用了每一个「已确定节点」更新过了当前节点，无需再次更新（因为一个点不能多次到达）。而当前节点已经是所有「未确定节点」中与起点距离最短的点，不可能被其它「未确定节点」更新。所以当前节点可以被归类为「已确定节点」。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> inf = INT_MAX / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dist(n , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n , inf));</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; t : times ) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = t[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> y = t[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            dist[x][y] = t[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mindist</span><span class="params">(n, inf)</span></span>;</span><br><span class="line">        mindist[k - <span class="number">1</span>] = <span class="number">0</span>;  <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">visited</span><span class="params">(n, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> num = <span class="number">0</span>; num &lt; n; num++ ) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> minn = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> ( !visited[i] &amp;&amp; ( minn &gt; mindist[i] ) ) &#123;  <span class="comment">// 找最小值</span></span><br><span class="line">                    minn = mindist[i];</span><br><span class="line">                    pos = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[pos] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">                mindist[i] = min(mindist[i], mindist[pos] + dist[pos][i] );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = *max_element(mindist.begin(), mindist.end());</span><br><span class="line">        <span class="keyword">return</span> ans == inf ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><h4 id="FLOYD"><a href="#FLOYD" class="headerlink" title="FLOYD"></a>FLOYD</h4><p>复杂度为O(n3 ) 的「多源汇最短路」算法 Floyd 算法进行求解，同时使用「邻接矩阵」来进行存图，可以得到「从任意起点出发，到达任意点。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220630140435434.png" alt="image-20220630140435434"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220630141653680.png" alt="image-20220630141653680"></p><p>A1,0 = 6，path 1,0 = 3; path 3,0 = 2; path 2,0 = -1 直接相连 </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">printPath</span> <span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> path[][max])</span> </span>&#123; <span class="comment">// i = 1, j = 0 </span></span><br><span class="line">    <span class="keyword">if</span> ( path[i][j] == <span class="number">-1</span> ) &#123; <span class="comment">/*直接输出*/</span> &#125;;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> v = path[i][j]; <span class="comment">// path[1][0] = 3</span></span><br><span class="line">        printPath(i, mid, path);  <span class="comment">// path[1][3]</span></span><br><span class="line">        printPath(mid, j, path);  <span class="comment">// path[3][0]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外循环v为中间变量，Av，Pathv修改为v;内循环i，j ≠ v</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; v++ ) </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) </span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++ ) </span><br><span class="line">            <span class="keyword">if</span> ( A[i][j] &gt; A[i][v] + A[v][j] ) &#123;</span><br><span class="line">                A[i][j] = A[i][v] + A[v][j];</span><br><span class="line">                path[i][j] = v;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></h2><h4 id="Bellman-Ford-算法（单源最短路径）"><a href="#Bellman-Ford-算法（单源最短路径）" class="headerlink" title="Bellman-Ford 算法（单源最短路径）"></a>Bellman-Ford 算法（单源最短路径）</h4><p>「Bellman-Ford 算法」虽然不能检测到「负权环图」的最短路径，但是它能检测到「图」中是否存在「负权环」。</p><p><strong>定理一：在一个有 N 个顶点的「非负权环图」中，两点之间的最短路径最多经过 N-1 条边。</strong></p><p><strong>定理二：「负权环」没有最短路径。</strong>环上 边权 为正为负，正权环图有最短距离。</p><p>DJ算法关注的是点，B-F算法关注的是边，动态规划</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220630175905930.png" alt="image-20220630175905930"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220630151237279.png" alt="image-20220630151237279"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220630151906670.png" alt="image-20220630151906670"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LC 743</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">networkDelayTime</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; times, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; dist(n); <span class="comment">// 存图方式</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; t : times ) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = t[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> y = t[<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            dist[x].push_back( <span class="built_in">make_pair</span>(y, t[<span class="number">2</span>]) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mindist</span><span class="params">(n, INT_MAX)</span></span>; <span class="comment">// |V| - 1 次</span></span><br><span class="line">        mindist[k - <span class="number">1</span>] = <span class="number">0</span>;  <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">bool</span> finished;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n - <span class="number">1</span>; k++ ) &#123;<span class="comment">// n - 1 次</span></span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++ ) &#123; <span class="comment">// 前一节点</span></span><br><span class="line">                <span class="keyword">if</span> ( mindist[u] == INT_MAX ) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; [ v, weight ] : dist[u] ) &#123;</span><br><span class="line">                    <span class="keyword">long</span> newV = mindist[u] + weight;</span><br><span class="line">                    <span class="keyword">if</span> ( newV &lt; mindist[v] ) &#123;</span><br><span class="line">                        mindist[v] = newV;</span><br><span class="line">                        finished = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( finished ) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = *max_element(mindist.begin(), mindist.end());</span><br><span class="line">        <span class="keyword">return</span> ans == INT_MAX ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; dist(n); <span class="comment">// 存图方式</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; t : flights ) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = t[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = t[<span class="number">1</span>];</span><br><span class="line">            dist[x].push_back( <span class="built_in">make_pair</span>(y, t[<span class="number">2</span>]) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mindist</span><span class="params">(n, INT_MAX)</span></span>; <span class="comment">// |V| - 1 次</span></span><br><span class="line">        mindist[src] = <span class="number">0</span>;  <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> kk = <span class="number">0</span>; kk &lt; k + <span class="number">1</span>; kk++ ) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">newdist</span><span class="params">(mindist)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++ ) &#123; <span class="comment">// 前一节点</span></span><br><span class="line">                <span class="keyword">if</span> ( mindist[u] == INT_MAX ) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; [ v, weight ] : dist[u] ) &#123;</span><br><span class="line">                    <span class="keyword">long</span> newV = mindist[u] + weight;</span><br><span class="line">                    <span class="keyword">if</span> ( newV &lt; newdist[v] ) &#123;</span><br><span class="line">                        newdist[v] = newV;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mindist.assign(newdist.begin(), newdist.end());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mindist[dst] == INT_MAX ? <span class="number">-1</span> : mindist[dst];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="基于「队列」优化的-Bellman-Ford-算法-—-SPFA-算法-Shortest-Path-Faster-Algorithm"><a href="#基于「队列」优化的-Bellman-Ford-算法-—-SPFA-算法-Shortest-Path-Faster-Algorithm" class="headerlink" title="基于「队列」优化的 Bellman-Ford 算法 — SPFA 算法  Shortest Path Faster Algorithm"></a>基于「队列」优化的 Bellman-Ford 算法 — SPFA 算法  Shortest Path Faster Algorithm</h3><p>「SPFA 算法」主要是通过「队列」来维护我们接下来要遍历边的起点，而不是「Bellman Ford」算法中的任意还没有遍历过的边。每次只有当某个顶点的最短距离更新之后，并且该顶点不在「队列」中，我们就将该顶点加入到「队列」中。一直循环以上步骤，直到「队列」为空，我们就可以终止算法。此时，我们就可以得到「图」中其他顶点到给定顶点的最短距离了。</p>]]></content>
    
    
    <summary type="html">总结了图的各种常见算法</summary>
    
    
    
    <category term="算法" scheme="https://tsuiwade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://tsuiwade.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>qt曲线图</title>
    <link href="https://tsuiwade.github.io/2022/04/08/blog46-myQChart/"/>
    <id>https://tsuiwade.github.io/2022/04/08/blog46-myQChart/</id>
    <published>2022-04-08T20:00:38.000Z</published>
    <updated>2022-04-08T20:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了做一个调节控制轴的上位机软件。</p><p>主要用到了QT chart， 并且大量学习内置的<code>example</code>，主要包括 QLineSeries、QSplineSeries，一个样条曲线和一个折线。</p><p>其中白色显示最为重要的RMS曲线，与黑色背景形成最鲜明对比。</p><p>还有一个QAreaSeries为了显示两个意义相同的位置信息（实际位置和设定位置），以亮蓝线表示实际位置，暗蓝色表示设定位置，中间的透明蓝表示两线围成的区域。</p><p>还有一个QStackedBarSeries，折叠柱状图，我的想法是设计红色为正误差，绿色为负误差，类似于股票的涨跌，其中柱状图包络线为实际值，并且整图来看，由于误差的累计在pid中是有所含义的，红绿色面积大小比较显眼。</p><p>还设置了多y轴，个人认为这是我设计最全的一个图了：各个颜色和图类分别表示不同的含义，我本想将左侧的红绿色y轴合二为一，但不太会且有bug，故放弃。</p><p>在图中还有点击图例的交互：实现图例闪烁和曲线现隐。</p><p>以及鼠标hover在scatter点上的显示反应。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220408194524894.png" alt="image-20220627204728330"></p><p>接下来还需要做协议的解析、动态调整y轴的范围、计算error值。计算rms值。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220627223625218.png" alt="image-20220627223625218"></p><p>最终经过调试完善项目界面如上图所示。</p><p>还添加了双轴双图显示、关掉界面再打开的文本框数据缓存功能、文本框重要数据的实时显示、qt chart的每隔一段时间更新画图、保存为csv文件的保存功能、status状态栏的qt组件控制、拖动条设置图像更新频率等功能。</p><p>源码已上传至github上。</p><hr><p>该代码前期耗费两周研究qt chart的诸多显示效果，结合项目实际意义设计最佳画图方案。后期结合望远镜实时数据，添加诸多功能。</p><hr><p>2022/6/27 还花时间修复了这半年来blog的一些问题。</p>]]></content>
    
    
    <summary type="html">使用了qt自带的qchart库实现一个多形态的曲线图，更好区分地进行调试，源码见仓库。</summary>
    
    
    
    <category term="qt" scheme="https://tsuiwade.github.io/categories/qt/"/>
    
    
    <category term="qt" scheme="https://tsuiwade.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>研究一下星表</title>
    <link href="https://tsuiwade.github.io/2022/03/18/blog45-starCatalog/"/>
    <id>https://tsuiwade.github.io/2022/03/18/blog45-starCatalog/</id>
    <published>2022-03-18T17:24:41.000Z</published>
    <updated>2022-03-18T17:24:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://baike.baidu.com/item/欧洲空间局/8769487">欧洲空间局</a>（ESA）在1989年8月8日成功地发射了依巴谷<a href="https://baike.baidu.com/item/天体测量卫星/15568941">天体测量卫星</a>，<a href="https://baike.baidu.com/item/依巴谷星表">依巴谷星表</a>和第谷星表是<a href="https://baike.baidu.com/item/依巴谷卫星/6240692">依巴谷卫星</a>的主要观测结果，依巴谷星表测定了约12万颗恒星，构成了均匀的<a href="https://baike.baidu.com/item/天球参考系/1453747">天球参考系</a>，极限星等达到13mag，其位置、自行与<a href="https://baike.baidu.com/item/视差">视差</a>的精度分别为±0.002″、±0.002″/yr、±0.002″。1997年在日本京都召开的IAU第23届大会给出了由212颗<a href="https://baike.baidu.com/item/河外致密射电源/9210040">河外致密射电源</a>构成的<a href="https://baike.baidu.com/item/国际天球参考系/15581252">国际天球参考系</a>（ICRS），决定由依巴谷星表取代已沿用10多年的FK5星表，成为ICRS在光学波段的实现，并将改进后的依巴谷框架称为依巴谷天球参考框架（HCRF）。</p><p>古希腊天文学家依巴谷以精确的天体测量著名于世，他发现了岁差，将三角学应用于天文学，首先提出了星等的概念并被后世进一步发展完善，被尊称为“方位天文学之父”。欧空局的依巴谷计划的英文缩写与依巴谷的名字非常相似，也正好纪念了这位天文学伟人。这项计划分为“依巴谷实验”和“第谷实验”两部分。前者最终测得118218颗恒星的高精度数据；后者测得数百万颗恒星的低精度数据。</p><h2 id="常用目视星表"><a href="#常用目视星表" class="headerlink" title="常用目视星表"></a>常用目视星表</h2><p>在实际应用中常用的目视星表中有：</p><p>（1）《<a href="https://baike.baidu.com/item/依巴谷星表">依巴谷星表</a>》（Hipparcos catalogue），简称HIP或HP</p><p>欧洲空间局（简称ESA）依巴谷<a href="https://baike.baidu.com/item/天体测量卫星/15568941">天体测量卫星</a>（Hipparcos）计划的主要成果。1997年发表的第2版，是位置精确度最高的科学数据，包括的恒星总数为120313个，极限星等为13等，精确度在千分之一弧秒，而第谷星表 列出的则略微超过1,050,000颗恒星。包括赤道坐标，自行，星等，光谱型、颜色、光谱型、视差、径向速度等信息。</p><p>（2）HD星表（Henry Draper Catalogue）或 耶鲁亮星星表编号HD。亨利·德雷伯星表（HD/HDE）</p><p>HD星表给出88 883颗恒星的2000年历元位置、星等、自行、光谱型等数据，是最传统的星表之一。耶鲁亮星星表包括25万颗全部 8等以上的恒星和很多暗达11等的恒星的著名星表。HD序号在没有拜耳字母或佛氏星数的恒星中被普遍的采用，在原始的HD星表中序号从1～225,300是依1900.0分点的赤经，从225,301～359,083是在1949年出版的亨利·德雷珀扩充星表中增加的，仍然使用HD表示。</p><p>（4）<a href="https://baike.baidu.com/item/SAO星表/6485132">SAO星表</a>（Smithsonian Astrophysical Observatory ，1966）史密松星表</p><p>SAO星表是天文观测最常用的星表，它给出了258 997颗星等亮于11m的恒星，有编号、自行值、光谱型、V星等，表内列有与HD星表和BD（DM）星表的交叉证认序号。</p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321111520189.png" alt="image-20220321111520189"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321121232624.png" alt="image-20220321121232624"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321121314466.png" alt="image-20220321121314466"></p><p>能得到数据 也不知道怎么计算。。。</p><p>就用Stellarium里的数据吧</p>]]></content>
    
    
    <summary type="html">本文来研究一下依巴谷星表</summary>
    
    
    
    <category term="星表" scheme="https://tsuiwade.github.io/categories/%E6%98%9F%E8%A1%A8/"/>
    
    
    <category term="星表" scheme="https://tsuiwade.github.io/tags/%E6%98%9F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>编译Stellarium过程</title>
    <link href="https://tsuiwade.github.io/2022/03/15/blog44-buildStellarium/"/>
    <id>https://tsuiwade.github.io/2022/03/15/blog44-buildStellarium/</id>
    <published>2022-03-15T23:26:54.000Z</published>
    <updated>2022-03-15T23:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p>首先下载qt，我这里使用的是qt5.14.2，下载挺快的。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316082552203.png" alt="image-20220316082852120"></p><p>We recommend to use Qt 5.12 or later. You must select Qt Script and msvc2017/msvc2019 among so many checkboxes.</p><p>Add <code>C:\Qt\Qt5.15.12</code> to your <code>PATH</code> variable - you should add string <code>C:\Qt\Qt5.15.12\msvc2019;C:\Qt\Qt5.15.12\msvc2019\bin</code> for 32-bit or <code>C:\Qt\Qt5.15.12\msvc2019_64;C:\Qt\Qt5.15.12\msvc2019_64\bin</code> for 64-bit to <code>PATH</code> variable. (Replace the version numbers of Qt and the version of Visual Studio (2017/2019) with the version that you have installed)</p><p><a href="https://github.com/Stellarium/stellarium/blob/master/BUILDING.md">https://github.com/Stellarium/stellarium/blob/master/BUILDING.md</a></p><p>接着下载github上stellarium的源码。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316082946891.png" alt="image-20220316082946891"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316084705332.png" alt="image-20220316084705332"></p><p>接着下载cmake </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316083021304.png" alt="image-20220316083021304"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316085856109.png" alt="image-20220316085856109"></p><p>接着将stellarium文件中的CMakeLists.txt拖进qt creator中，将自动能展开，但出现一些问题</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220315234126876.png" alt="image-20220315234126876"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316085005174.png" alt="image-20220316085005174"></p><p>然后稍微改改字符，就可以运行了。</p><p>对代码的修改如下：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img//img/image-20220316111236063.png" alt="image-20220316111236063"></p>]]></content>
    
    
    <summary type="html">由于莫名的原因，Stellarium编译运行出问题了，于是我重新进行进行配置，在此进行记录。</summary>
    
    
    
    <category term="Stellarium" scheme="https://tsuiwade.github.io/categories/Stellarium/"/>
    
    
    <category term="Stellarium" scheme="https://tsuiwade.github.io/tags/Stellarium/"/>
    
  </entry>
  
  <entry>
    <title>Zone Model</title>
    <link href="https://tsuiwade.github.io/2022/03/09/blog43-zoneModel/"/>
    <id>https://tsuiwade.github.io/2022/03/09/blog43-zoneModel/</id>
    <published>2022-03-09T16:40:27.000Z</published>
    <updated>2022-03-09T16:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220309194832300.png" alt="image-20220309194832300"></p><p>icosahedron</p><p>正二十面体 <a href="https://baike.baidu.com/item/%E6%AD%A3%E4%BA%8C%E5%8D%81%E9%9D%A2%E4%BD%93/1921640">https://baike.baidu.com/item/%E6%AD%A3%E4%BA%8C%E5%8D%81%E9%9D%A2%E4%BD%93/1921640</a></p><p>正二十面体(Regular icosahedron [2] ) 是由20个等边三角形所组成的<a href="https://baike.baidu.com/item/正多面体">正多面体</a>，共有12个顶点，30条棱，20个面。为五个<a href="https://baike.baidu.com/item/柏拉图多面体/2769757">柏拉图多面体</a>之一。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220309164132823.png" alt="image-20220309164132823"></p><p> sqrt(50-10*sqrt(5))/10 = 0.5257</p><p>sqrt(50+10*sqrt(5))/10 = 0.8507</p><hr><p>画图十分精美</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321102438566.png" alt="image-20220321102438566"></p><p><a href="https://www.redblobgames.com/x/1842-delaunay-voronoi-sphere/">https://www.redblobgames.com/x/1842-delaunay-voronoi-sphere/</a></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321101619465.png" alt="image-20220321101619465"></p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220309171100201.png" alt="image-20220309171100201"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% plot_triangle.m</span></span><br><span class="line">clear all; close all;</span><br><span class="line">m = <span class="built_in">sqrt</span>(<span class="number">50</span><span class="number">-10</span>*<span class="built_in">sqrt</span>(<span class="number">5</span>))/<span class="number">10</span>;</span><br><span class="line">n = <span class="built_in">sqrt</span>(<span class="number">50</span>+<span class="number">10</span>*<span class="built_in">sqrt</span>(<span class="number">5</span>))/<span class="number">10</span>;</span><br><span class="line">A = [</span><br><span class="line">    n,-m,<span class="number">0</span>;</span><br><span class="line">    n,m,<span class="number">0</span>;</span><br><span class="line">    -n,m,<span class="number">0</span>;</span><br><span class="line">    -n,-m,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,n,-m;</span><br><span class="line">    <span class="number">0</span>,n,m;</span><br><span class="line">    <span class="number">0</span>,-n,m;</span><br><span class="line">    <span class="number">0</span>,-n,-m;</span><br><span class="line">    -m,<span class="number">0</span>,n;</span><br><span class="line">    m,<span class="number">0</span>,n;</span><br><span class="line">    m,<span class="number">0</span>,-n;</span><br><span class="line">    -m,<span class="number">0</span>,-n;</span><br><span class="line">    ];</span><br><span class="line"><span class="built_in">scatter3</span>(A(:,<span class="number">1</span>),A(:,<span class="number">2</span>),A(:,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">center=[];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">0</span>,<span class="number">9</span>,<span class="number">6</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">0</span>,<span class="number">7</span>,<span class="number">10</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">11</span>,<span class="number">10</span>,<span class="number">7</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">7</span>,<span class="number">3</span>,<span class="number">11</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">3</span>,<span class="number">2</span>,<span class="number">11</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">10</span>,<span class="number">11</span>,<span class="number">4</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">2</span>,<span class="number">4</span>,<span class="number">11</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">4</span>,<span class="number">1</span>,<span class="number">10</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">center = [center;plot_triangle(A,<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>)];</span><br><span class="line">center = [center;plot_triangle(A,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>)];</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">text(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line"></span><br><span class="line">axis equal;</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plot_triangle</span><span class="params">(A,d1,d2,d3)</span></span></span><br><span class="line">d1 = d1 + <span class="number">1</span>;</span><br><span class="line">d2 = d2 + <span class="number">1</span>;</span><br><span class="line">d3 = d3 + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">line([A(d1,<span class="number">1</span>),A(d2,<span class="number">1</span>),A(d3,<span class="number">1</span>),A(d1,<span class="number">1</span>)],[A(d1,<span class="number">2</span>),A(d2,<span class="number">2</span>),A(d3,<span class="number">2</span>),A(d1,<span class="number">2</span>)],[A(d1,<span class="number">3</span>),A(d2,<span class="number">3</span>),A(d3,<span class="number">3</span>),A(d1,<span class="number">3</span>)]);</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220309194211980.png" alt="image-20220309194211980"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220312234651019.png" alt="image-20220312234651019"></p><hr><p>进入源码进行查看</p><p>StelGeodesicGrid::StelGeodesicGrid（StelGeodesicGrid.cpp） 被调用1次 调用20次<br>        StelGeodesicGrid::initTriangle（StelGeodesicGrid.cpp）被调用20次 c0/c1/c2为20个面的3个点，函数内的循环没进</p><p>下面6个点为 c0/c1/c2/e0/e1/e2</p><p>1 [0.850651, 0.525731, 0] [0.850651, -0.525731, 0] [0.525731, 0, -0.850651] [0.809017, -0.309017, -0.5] [0.809017, 0.309017, -0.5] [1, 0, 0]</p><p>2 [0.850651, -0.525731, 0] [0.850651, 0.525731, 0] [0.525731, 0, 0.850651] [0.809017, 0.309017, 0.5] [0.809017, -0.309017, 0.5] [1, 0, 0]</p><p>3 [0.850651, -0.525731, 0] [0.525731, 0, 0.850651] [0, -0.850651, 0.525731] [0.309017, -0.5, 0.809017] [0.5, -0.809017, 0.309017] [0.809017, -0.309017, 0.5]</p><p>4 [0.525731, 0, 0.850651] [-0.525731, 0, 0.850651] [0, -0.850651, 0.525731] [-0.309017, -0.5, 0.809017] [0.309017, -0.5, 0.809017] [0, 0, 1]</p><p>5 [0.850651, -0.525731, 0] [0, -0.850651, -0.525731] [0.525731, 0, -0.850651] [0.309017, -0.5, -0.809017] [0.809017, -0.309017, -0.5] [0.5, -0.809017, -0.309017]</p><p>6 [0, -0.850651, 0.525731] [0, -0.850651, -0.525731] [0.850651, -0.525731, 0] [0.5, -0.809017, -0.309017] [0.5, -0.809017, 0.309017] [0, -1, 0]</p><p>7 [0, -0.850651, -0.525731] [0, -0.850651, 0.525731] [-0.850651, -0.525731, 0] [-0.5, -0.809017, 0.309017] [-0.5, -0.809017, -0.309017] [0, -1, 0]</p><p>8 [0, -0.850651, 0.525731] [-0.525731, 0, 0.850651] [-0.850651, -0.525731, 0] [-0.809017, -0.309017, 0.5] [-0.5, -0.809017, 0.309017] [-0.309017, -0.5, 0.809017]</p><p>9 [-0.525731, 0, -0.850651] [0.525731, 0, -0.850651] [0, -0.850651, -0.525731] [0.309017, -0.5, -0.809017] [-0.309017, -0.5, -0.809017] [0, 0, -1]</p><p>10 [0, -0.850651, -0.525731] [-0.850651, -0.525731, 0] [-0.525731, 0, -0.850651] [-0.809017, -0.309017, -0.5] [-0.309017, -0.5, -0.809017] [-0.5, -0.809017, -0.309017]</p><p>11 [-0.850651, -0.525731, 0] [-0.850651, 0.525731, 0] [-0.525731, 0, -0.850651] [-0.809017, 0.309017, -0.5] [-0.809017, -0.309017, -0.5] [-1, 0, 0]</p><p>12 [-0.850651, 0.525731, 0] [-0.850651, -0.525731, 0] [-0.525731, 0, 0.850651] [-0.809017, -0.309017, 0.5] [-0.809017, 0.309017, 0.5] [-1, 0, 0]</p><p>13 [0.525731, 0, -0.850651] [-0.525731, 0, -0.850651] [0, 0.850651, -0.525731] [-0.309017, 0.5, -0.809017] [0.309017, 0.5, -0.809017] [0, 0, -1]</p><p>14 [-0.850651, 0.525731, 0] [0, 0.850651, -0.525731] [-0.525731, 0, -0.850651] [-0.309017, 0.5, -0.809017] [-0.809017, 0.309017, -0.5] [-0.5, 0.809017, -0.309017]</p><p>15 [0, 0.850651, 0.525731] [0, 0.850651, -0.525731] [-0.850651, 0.525731, 0] [-0.5, 0.809017, -0.309017] [-0.5, 0.809017, 0.309017] [0, 1, 0]</p><p>16 [-0.850651, 0.525731, 0] [-0.525731, 0, 0.850651] [0, 0.850651, 0.525731] [-0.309017, 0.5, 0.809017] [-0.5, 0.809017, 0.309017] [-0.809017, 0.309017, 0.5]</p><p>17 [0, 0.850651, -0.525731] [0.850651, 0.525731, 0] [0.525731, 0, -0.850651] [0.809017, 0.309017, -0.5] [0.309017, 0.5, -0.809017] [0.5, 0.809017, -0.309017]</p><p>18 [0, 0.850651, -0.525731] [0, 0.850651, 0.525731] [0.850651, 0.525731, 0] [0.5, 0.809017, 0.309017] [0.5, 0.809017, -0.309017] [0, 1, 0]</p><p>19 [0, 0.850651, 0.525731] [0.525731, 0, 0.850651] [0.850651, 0.525731, 0] [0.809017, 0.309017, 0.5] [0.5, 0.809017, 0.309017] [0.309017, 0.5, 0.809017]</p><p>20 [-0.525731, 0, 0.850651] [0.525731, 0, 0.850651] [0, 0.850651, 0.525731] [0.309017, 0.5, 0.809017] [-0.309017, 0.5, 0.809017] [0, 0, 1]</p><hr><p>然后才进入了下面的程序</p><p>StarMgr::init()<br>        StelGeodesicGrid::visitTriangles 被调用1次 调用20次函数<br>                StelGeodesicGrid::visitTriangles 被调用20次 再每次调用自身4次函数<br>                        (*func)(lev, index, c0, c1, c2, context);<br>                        initTriangleFunc （StarMgr.hpp）<br>                                StarMgr::initTriangle 被调用1次<br>                                        ZoneArray::initTriangle </p><p>​        </p><p>需要注意调用了100次的 StelGeodesicGrid::visitTriangles 中的 Triangle &amp;t(triangles [ lev ] [ index ] );</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triangle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Vec3f e0,e1,e2;   <span class="comment">// Seitenmittelpunkte</span></span><br><span class="line">&#125;;</span><br><span class="line">Triangle **triangles;</span><br></pre></td></tr></table></figure><p>triangles变量在StelGeodesicGrid::initTriangle中已经定义过</p><p>checkAndLoadCatal  visitTriangles  1</p><p> 1  z-&gt;center [0.934172, 0, -0.356822] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [0.356822, 0, 0.934172] star_position_scale 0.763932 c0 [0.850651, 0.525731, 0] c1 [0.850651, -0.525731, 0] c2 [0.525731, 0, -0.850651]</p><p> 2  z-&gt;center [0.939124, 0.294748, -0.176549] z-&gt;axis0 [-0.299452, 0.954111, 0]  z-&gt;axis1 [0.168448, 0.052868, 0.984292] star_position_scale 0.361541 c0 [0.850651, 0.525731, 0] c1 [1, 0, 0] c2 [0.809017, 0.309017, -0.5]</p><p> 3  z-&gt;center [0.939124, -0.294748, -0.176549] z-&gt;axis0 [0.299452, 0.954111, 0]  z-&gt;axis1 [0.168448, -0.052868, 0.984292] star_position_scale 0.361541 c0 [1, 0, 0] c1 [0.850651, -0.525731, 0] c2 [0.809017, -0.309017, -0.5]</p><p> 4  z-&gt;center [0.75696, 0, -0.653462] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [0.653462, 0, 0.75696] star_position_scale 0.361541 c0 [0.809017, 0.309017, -0.5] c1 [0.809017, -0.309017, -0.5] c2 [0.525731, 0, -0.850651]</p><p> 5  z-&gt;center [0.934172, 0, -0.356822] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [0.356822, 0, 0.934172] star_position_scale 0.381966 c0 [0.809017, -0.309017, -0.5] c1 [0.809017, 0.309017, -0.5] c2 [1, 0, 0]</p><p>checkAndLoadCatal  visitTriangles  2</p><p> 6  z-&gt;center [0.934172, 0, 0.356822] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [-0.356822, 0, 0.934172] star_position_scale 0.763932 c0 [0.850651, -0.525731, 0] c1 [0.850651, 0.525731, 0] c2 [0.525731, 0, 0.850651]</p><p> 7  z-&gt;center [0.939124, -0.294748, 0.176549] z-&gt;axis0 [0.299452, 0.954111, 0]  z-&gt;axis1 [-0.168448, 0.052868, 0.984292] star_position_scale 0.381966 c0 [0.850651, -0.525731, 0] c1 [1, 0, 0] c2 [0.809017, -0.309017, 0.5]</p><p> 8  z-&gt;center [0.939124, 0.294748, 0.176549] z-&gt;axis0 [-0.299452, 0.954111, 0]  z-&gt;axis1 [-0.168448, -0.052868, 0.984292] star_position_scale 0.381966 c0 [1, 0, 0] c1 [0.850651, 0.525731, 0] c2 [0.809017, 0.309017, 0.5]</p><p> 9  z-&gt;center [0.75696, 0, 0.653462] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [-0.653462, 0, 0.75696] star_position_scale 0.381966 c0 [0.809017, -0.309017, 0.5] c1 [0.809017, 0.309017, 0.5] c2 [0.525731, 0, 0.850651]</p><p> 10  z-&gt;center [0.934172, 0, 0.356822] z-&gt;axis0 [0, 1, 0]  z-&gt;axis1 [-0.356822, 0, 0.934172] star_position_scale 0.381966 c0 [0.809017, 0.309017, 0.5] c1 [0.809017, -0.309017, 0.5] c2 [1, 0, 0]</p><p>checkAndLoadCatal  visitTriangles  3</p><p> 11  z-&gt;center [0.57735, -0.57735, 0.57735] z-&gt;axis0 [0.707107, 0.707107, 0]  z-&gt;axis1 [-0.408248, 0.408248, 0.816497] star_position_scale 0.763932 c0 [0.850651, -0.525731, 0] c1 [0.525731, 0, 0.850651] c2 [0, -0.850651, 0.525731]</p><p> 12  z-&gt;center [0.762575, -0.580411, 0.285662] z-&gt;axis0 [0.605648, 0.795733, 0]  z-&gt;axis1 [-0.227311, 0.173011, 0.95833] star_position_scale 0.381966 c0 [0.850651, -0.525731, 0] c1 [0.809017, -0.309017, 0.5] c2 [0.5, -0.809017, 0.309017]</p><p> 13  z-&gt;center [0.580411, -0.285662, 0.762575] z-&gt;axis0 [0.441587, 0.897219, 0]  z-&gt;axis1 [-0.684196, 0.336743, 0.6469] star_position_scale 0.381966 c0 [0.809017, -0.309017, 0.5] c1 [0.525731, 0, 0.850651] c2 [0.309017, -0.5, 0.809017]</p><p> 14  z-&gt;center [0.285662, -0.762575, 0.580411] z-&gt;axis0 [0.936452, 0.350797, 0]  z-&gt;axis1 [-0.203606, 0.543526, 0.814324] star_position_scale 0.381966 c0 [0.5, -0.809017, 0.309017] c1 [0.309017, -0.5, 0.809017] c2 [0, -0.850651, 0.525731]</p><p> 15  z-&gt;center [0.57735, -0.57735, 0.57735] z-&gt;axis0 [0.707107, 0.707107, 0]  z-&gt;axis1 [-0.408248, 0.408248, 0.816497] star_position_scale 0.381966 c0 [0.309017, -0.5, 0.809017] c1 [0.5, -0.809017, 0.309017] c2 [0.809017, -0.309017, 0.5]</p><p>checkAndLoadCatal  visitTriangles  4</p><p> 16  z-&gt;center [0, -0.356822, 0.934172] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, 0.934172, 0.356822] star_position_scale 0.763932 c0 [0.525731, 0, 0.850651] c1 [-0.525731, 0, 0.850651] c2 [0, -0.850651, 0.525731]</p><p> 17  z-&gt;center [0.294748, -0.176549, 0.939124] z-&gt;axis0 [0.513854, 0.857878, 0]  z-&gt;axis1 [-0.805654, 0.482573, 0.343578] star_position_scale 0.381966 c0 [0.525731, 0, 0.850651] c1 [0, 0, 1] c2 [0.309017, -0.5, 0.809017]</p><p> 18  z-&gt;center [-0.294748, -0.176549, 0.939124] z-&gt;axis0 [0.513854, -0.857878, 0]  z-&gt;axis1 [0.805654, 0.482573, 0.343578] star_position_scale 0.381966 c0 [0, 0, 1] c1 [-0.525731, 0, 0.850651] c2 [-0.309017, -0.5, 0.809017]</p><p> 19  z-&gt;center [0, -0.653462, 0.75696] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, 0.75696, 0.653462] star_position_scale 0.381966 c0 [0.309017, -0.5, 0.809017] c1 [-0.309017, -0.5, 0.809017] c2 [0, -0.850651, 0.525731]</p><p> 20  z-&gt;center [0, -0.356822, 0.934172] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, 0.934172, 0.356822] star_position_scale 0.381966 c0 [-0.309017, -0.5, 0.809017] c1 [0.309017, -0.5, 0.809017] c2 [0, 0, 1]</p><p>checkAndLoadCatal  visitTriangles  5</p><p> 21  z-&gt;center [0.57735, -0.57735, -0.57735] z-&gt;axis0 [0.707107, 0.707107, 0]  z-&gt;axis1 [0.408248, -0.408248, 0.816497] star_position_scale 0.763932 c0 [0.850651, -0.525731, 0] c1 [0, -0.850651, -0.525731] c2 [0.525731, 0, -0.850651]</p><p> 22  z-&gt;center [0.762575, -0.580411, -0.285662] z-&gt;axis0 [0.605648, 0.795733, 0]  z-&gt;axis1 [0.227311, -0.173011, 0.95833] star_position_scale 0.381966 c0 [0.850651, -0.525731, 0] c1 [0.5, -0.809017, -0.309017] c2 [0.809017, -0.309017, -0.5]</p><p> 23  z-&gt;center [0.285662, -0.762575, -0.580411] z-&gt;axis0 [0.936452, 0.350797, 0]  z-&gt;axis1 [0.203606, -0.543526, 0.814324] star_position_scale 0.381966 c0 [0.5, -0.809017, -0.309017] c1 [0, -0.850651, -0.525731] c2 [0.309017, -0.5, -0.809017]</p><p> 24  z-&gt;center [0.580411, -0.285662, -0.762575] z-&gt;axis0 [0.441587, 0.897219, 0]  z-&gt;axis1 [0.684196, -0.336743, 0.6469] star_position_scale 0.381966 c0 [0.809017, -0.309017, -0.5] c1 [0.309017, -0.5, -0.809017] c2 [0.525731, 0, -0.850651]</p><p> 25  z-&gt;center [0.57735, -0.57735, -0.57735] z-&gt;axis0 [0.707107, 0.707107, 0]  z-&gt;axis1 [0.408248, -0.408248, 0.816497] star_position_scale 0.381966 c0 [0.309017, -0.5, -0.809017] c1 [0.809017, -0.309017, -0.5] c2 [0.5, -0.809017, -0.309017]</p><p>checkAndLoadCatal  visitTriangles  6</p><p> 26  z-&gt;center [0.356822, -0.934172, 0] z-&gt;axis0 [0.934172, 0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.763932 c0 [0, -0.850651, 0.525731] c1 [0, -0.850651, -0.525731] c2 [0.850651, -0.525731, 0]</p><p> 27  z-&gt;center [0.176549, -0.939124, 0.294748] z-&gt;axis0 [0.982784, 0.184757, 0]  z-&gt;axis1 [-0.0544568, 0.289674, 0.955575] star_position_scale 0.381966 c0 [0, -0.850651, 0.525731] c1 [0, -1, 0] c2 [0.5, -0.809017, 0.309017]</p><p> 28  z-&gt;center [0.176549, -0.939124, -0.294748] z-&gt;axis0 [0.982784, 0.184757, 0]  z-&gt;axis1 [0.0544568, -0.289674, 0.955575] star_position_scale 0.381966 c0 [0, -1, 0] c1 [0, -0.850651, -0.525731] c2 [0.5, -0.809017, -0.309017]</p><p> 29  z-&gt;center [0.653462, -0.75696, 0] z-&gt;axis0 [0.75696, 0.653462, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [0.5, -0.809017, 0.309017] c1 [0.5, -0.809017, -0.309017] c2 [0.850651, -0.525731, 0]</p><p> 30  z-&gt;center [0.356822, -0.934172, 0] z-&gt;axis0 [0.934172, 0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [0.5, -0.809017, -0.309017] c1 [0.5, -0.809017, 0.309017] c2 [0, -1, 0]</p><p>checkAndLoadCatal  visitTriangles  7</p><p> 31  z-&gt;center [-0.356822, -0.934172, 0] z-&gt;axis0 [0.934172, -0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.763932 c0 [0, -0.850651, -0.525731] c1 [0, -0.850651, 0.525731] c2 [-0.850651, -0.525731, 0]</p><p> 32  z-&gt;center [-0.176549, -0.939124, -0.294748] z-&gt;axis0 [0.982784, -0.184757, 0]  z-&gt;axis1 [-0.0544568, -0.289674, 0.955575] star_position_scale 0.381966 c0 [0, -0.850651, -0.525731] c1 [0, -1, 0] c2 [-0.5, -0.809017, -0.309017]</p><p> 33  z-&gt;center [-0.176549, -0.939124, 0.294748] z-&gt;axis0 [0.982784, -0.184757, 0]  z-&gt;axis1 [0.0544568, 0.289674, 0.955575] star_position_scale 0.381966 c0 [0, -1, 0] c1 [0, -0.850651, 0.525731] c2 [-0.5, -0.809017, 0.309017]</p><p> 34  z-&gt;center [-0.653462, -0.75696, 0] z-&gt;axis0 [0.75696, -0.653462, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [-0.5, -0.809017, -0.309017] c1 [-0.5, -0.809017, 0.309017] c2 [-0.850651, -0.525731, 0]</p><p> 35  z-&gt;center [-0.356822, -0.934172, 0] z-&gt;axis0 [0.934172, -0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [-0.5, -0.809017, 0.309017] c1 [-0.5, -0.809017, -0.309017] c2 [0, -1, 0]</p><p>checkAndLoadCatal  visitTriangles  8</p><p> 36  z-&gt;center [-0.57735, -0.57735, 0.57735] z-&gt;axis0 [0.707107, -0.707107, 0]  z-&gt;axis1 [0.408248, 0.408248, 0.816497] star_position_scale 0.763932 c0 [0, -0.850651, 0.525731] c1 [-0.525731, 0, 0.850651] c2 [-0.850651, -0.525731, 0]</p><p> 37  z-&gt;center [-0.285662, -0.762575, 0.580411] z-&gt;axis0 [0.936452, -0.350797, 0]  z-&gt;axis1 [0.203606, 0.543526, 0.814324] star_position_scale 0.381966 c0 [0, -0.850651, 0.525731] c1 [-0.309017, -0.5, 0.809017] c2 [-0.5, -0.809017, 0.309017]</p><p> 38  z-&gt;center [-0.580411, -0.285662, 0.762575] z-&gt;axis0 [0.441587, -0.897219, 0]  z-&gt;axis1 [0.684196, 0.336743, 0.6469] star_position_scale 0.381966 c0 [-0.309017, -0.5, 0.809017] c1 [-0.525731, 0, 0.850651] c2 [-0.809017, -0.309017, 0.5]</p><p> 39  z-&gt;center [-0.762575, -0.580411, 0.285662] z-&gt;axis0 [0.605648, -0.795733, 0]  z-&gt;axis1 [0.227311, 0.173011, 0.95833] star_position_scale 0.381966 c0 [-0.5, -0.809017, 0.309017] c1 [-0.809017, -0.309017, 0.5] c2 [-0.850651, -0.525731, 0]</p><p> 40  z-&gt;center [-0.57735, -0.57735, 0.57735] z-&gt;axis0 [0.707107, -0.707107, 0]  z-&gt;axis1 [0.408248, 0.408248, 0.816497] star_position_scale 0.381966 c0 [-0.809017, -0.309017, 0.5] c1 [-0.5, -0.809017, 0.309017] c2 [-0.309017, -0.5, 0.809017]</p><p>checkAndLoadCatal  visitTriangles  9</p><p> 41  z-&gt;center [0, -0.356822, -0.934172] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, -0.934172, 0.356822] star_position_scale 0.763932 c0 [-0.525731, 0, -0.850651] c1 [0.525731, 0, -0.850651] c2 [0, -0.850651, -0.525731]</p><p> 42  z-&gt;center [-0.294748, -0.176549, -0.939124] z-&gt;axis0 [0.513854, -0.857878, 0]  z-&gt;axis1 [-0.805654, -0.482573, 0.343578] star_position_scale 0.381966 c0 [-0.525731, 0, -0.850651] c1 [0, 0, -1] c2 [-0.309017, -0.5, -0.809017]</p><p> 43  z-&gt;center [0.294748, -0.176549, -0.939124] z-&gt;axis0 [0.513854, 0.857878, 0]  z-&gt;axis1 [0.805654, -0.482573, 0.343578] star_position_scale 0.381966 c0 [0, 0, -1] c1 [0.525731, 0, -0.850651] c2 [0.309017, -0.5, -0.809017]</p><p> 44  z-&gt;center [0, -0.653462, -0.75696] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, -0.75696, 0.653462] star_position_scale 0.381966 c0 [-0.309017, -0.5, -0.809017] c1 [0.309017, -0.5, -0.809017] c2 [0, -0.850651, -0.525731]</p><p> 45  z-&gt;center [0, -0.356822, -0.934172] z-&gt;axis0 [1, 0, 0]  z-&gt;axis1 [0, -0.934172, 0.356822] star_position_scale 0.381966 c0 [0.309017, -0.5, -0.809017] c1 [-0.309017, -0.5, -0.809017] c2 [0, 0, -1]</p><p>checkAndLoadCatal  visitTriangles  10</p><p> 46  z-&gt;center [-0.57735, -0.57735, -0.57735] z-&gt;axis0 [0.707107, -0.707107, 0]  z-&gt;axis1 [-0.408248, -0.408248, 0.816497] star_position_scale 0.763932 c0 [0, -0.850651, -0.525731] c1 [-0.850651, -0.525731, 0] c2 [-0.525731, 0, -0.850651]</p><p> 47  z-&gt;center [-0.285662, -0.762575, -0.580411] z-&gt;axis0 [0.936452, -0.350797, 0]  z-&gt;axis1 [-0.203606, -0.543526, 0.814324] star_position_scale 0.381966 c0 [0, -0.850651, -0.525731] c1 [-0.5, -0.809017, -0.309017] c2 [-0.309017, -0.5, -0.809017]</p><p> 48  z-&gt;center [-0.762575, -0.580411, -0.285662] z-&gt;axis0 [0.605648, -0.795733, 0]  z-&gt;axis1 [-0.227311, -0.173011, 0.95833] star_position_scale 0.381966 c0 [-0.5, -0.809017, -0.309017] c1 [-0.850651, -0.525731, 0] c2 [-0.809017, -0.309017, -0.5]</p><p> 49  z-&gt;center [-0.580411, -0.285662, -0.762575] z-&gt;axis0 [0.441587, -0.897219, 0]  z-&gt;axis1 [-0.684196, -0.336743, 0.6469] star_position_scale 0.381966 c0 [-0.309017, -0.5, -0.809017] c1 [-0.809017, -0.309017, -0.5] c2 [-0.525731, 0, -0.850651]</p><p> 50  z-&gt;center [-0.57735, -0.57735, -0.57735] z-&gt;axis0 [0.707107, -0.707107, 0]  z-&gt;axis1 [-0.408248, -0.408248, 0.816497] star_position_scale 0.381966 c0 [-0.809017, -0.309017, -0.5] c1 [-0.309017, -0.5, -0.809017] c2 [-0.5, -0.809017, -0.309017]</p><p>checkAndLoadCatal  visitTriangles  11</p><p> 51  z-&gt;center [-0.934172, 0, -0.356822] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [-0.356822, 0, 0.934172] star_position_scale 0.763932 c0 [-0.850651, -0.525731, 0] c1 [-0.850651, 0.525731, 0] c2 [-0.525731, 0, -0.850651]</p><p> 52  z-&gt;center [-0.939124, -0.294748, -0.176549] z-&gt;axis0 [0.299452, -0.954111, 0]  z-&gt;axis1 [-0.168448, -0.052868, 0.984292] star_position_scale 0.381966 c0 [-0.850651, -0.525731, 0] c1 [-1, 0, 0] c2 [-0.809017, -0.309017, -0.5]</p><p> 53  z-&gt;center [-0.939124, 0.294748, -0.176549] z-&gt;axis0 [-0.299452, -0.954111, 0]  z-&gt;axis1 [-0.168448, 0.052868, 0.984292] star_position_scale 0.381966 c0 [-1, 0, 0] c1 [-0.850651, 0.525731, 0] c2 [-0.809017, 0.309017, -0.5]</p><p> 54  z-&gt;center [-0.75696, 0, -0.653462] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [-0.653462, 0, 0.75696] star_position_scale 0.381966 c0 [-0.809017, -0.309017, -0.5] c1 [-0.809017, 0.309017, -0.5] c2 [-0.525731, 0, -0.850651]</p><p> 55  z-&gt;center [-0.934172, 0, -0.356822] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [-0.356822, 0, 0.934172] star_position_scale 0.381966 c0 [-0.809017, 0.309017, -0.5] c1 [-0.809017, -0.309017, -0.5] c2 [-1, 0, 0]</p><p>checkAndLoadCatal  visitTriangles  12</p><p> 56  z-&gt;center [-0.934172, 0, 0.356822] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [0.356822, 0, 0.934172] star_position_scale 0.763932 c0 [-0.850651, 0.525731, 0] c1 [-0.850651, -0.525731, 0] c2 [-0.525731, 0, 0.850651]</p><p> 57  z-&gt;center [-0.939124, 0.294748, 0.176549] z-&gt;axis0 [-0.299452, -0.954111, 0]  z-&gt;axis1 [0.168448, -0.052868, 0.984292] star_position_scale 0.381966 c0 [-0.850651, 0.525731, 0] c1 [-1, 0, 0] c2 [-0.809017, 0.309017, 0.5]</p><p> 58  z-&gt;center [-0.939124, -0.294748, 0.176549] z-&gt;axis0 [0.299452, -0.954111, 0]  z-&gt;axis1 [0.168448, 0.052868, 0.984292] star_position_scale 0.381966 c0 [-1, 0, 0] c1 [-0.850651, -0.525731, 0] c2 [-0.809017, -0.309017, 0.5]</p><p> 59  z-&gt;center [-0.75696, 0, 0.653462] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [0.653462, 0, 0.75696] star_position_scale 0.381966 c0 [-0.809017, 0.309017, 0.5] c1 [-0.809017, -0.309017, 0.5] c2 [-0.525731, 0, 0.850651]</p><p> 60  z-&gt;center [-0.934172, 0, 0.356822] z-&gt;axis0 [0, -1, 0]  z-&gt;axis1 [0.356822, 0, 0.934172] star_position_scale 0.381966 c0 [-0.809017, -0.309017, 0.5] c1 [-0.809017, 0.309017, 0.5] c2 [-1, 0, 0]</p><p>checkAndLoadCatal  visitTriangles  13</p><p> 61  z-&gt;center [0, 0.356822, -0.934172] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, 0.934172, 0.356822] star_position_scale 0.763932 c0 [0.525731, 0, -0.850651] c1 [-0.525731, 0, -0.850651] c2 [0, 0.850651, -0.525731]</p><p> 62  z-&gt;center [0.294748, 0.176549, -0.939124] z-&gt;axis0 [-0.513854, 0.857878, 0]  z-&gt;axis1 [0.805654, 0.482573, 0.343578] star_position_scale 0.381966 c0 [0.525731, 0, -0.850651] c1 [0, 0, -1] c2 [0.309017, 0.5, -0.809017]</p><p> 63  z-&gt;center [-0.294748, 0.176549, -0.939124] z-&gt;axis0 [-0.513854, -0.857878, 0]  z-&gt;axis1 [-0.805654, 0.482573, 0.343578] star_position_scale 0.381966 c0 [0, 0, -1] c1 [-0.525731, 0, -0.850651] c2 [-0.309017, 0.5, -0.809017]</p><p> 64  z-&gt;center [0, 0.653462, -0.75696] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, 0.75696, 0.653462] star_position_scale 0.381966 c0 [0.309017, 0.5, -0.809017] c1 [-0.309017, 0.5, -0.809017] c2 [0, 0.850651, -0.525731]</p><p> 65  z-&gt;center [0, 0.356822, -0.934172] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, 0.934172, 0.356822] star_position_scale 0.381966 c0 [-0.309017, 0.5, -0.809017] c1 [0.309017, 0.5, -0.809017] c2 [0, 0, -1]</p><p>checkAndLoadCatal  visitTriangles  14</p><p> 66  z-&gt;center [-0.57735, 0.57735, -0.57735] z-&gt;axis0 [-0.707107, -0.707107, 0]  z-&gt;axis1 [-0.408248, 0.408248, 0.816497] star_position_scale 0.763932 c0 [-0.850651, 0.525731, 0] c1 [0, 0.850651, -0.525731] c2 [-0.525731, 0, -0.850651]</p><p> 67  z-&gt;center [-0.762575, 0.580411, -0.285662] z-&gt;axis0 [-0.605648, -0.795733, 0]  z-&gt;axis1 [-0.227311, 0.173011, 0.95833] star_position_scale 0.381966 c0 [-0.850651, 0.525731, 0] c1 [-0.5, 0.809017, -0.309017] c2 [-0.809017, 0.309017, -0.5]</p><p> 68  z-&gt;center [-0.285662, 0.762575, -0.580411] z-&gt;axis0 [-0.936452, -0.350797, 0]  z-&gt;axis1 [-0.203606, 0.543526, 0.814324] star_position_scale 0.381966 c0 [-0.5, 0.809017, -0.309017] c1 [0, 0.850651, -0.525731] c2 [-0.309017, 0.5, -0.809017]</p><p> 69  z-&gt;center [-0.580411, 0.285662, -0.762575] z-&gt;axis0 [-0.441587, -0.897219, 0]  z-&gt;axis1 [-0.684196, 0.336743, 0.6469] star_position_scale 0.381966 c0 [-0.809017, 0.309017, -0.5] c1 [-0.309017, 0.5, -0.809017] c2 [-0.525731, 0, -0.850651]</p><p> 70  z-&gt;center [-0.57735, 0.57735, -0.57735] z-&gt;axis0 [-0.707107, -0.707107, 0]  z-&gt;axis1 [-0.408248, 0.408248, 0.816497] star_position_scale 0.381966 c0 [-0.309017, 0.5, -0.809017] c1 [-0.809017, 0.309017, -0.5] c2 [-0.5, 0.809017, -0.309017]</p><p>checkAndLoadCatal  visitTriangles  15</p><p> 71  z-&gt;center [-0.356822, 0.934172, 0] z-&gt;axis0 [-0.934172, -0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.763932 c0 [0, 0.850651, 0.525731] c1 [0, 0.850651, -0.525731] c2 [-0.850651, 0.525731, 0]</p><p> 72  z-&gt;center [-0.176549, 0.939124, 0.294748] z-&gt;axis0 [-0.982784, -0.184757, 0]  z-&gt;axis1 [0.0544568, -0.289674, 0.955575] star_position_scale 0.381966 c0 [0, 0.850651, 0.525731] c1 [0, 1, 0] c2 [-0.5, 0.809017, 0.309017]</p><p> 73  z-&gt;center [-0.176549, 0.939124, -0.294748] z-&gt;axis0 [-0.982784, -0.184757, 0]  z-&gt;axis1 [-0.0544568, 0.289674, 0.955575] star_position_scale 0.381966 c0 [0, 1, 0] c1 [0, 0.850651, -0.525731] c2 [-0.5, 0.809017, -0.309017]</p><p> 74  z-&gt;center [-0.653462, 0.75696, 0] z-&gt;axis0 [-0.75696, -0.653462, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [-0.5, 0.809017, 0.309017] c1 [-0.5, 0.809017, -0.309017] c2 [-0.850651, 0.525731, 0]</p><p> 75  z-&gt;center [-0.356822, 0.934172, 0] z-&gt;axis0 [-0.934172, -0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [-0.5, 0.809017, -0.309017] c1 [-0.5, 0.809017, 0.309017] c2 [0, 1, 0]</p><p>checkAndLoadCatal  visitTriangles  16</p><p> 76  z-&gt;center [-0.57735, 0.57735, 0.57735] z-&gt;axis0 [-0.707107, -0.707107, 0]  z-&gt;axis1 [0.408248, -0.408248, 0.816497] star_position_scale 0.763932 c0 [-0.850651, 0.525731, 0] c1 [-0.525731, 0, 0.850651] c2 [0, 0.850651, 0.525731]</p><p> 77  z-&gt;center [-0.762575, 0.580411, 0.285662] z-&gt;axis0 [-0.605648, -0.795733, 0]  z-&gt;axis1 [0.227311, -0.173011, 0.95833] star_position_scale 0.381966 c0 [-0.850651, 0.525731, 0] c1 [-0.809017, 0.309017, 0.5] c2 [-0.5, 0.809017, 0.309017]</p><p> 78  z-&gt;center [-0.580411, 0.285662, 0.762575] z-&gt;axis0 [-0.441587, -0.897219, 0]  z-&gt;axis1 [0.684196, -0.336743, 0.6469] star_position_scale 0.381966 c0 [-0.809017, 0.309017, 0.5] c1 [-0.525731, 0, 0.850651] c2 [-0.309017, 0.5, 0.809017]</p><p> 79  z-&gt;center [-0.285662, 0.762575, 0.580411] z-&gt;axis0 [-0.936452, -0.350797, 0]  z-&gt;axis1 [0.203606, -0.543526, 0.814324] star_position_scale 0.381966 c0 [-0.5, 0.809017, 0.309017] c1 [-0.309017, 0.5, 0.809017] c2 [0, 0.850651, 0.525731]</p><p> 80  z-&gt;center [-0.57735, 0.57735, 0.57735] z-&gt;axis0 [-0.707107, -0.707107, 0]  z-&gt;axis1 [0.408248, -0.408248, 0.816497] star_position_scale 0.381966 c0 [-0.309017, 0.5, 0.809017] c1 [-0.5, 0.809017, 0.309017] c2 [-0.809017, 0.309017, 0.5]</p><p>checkAndLoadCatal  visitTriangles  17</p><p> 81  z-&gt;center [0.57735, 0.57735, -0.57735] z-&gt;axis0 [-0.707107, 0.707107, 0]  z-&gt;axis1 [0.408248, 0.408248, 0.816497] star_position_scale 0.763932 c0 [0, 0.850651, -0.525731] c1 [0.850651, 0.525731, 0] c2 [0.525731, 0, -0.850651]</p><p> 82  z-&gt;center [0.285662, 0.762575, -0.580411] z-&gt;axis0 [-0.936452, 0.350797, 0]  z-&gt;axis1 [0.203606, 0.543526, 0.814324] star_position_scale 0.381966 c0 [0, 0.850651, -0.525731] c1 [0.5, 0.809017, -0.309017] c2 [0.309017, 0.5, -0.809017]</p><p> 83  z-&gt;center [0.762575, 0.580411, -0.285662] z-&gt;axis0 [-0.605648, 0.795733, 0]  z-&gt;axis1 [0.227311, 0.173011, 0.95833] star_position_scale 0.381966 c0 [0.5, 0.809017, -0.309017] c1 [0.850651, 0.525731, 0] c2 [0.809017, 0.309017, -0.5]</p><p> 84  z-&gt;center [0.580411, 0.285662, -0.762575] z-&gt;axis0 [-0.441587, 0.897219, 0]  z-&gt;axis1 [0.684196, 0.336743, 0.6469] star_position_scale 0.381966 c0 [0.309017, 0.5, -0.809017] c1 [0.809017, 0.309017, -0.5] c2 [0.525731, 0, -0.850651]</p><p> 85  z-&gt;center [0.57735, 0.57735, -0.57735] z-&gt;axis0 [-0.707107, 0.707107, 0]  z-&gt;axis1 [0.408248, 0.408248, 0.816497] star_position_scale 0.381966 c0 [0.809017, 0.309017, -0.5] c1 [0.309017, 0.5, -0.809017] c2 [0.5, 0.809017, -0.309017]</p><p>checkAndLoadCatal  visitTriangles  18</p><p> 86  z-&gt;center [0.356822, 0.934172, 0] z-&gt;axis0 [-0.934172, 0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.763932 c0 [0, 0.850651, -0.525731] c1 [0, 0.850651, 0.525731] c2 [0.850651, 0.525731, 0]</p><p> 87  z-&gt;center [0.176549, 0.939124, -0.294748] z-&gt;axis0 [-0.982784, 0.184757, 0]  z-&gt;axis1 [0.0544568, 0.289674, 0.955575] star_position_scale 0.381966 c0 [0, 0.850651, -0.525731] c1 [0, 1, 0] c2 [0.5, 0.809017, -0.309017]</p><p> 88  z-&gt;center [0.176549, 0.939124, 0.294748] z-&gt;axis0 [-0.982784, 0.184757, 0]  z-&gt;axis1 [-0.0544568, -0.289674, 0.955575] star_position_scale 0.381966 c0 [0, 1, 0] c1 [0, 0.850651, 0.525731] c2 [0.5, 0.809017, 0.309017]</p><p> 89  z-&gt;center [0.653462, 0.75696, 0] z-&gt;axis0 [-0.75696, 0.653462, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [0.5, 0.809017, -0.309017] c1 [0.5, 0.809017, 0.309017] c2 [0.850651, 0.525731, 0]</p><p> 90  z-&gt;center [0.356822, 0.934172, 0] z-&gt;axis0 [-0.934172, 0.356822, 0]  z-&gt;axis1 [0, 0, 1] star_position_scale 0.381966 c0 [0.5, 0.809017, 0.309017] c1 [0.5, 0.809017, -0.309017] c2 [0, 1, 0]</p><p>checkAndLoadCatal  visitTriangles  19</p><p> 91  z-&gt;center [0.57735, 0.57735, 0.57735] z-&gt;axis0 [-0.707107, 0.707107, 0]  z-&gt;axis1 [-0.408248, -0.408248, 0.816497] star_position_scale 0.763932 c0 [0, 0.850651, 0.525731] c1 [0.525731, 0, 0.850651] c2 [0.850651, 0.525731, 0]</p><p> 92  z-&gt;center [0.285662, 0.762575, 0.580411] z-&gt;axis0 [-0.936452, 0.350797, 0]  z-&gt;axis1 [-0.203606, -0.543526, 0.814324] star_position_scale 0.381966 c0 [0, 0.850651, 0.525731] c1 [0.309017, 0.5, 0.809017] c2 [0.5, 0.809017, 0.309017]</p><p> 93  z-&gt;center [0.580411, 0.285662, 0.762575] z-&gt;axis0 [-0.441587, 0.897219, 0]  z-&gt;axis1 [-0.684196, -0.336743, 0.6469] star_position_scale 0.381966 c0 [0.309017, 0.5, 0.809017] c1 [0.525731, 0, 0.850651] c2 [0.809017, 0.309017, 0.5]</p><p> 94  z-&gt;center [0.762575, 0.580411, 0.285662] z-&gt;axis0 [-0.605648, 0.795733, 0]  z-&gt;axis1 [-0.227311, -0.173011, 0.95833] star_position_scale 0.381966 c0 [0.5, 0.809017, 0.309017] c1 [0.809017, 0.309017, 0.5] c2 [0.850651, 0.525731, 0]</p><p> 95  z-&gt;center [0.57735, 0.57735, 0.57735] z-&gt;axis0 [-0.707107, 0.707107, 0]  z-&gt;axis1 [-0.408248, -0.408248, 0.816497] star_position_scale 0.381966 c0 [0.809017, 0.309017, 0.5] c1 [0.5, 0.809017, 0.309017] c2 [0.309017, 0.5, 0.809017]</p><p>checkAndLoadCatal  visitTriangles  20</p><p> 96  z-&gt;center [0, 0.356822, 0.934172] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, -0.934172, 0.356822] star_position_scale 0.763932 c0 [-0.525731, 0, 0.850651] c1 [0.525731, 0, 0.850651] c2 [0, 0.850651, 0.525731]</p><p> 97  z-&gt;center [-0.294748, 0.176549, 0.939124] z-&gt;axis0 [-0.513854, -0.857878, 0]  z-&gt;axis1 [0.805654, -0.482573, 0.343578] star_position_scale 0.381966 c0 [-0.525731, 0, 0.850651] c1 [0, 0, 1] c2 [-0.309017, 0.5, 0.809017]</p><p> 98  z-&gt;center [0.294748, 0.176549, 0.939124] z-&gt;axis0 [-0.513854, 0.857878, 0]  z-&gt;axis1 [-0.805654, -0.482573, 0.343578] star_position_scale 0.381966 c0 [0, 0, 1] c1 [0.525731, 0, 0.850651] c2 [0.309017, 0.5, 0.809017]</p><p> 99  z-&gt;center [0, 0.653462, 0.75696] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, -0.75696, 0.653462] star_position_scale 0.381966 c0 [-0.309017, 0.5, 0.809017] c1 [0.309017, 0.5, 0.809017] c2 [0, 0.850651, 0.525731]</p><p> 100  z-&gt;center [0, 0.356822, 0.934172] z-&gt;axis0 [-1, 0, 0]  z-&gt;axis1 [0, -0.934172, 0.356822] star_position_scale 0.381966 c0 [0.309017, 0.5, 0.809017] c1 [-0.309017, 0.5, 0.809017] c2 [0, 0, 1]</p><p><strong>重点结论：star_position_scale = 0.763932</strong></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">mu0 = (A(<span class="number">11</span>,:) - center(<span class="number">1</span>,:)) * axis0.&#x27;;</span><br><span class="line">mu1 = (A(<span class="number">11</span>,:) - center(<span class="number">1</span>,:)) * axis1.&#x27;;</span><br><span class="line">f = <span class="number">1</span>/(<span class="built_in">sqrt</span>(<span class="number">1</span>-mu0^<span class="number">2</span> -mu1^<span class="number">2</span>));</span><br><span class="line">h = <span class="built_in">abs</span>(mu1)*f;</span><br></pre></td></tr></table></figure><hr><p>梳理好顺序之后，可以进入ZoneArray::initTriangle中进行查看，尝试第一个中点和轴的信息。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% plot_triangle.m </span></span><br><span class="line"><span class="comment">% 12个顶点，30条棱，20个面</span></span><br><span class="line">clear all; close all;</span><br><span class="line">m = <span class="built_in">sqrt</span>(<span class="number">50</span><span class="number">-10</span>*<span class="built_in">sqrt</span>(<span class="number">5</span>))/<span class="number">10</span>;</span><br><span class="line">n = <span class="built_in">sqrt</span>(<span class="number">50</span>+<span class="number">10</span>*<span class="built_in">sqrt</span>(<span class="number">5</span>))/<span class="number">10</span>;</span><br><span class="line">A = [ <span class="comment">% 12个顶点</span></span><br><span class="line">    n,-m,<span class="number">0</span>;</span><br><span class="line">    n,m,<span class="number">0</span>;</span><br><span class="line">    -n,m,<span class="number">0</span>;</span><br><span class="line">    -n,-m,<span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span>,n,-m;</span><br><span class="line">    <span class="number">0</span>,n,m;</span><br><span class="line">    <span class="number">0</span>,-n,m;</span><br><span class="line">    <span class="number">0</span>,-n,-m;</span><br><span class="line">    -m,<span class="number">0</span>,n;</span><br><span class="line">    m,<span class="number">0</span>,n;</span><br><span class="line">    m,<span class="number">0</span>,-n;</span><br><span class="line">    -m,<span class="number">0</span>,-n;</span><br><span class="line">    ];</span><br><span class="line"><span class="built_in">scatter3</span>(A(:,<span class="number">1</span>),A(:,<span class="number">2</span>),A(:,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">center=[];c0=[];c1=[];c2=[];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">1</span>,<span class="number">0</span>,<span class="number">10</span>); <span class="comment">% 20个面</span></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">0</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">0</span>,<span class="number">9</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">0</span>,<span class="number">7</span>,<span class="number">10</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">6</span>,<span class="number">8</span>,<span class="number">3</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">11</span>,<span class="number">10</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">7</span>,<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">3</span>,<span class="number">2</span>,<span class="number">11</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">10</span>,<span class="number">11</span>,<span class="number">4</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">2</span>,<span class="number">4</span>,<span class="number">11</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">4</span>,<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">5</span>,<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">[center(<span class="keyword">end</span>+<span class="number">1</span>,:),c0(<span class="keyword">end</span>+<span class="number">1</span>,:),c1(<span class="keyword">end</span>+<span class="number">1</span>,:),c2(<span class="keyword">end</span>+<span class="number">1</span>,:)] = plot_triangle(A,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">text(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">text(A(<span class="number">2</span>,<span class="number">1</span>),A(<span class="number">2</span>,<span class="number">2</span>),A(<span class="number">2</span>,<span class="number">3</span>),<span class="string">&#x27;c0&#x27;</span>);</span><br><span class="line">text(A(<span class="number">1</span>,<span class="number">1</span>),A(<span class="number">1</span>,<span class="number">2</span>),A(<span class="number">1</span>,<span class="number">3</span>),<span class="string">&#x27;c1&#x27;</span>);</span><br><span class="line">text(A(<span class="number">11</span>,<span class="number">1</span>),A(<span class="number">11</span>,<span class="number">2</span>),A(<span class="number">11</span>,<span class="number">3</span>),<span class="string">&#x27;c2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">d1=<span class="number">2</span>;d2=<span class="number">1</span>;d3=<span class="number">11</span>;</span><br><span class="line">line([A(d1,<span class="number">1</span>),A(d2,<span class="number">1</span>),A(d3,<span class="number">1</span>),A(d1,<span class="number">1</span>)],[A(d1,<span class="number">2</span>),A(d2,<span class="number">2</span>),A(d3,<span class="number">2</span>),A(d1,<span class="number">2</span>)],[A(d1,<span class="number">3</span>),A(d2,<span class="number">3</span>),A(d3,<span class="number">3</span>),A(d1,<span class="number">3</span>)],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter3</span>(center(<span class="number">1</span>,<span class="number">1</span>),center(<span class="number">1</span>,<span class="number">2</span>),center(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">axis0 = <span class="built_in">cross</span>([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],center(<span class="number">1</span>,:));</span><br><span class="line">axis0 = axis0./norm(axis0);</span><br><span class="line">axis1 = <span class="built_in">cross</span>(center(<span class="number">1</span>,:),axis0);</span><br><span class="line">axis1 = axis1./norm(axis1);</span><br><span class="line">quiver3(center(<span class="number">1</span>,<span class="number">1</span>),center(<span class="number">1</span>,<span class="number">2</span>),center(<span class="number">1</span>,<span class="number">3</span>),axis0(<span class="number">1</span>,<span class="number">1</span>),axis0(<span class="number">1</span>,<span class="number">2</span>),axis0(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">quiver3(center(<span class="number">1</span>,<span class="number">1</span>),center(<span class="number">1</span>,<span class="number">2</span>),center(<span class="number">1</span>,<span class="number">3</span>),axis1(<span class="number">1</span>,<span class="number">1</span>),axis1(<span class="number">1</span>,<span class="number">2</span>),axis1(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axis equal;</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220313100715334.png" alt="image-20220313100715334"></p><p>​    // Initialize star_position_scale. This scale is used to multiply stars position<br>​    // encoded as integers so that it optimize precision over the triangle.<br>​    // It has to be computed for each triangle because the relative orientation of the 2 axis is different for each triangle.</p><p>// 初始化star_position_scale。 此比例用于乘以星星位置 </p><p>// 编码为整数，以便优化三角形的精度。 </p><p>// 必须为每个三角形计算它，因为每个三角形的 2 轴的相对方向不同。 </p><hr><p>MaxPosVal 2147483647=0x7fff ffff</p><p>20个大三角形 star_position_scale = 0.763932 </p><p>80个小三角形 star_position_scale 0.381966</p><p>在ZoneArray.cpp中 查看变量 star_position_scale</p><p>mag_min 这一层中星等的下界。单位:millimag（10−3）。对最亮的恒星可能是负的。-2000 和 6000 </p><p>mag_range 这一层星等的范围，都为12.8星等。单位:millimags</p><p>mag_steps 用于描述mag_range中的值的步骤数都为256 。总是正的。单个恒星的mag条目从0..mag_steps开始 256 12800/256=50 .每次移动 一步0.05mags，可以看到软件中最低分辨率为0.05星等。最多256步。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">arg(level=<span class="number">0</span>和<span class="number">1</span>).arg(type=<span class="number">0</span>).arg(major=<span class="number">0</span>).arg(minor=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HipZoneArray</span> :</span> <span class="keyword">public</span> SpecialZoneArray&lt;Star1&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialZoneArray</span> :</span> <span class="keyword">public</span> ZoneArray</span><br><span class="line">    </span><br><span class="line">rval = <span class="keyword">new</span> HipZoneArray(file, byte_swap, use_mmap, level, mag_min, mag_range, mag_steps);</span><br><span class="line">SpecialZoneArray&lt;Star&gt;::SpecialZoneArray();        </span><br></pre></td></tr></table></figure><p>在该函数中，可以得到star.hpp中的信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          _______________</span><br><span class="line">0     x0 |               |</span><br><span class="line">1        |___________    |</span><br><span class="line">2     x1 |           |___|</span><br><span class="line">3        |_______        |</span><br><span class="line">4     bV |_______|_______|</span><br><span class="line">5    mag |_________|_____| bV</span><br><span class="line"></span><br><span class="line">int x0               :18</span><br><span class="line">int x1               :18</span><br><span class="line">unsigned int bV      :7</span><br><span class="line">unsigned int mag     :5</span><br></pre></td></tr></table></figure><hr><p>点鼠标一下，这是可以触发的函数。</p><p>StelObjectMgr::cleverFind<br>    StarMgr::searchAround 指向 放大倍率<br>        SpecialZoneArray&lt; Star&gt;::searchAround<br>            s-&gt;getJ2000Pos(z, static_cast&lt; float&gt;(movementFactor), tmp);</p><hr><p>注意到只有这里一次调用了星表里的26785=4979+21806个数据。</p><p>StarMgr::loadData<br>z-&gt;updateHipIndex(hipIndex);</p><p>​    HipZoneArray::updateHipIndex</p><p>因此在ZoneArray.cpp中仿写saveHipIndex函数为</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HipZoneArray::saveHipIndex</span><span class="params">(HipIndexStruct hipIndex[])</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    StelCore* core = StelApp::getInstance().getCore();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> d2000 = <span class="number">2451545.0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> movementFactor = (M_PI / <span class="number">180.</span>) * (<span class="number">0.0001</span> / <span class="number">3600.</span>) * ((core-&gt;getJDE() - d2000) / <span class="number">365.25</span>) / <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(star_position_scale);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> SpecialZoneData&lt;Star1&gt; *z = getZones() + (nr_of_zones - <span class="number">1</span>); z &gt;= getZones(); z--) &#123; <span class="comment">// 100次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> Star1 *s = z-&gt;getStars() + z-&gt;size - <span class="number">1</span>; s &gt;= z-&gt;getStars(); s--) &#123;</span><br><span class="line">            Vec3f tmp;</span><br><span class="line">            s-&gt;getJ2000Pos(z, <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(movementFactor), tmp);</span><br><span class="line">            qDebug() &lt;&lt; <span class="string">&quot;checkAndLoadCatalogcheckAndLoadCatalog&quot;</span>  &lt;&lt; ++aa &lt;&lt;  s-&gt;getHip()  &lt;&lt; s-&gt;getX0() &lt;&lt; s-&gt;getX1() &lt;&lt; s-&gt;getDx0() &lt;&lt; s-&gt;getDx1() &lt;&lt; s-&gt;getBV() &lt;&lt; s-&gt;getMag()  &lt;&lt; s-&gt;getPlx() &lt;&lt; s-&gt;getSpInt() &lt;&lt; s-&gt;getBVIndex() &lt;&lt; s-&gt;hasName() &lt;&lt; tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存文件的代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HipZoneArray::saveHipIndex</span><span class="params">(HipIndexStruct hipIndex[])</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="function">QFile  <span class="title">myFile</span><span class="params">(<span class="string">&quot;C:/Users/hp/Desktop/catalog.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (myFile.open(QFile::WriteOnly | QFile::Append | QIODevice::Text)) &#123;</span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(&amp;myFile)</span></span>;</span><br><span class="line">        StelCore* core = StelApp::getInstance().getCore();</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">double</span> d2000 = <span class="number">2451545.0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">double</span> movementFactor = (M_PI / <span class="number">180.</span>) * (<span class="number">0.0001</span> / <span class="number">3600.</span>) * ((core-&gt;getJDE() - d2000) / <span class="number">365.25</span>) / <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(star_position_scale);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> SpecialZoneData&lt;Star1&gt; *z = getZones() + (nr_of_zones - <span class="number">1</span>); z &gt;= getZones(); z--) &#123; <span class="comment">// 100次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> Star1 *s = z-&gt;getStars() + z-&gt;size - <span class="number">1</span>; s &gt;= z-&gt;getStars(); s--) &#123;</span><br><span class="line">                Vec3f tmp;</span><br><span class="line">                s-&gt;getJ2000Pos(z, <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(movementFactor), tmp);</span><br><span class="line">                tmp.normalize();</span><br><span class="line">                Vec3d vel = core-&gt;getCurrentPlanet()-&gt;getHeliocentricEclipticVelocity();</span><br><span class="line">                vel       = StelCore::matVsop87ToJ2000 * vel * core-&gt;getAberrationFactor() * (AU / (<span class="number">86400.0</span> * SPEED_OF_LIGHT));</span><br><span class="line">                Vec3d pos = tmp.toVec3d() + vel;</span><br><span class="line">                pos.normalize();</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">&quot;checkAndLoadCatalogcheckAndLoadCatalog&quot;</span>  &lt;&lt; ++aa &lt;&lt; s-&gt;getHip()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;getBV() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getMag()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getPlx() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getSpInt() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getBVIndex() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;hasName() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  tmp  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; z-&gt;getNrOfStars()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; star_position_scale &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                out  &lt;&lt;  aa &lt;&lt;  <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;getHip()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;getBV() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getMag()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getPlx() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getSpInt() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getBVIndex() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;hasName() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  pos[<span class="number">0</span>] &lt;&lt;  <span class="string">&quot;  &quot;</span> &lt;&lt; pos[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  pos[<span class="number">2</span>]  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; z-&gt;getNrOfStars()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; star_position_scale &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    myFile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在StarMgr.cpp的StarMgr::searchAround中添加</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">qDebug() &lt;&lt; <span class="string">&quot;searchAround&quot;</span> &lt;&lt; ++bbbb &lt;&lt; vv &lt;&lt; limFov;</span><br><span class="line"><span class="keyword">if</span>(bbbb &gt;= <span class="number">23</span> )</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>* z : gridLevels)</span><br><span class="line">        z-&gt;saveHipIndex( hipIndex);</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220316101930812.png" alt="image-20220316101930812"></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;close all;clc;</span><br><span class="line">tic</span><br><span class="line">A = importdata(<span class="string">&quot;catalog.txt&quot;</span>);</span><br><span class="line">hip = A(:,<span class="number">2</span>);</span><br><span class="line">x0 = A(:,<span class="number">3</span>);</span><br><span class="line">x1 = A(:,<span class="number">4</span>);</span><br><span class="line">dx0 =  A(:,<span class="number">5</span>);</span><br><span class="line">dx1 =  A(:,<span class="number">6</span>);</span><br><span class="line">bv = A(:,<span class="number">7</span>);</span><br><span class="line">mag = A(:,<span class="number">8</span>);</span><br><span class="line">plx = A(:,<span class="number">9</span>);</span><br><span class="line">spInt = A(:,<span class="number">10</span>);</span><br><span class="line">bvIndex = A(:,<span class="number">11</span>);</span><br><span class="line">hasName = A(:,<span class="number">12</span>);</span><br><span class="line">xyz = A(:,<span class="number">13</span>:<span class="number">15</span>);</span><br><span class="line">level = A(:,<span class="number">16</span>);</span><br><span class="line">getNrOfStars = A(:,<span class="number">17</span>);</span><br><span class="line">star_position_scale = A(:,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">mag_<span class="built_in">true</span> = mag .* <span class="number">0.05</span> + <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">asind</span>(xyz(:,<span class="number">3</span>));</span><br><span class="line">a = <span class="built_in">acosd</span>(xyz(:,<span class="number">1</span>)./<span class="built_in">sqrt</span>(<span class="number">1</span>-xyz(:,<span class="number">3</span>).^<span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(b)</span><br><span class="line">    <span class="keyword">if</span>(xyz(<span class="built_in">i</span>,<span class="number">2</span>)&lt;<span class="number">0</span>)</span><br><span class="line">        a(<span class="built_in">i</span>,:)=<span class="number">360</span>-a(<span class="built_in">i</span>,:);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span>(level(<span class="built_in">i</span>)==<span class="number">0</span>)</span><br><span class="line">        mag_<span class="built_in">true</span>(<span class="built_in">i</span>) = <span class="number">-2</span> + mag(<span class="built_in">i</span>) * <span class="number">0.05</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hh1 = (a./<span class="number">15</span>);</span><br><span class="line">hh = <span class="built_in">fix</span>(hh1);</span><br><span class="line">mm1 = (a./<span class="number">15</span> - hh)*<span class="number">60</span>;</span><br><span class="line">mm = <span class="built_in">fix</span>(mm1);</span><br><span class="line">ss = (mm1 - mm)*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">al_hh = <span class="built_in">fix</span>(b);</span><br><span class="line">al_mm1 = (<span class="built_in">abs</span>(b)-<span class="built_in">abs</span>(al_hh))*<span class="number">60</span>;</span><br><span class="line">al_mm = <span class="built_in">fix</span>(al_mm1);</span><br><span class="line">al_ss = (al_mm1 - al_mm)*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A=[A,a,b,hh,mm,ss,al_hh,al_mm,al_ss,mag_<span class="built_in">true</span>];</span><br><span class="line"></span><br><span class="line">xlswrite(<span class="string">&#x27;catal&#x27;</span>,A);</span><br><span class="line">toc</span><br></pre></td></tr></table></figure></h2><p>getJ2000Pos 函数</p><p>getJ2000EquatorialPos （StarWrapper.hpp）</p><p>只有StarWrapper.cpp 和 ZoneArray.cpp 包含 #include “StarWrapper.hpp”</p><p>ZoneArray.cpp<br>    StarMgr.hpp</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StelRegionObject</span> //抽象基类 </span></span><br><span class="line"><span class="class"><span class="title">virtual</span> <span class="title">Vec3d</span> <span class="title">getPointInRegion</span>() <span class="title">const</span>=</span><span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StelObject</span> :</span> <span class="keyword">public</span> StelRegionObject </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QString <span class="title">getInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *, <span class="keyword">const</span> InfoStringGroup&amp; )</span> <span class="keyword">const</span> </span>= <span class="number">0</span>; <span class="comment">//抽象基类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exoplanet</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeteorShower</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nova</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pulsar</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quasar</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Satellite</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supernova</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TelescopeClient</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> StelObject</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TelescopeClientASCOM</span> :</span> <span class="keyword">public</span> TelescopeClient</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TelescopeClientINDI</span> :</span> <span class="keyword">public</span> TelescopeClient</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TelescopeClientDirectLx200</span> :</span> <span class="keyword">public</span> TelescopeClient, <span class="keyword">public</span> Server</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TelescopeClientDirectNexStar</span> :</span> <span class="keyword">public</span> TelescopeClient, <span class="keyword">public</span> Server</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">TelescopeClientJsonRts2</span> :</span> <span class="keyword">public</span> TelescopeClient</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Asterism</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Constellation</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CustomObject</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Nebula</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">NomenclatureItem</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Planet</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">            </span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">StarWrapperBase</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">StarWrapper</span> :</span> <span class="keyword">public</span> StarWrapperBase</span><br><span class="line">            <span class="function"><span class="keyword">virtual</span> Vec3d <span class="title">getJ2000EquatorialPos</span><span class="params">(<span class="keyword">const</span> StelCore * core)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span></span><br><span class="line"><span class="function">           class StarWrapper1 : <span class="keyword">public</span> StarWrapper&lt;Star1&gt;</span></span><br><span class="line"><span class="function">                class StarWrapper2 : <span class="keyword">public</span> StarWrapper&lt;Star2&gt;</span></span><br><span class="line"><span class="function">                class StarWrapper3 : <span class="keyword">public</span> StarWrapper&lt;Star3&gt;</span></span><br></pre></td></tr></table></figure><hr><p>验证从二进制文件到赤经赤纬</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">qDebug() &lt;&lt; <span class="string">&quot;checkAndLoadCatalogcheckAndLoadCatalog&quot;</span>  &lt;&lt; ++aa &lt;&lt; s-&gt;getHip()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getX1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx0() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getDx1() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;getBV() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getMag()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getPlx() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getSpInt() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; s-&gt;getBVIndex() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  s-&gt;hasName() &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt;  tmp  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; z-&gt;getNrOfStars()  &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; star_position_scale &lt;&lt; movementFactor &lt;&lt; core-&gt;getJDE() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220317144732768.png" alt="image-20220317144732768"></p><p>验证最后一个星</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s-&gt;getJ2000Pos(z, <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(movementFactor), tmp);</span><br></pre></td></tr></table></figure><p>进入函数<br>        pos = (z-&gt;center) + (getX0())+movementFactor<em>getDx0()) </em> (z-&gt;axis0) + (getX1())+movementFactor<em>getDx1()) </em> (z-&gt;axis1);</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">-623411838</span>+ans*(<span class="number">-37</span>) )* [<span class="number">-5.32625e-11</span>, <span class="number">1.69705e-10</span>, <span class="number">0</span>]+(<span class="number">-188238807</span>+ans*(<span class="number">-2097</span>))*[<span class="number">2.99612e-11</span>, <span class="number">9.40346e-12</span>, <span class="number">1.75073e-10</span>]+[<span class="number">0.939124</span>, <span class="number">0.294748</span>, <span class="number">-0.176549</span>]</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9667</span>    <span class="number">0.1872</span>   <span class="number">-0.2095</span></span><br><span class="line">ans./norm(ans)</span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9603</span>    <span class="number">0.1859</span>   <span class="number">-0.2081</span></span><br><span class="line">    [<span class="number">0.960264</span>, <span class="number">0.185937</span>, <span class="number">-0.208135</span>]差不多</span><br><span class="line">    </span><br><span class="line">ans +[<span class="number">-7.89179e-06</span>, <span class="number">-9.1333e-05</span>, <span class="number">-3.95923e-05</span>] </span><br><span class="line"></span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.9603</span>    <span class="number">0.1858</span>   <span class="number">-0.2082</span></span><br></pre></td></tr></table></figure><p> movementFactor = (M_PI / 180.) <em> (0.0001 / 3600.) </em> ((core-&gt;getJDE() - d2000) / 365.25) /(star_position_scale);</p><p>core-&gt;getJDE() = 2459656</p><p>d2000 = 2451545.0  截止2022.3.17 差距8111天</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14159265358979323846</span> / <span class="number">180.0</span> * <span class="number">0.0001</span>/<span class="number">3600.0</span>*<span class="number">8111</span>/<span class="number">365.25</span>/<span class="number">60.5274</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">   <span class="number">1.7787e-10</span></span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220317145315365.png" alt="image-20220317145315365"></p><p>最终得到包含赤经赤纬星等的表</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220317161906242.png" alt="image-20220317161906242"></p>]]></content>
    
    
    <summary type="html">一直对Stellarium的星表文件充满好奇，在看了该二进制文件后不知该如何解析；在解析了从二进制文件到赤经赤纬表之后，推导从赤经赤纬前向到</summary>
    
    
    
    <category term="星表" scheme="https://tsuiwade.github.io/categories/%E6%98%9F%E8%A1%A8/"/>
    
    
    <category term="星表" scheme="https://tsuiwade.github.io/tags/%E6%98%9F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>赤道坐标转为地平坐标</title>
    <link href="https://tsuiwade.github.io/2022/03/07/blog42-Equatorial2Horizontal/"/>
    <id>https://tsuiwade.github.io/2022/03/07/blog42-Equatorial2Horizontal/</id>
    <published>2022-03-07T20:14:46.000Z</published>
    <updated>2022-03-07T20:14:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>地平坐标系统是：<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%9D%90%E6%A8%99%E7%B3%BB">https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%9D%90%E6%A8%99%E7%B3%BB</a></p><ul><li>高度角（Altitude, Alt）或仰角又称<a href="https://zh.wikipedia.org/wiki/天球坐标系统">地平纬度</a>，是天体和观测者所在地的地平线的夹角，有时就称为<a href="https://zh.wikipedia.org/wiki/相对高度">高度</a>或<a href="https://zh.wikipedia.org/wiki/海拔">海拔</a>标高（elevation, geometric height）。</li><li><a href="https://zh.wikipedia.org/wiki/方位角">方位角</a>（Azimuth, Az）又称地平经度，是沿着地平线测量的角度（由正北方为起点向东方测量）。</li></ul><p><strong>sin高度 = sin地球观察者纬度 <em> sin赤纬 + cos地球观察者纬度 </em> cos赤纬 * cos时角</strong></p><p><strong>cos方位 <em> cos高度 = - cos地球观察者纬度 </em> sin赤纬 + sin地球观察者纬度 <em> cos赤纬 </em> cos时角</strong></p><p><strong>sin方位 <em> cos高度 = cos赤纬 </em> sin 时角</strong></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307203646304.png" alt="image-20220307203646304"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307210913618.png" alt="image-20220307210913618"></p><p><a href="https://encyclopedia.thefreedictionary.com/Astronomical+coordinate+systems">https://encyclopedia.thefreedictionary.com/Astronomical+coordinate+systems</a></p><hr><p>《地平式望远镜轴系误差对指向精度和跟踪精度的影响》</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307201531562.png" alt="image-20220307201531562"></p><hr><p><a href="https://mooncaker816.github.io/2018/05/19/%E5%A4%A9%E6%96%87%E7%AE%97%E6%B3%9511/">https://mooncaker816.github.io/2018/05/19/%E5%A4%A9%E6%96%87%E7%AE%97%E6%B3%9511/</a></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307202417544.png" alt="image-20220307202417544"></p><p>//    A: azimuth方位角<br>//    h: elevation仰角<br>//    φ: latitude of observer on Earth观测纬度<br>//    ψ: longitude of observer on Earth观测经度<br>//    st: sidereal time at Greenwich at time of observation.恒星时</p><p>//    α: right ascension赤经（时角）<br>//    δ: declination赤纬</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307202425679.png" alt="image-20220307202425679"></p><p>//    α: right ascension coordinate to transform<br>//    δ: declination coordinate to transform<br>//    φ: latitude of observer on Earth 地球上观察者的纬度<br>//    ψ: longitude of observer on Earth 地球上观察者的经度<br>//    st: sidereal time at Greenwich at time of observation. 格林威治观测时的恒星时间。</p><p>//    A: azimuth of observed point, measured westward from the South.<br>//    h: elevation, or height of observed point above horizon.</p><hr><p>知乎 <a href="https://zhuanlan.zhihu.com/p/97325585">https://zhuanlan.zhihu.com/p/97325585</a></p><hr><p><em><code>UTC时间</code></em>(世界协调时间,UTC + 00:00)转北京(北京,UTC + 8:00)时间. 世界时钟, 时间转换, 计算与对照表.</p><p>一个地方的当地<code>恒星时</code>与<a href="https://baike.baidu.com/item/格林尼治天文台">格林尼治天文台</a>的恒星时之间的差就是这个地方的经度（参见天体导航）。因此通过观测恒星时可以确定当地的经度（假如格林尼治天文台的恒星时已知的话）或者可以确定时间（假如当地的经度已知的话）。</p><ul><li>一颗恒星的时角<em>t</em>、它的赤经<em>α</em>和当地的恒星时<em>θ</em>之间的关系为<em>t</em>=<em>θ</em>-<em>α</em></li><li>当地的恒星时等于位于<a href="https://baike.baidu.com/item/天顶">天顶</a>的恒星的赤经</li><li>当地的恒星时等于正位于<a href="https://baike.baidu.com/item/中天">中天</a>恒星的赤经</li></ul><p>通过确定恒星时可以简化天文学的计算，比如通过恒星时和当地的纬度可以很方便地计算出哪些星正好在地平线以上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;地平坐标系统是：&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%9D%90%E6%A8%99%E7%B3%BB&quot;&gt;https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>指向精度的研究</title>
    <link href="https://tsuiwade.github.io/2022/03/05/blog41-point-1/"/>
    <id>https://tsuiwade.github.io/2022/03/05/blog41-point-1/</id>
    <published>2022-03-05T16:36:20.000Z</published>
    <updated>2022-03-05T16:36:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然寥寥无几的引用量，但该文可能确实是我司使用的机架模型的源头。</p><p><strong>Luck J M. Mount model stability[C]//14th International Workshop on Laser Ranging Instrumentation. 2004.</strong></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306221746844.png" alt="image-20220306221746844"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306223205754.png" alt="image-20220306223205754"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306221628712.png" alt="image-20220306221628712"></p><hr><p><strong>朱庆生, 陈伟民, 吴金虎. 卫星激光测距望远镜的指向改正[J]. 天文研究与技术: 国家天文台台刊, 2011, 8(3): 268-271.</strong></p><p>常用的指向误差模型有球谐函数模型、基本参数模型、机架模型等。球谐函数模型是对以球面为基准面的误差进行拟合，可以用于任何机架形式的望远镜，但其表达式的各项没有物理意义，模型不稳定，每次重测数据后，求得的模型参数变化极大。基本参数模型的模型参数有实际物理意义，参数之间相关性小，模型比较稳定，但需根据望远镜的机架形式，设计不同的模型，而且考虑的参数项比较少，有时会影响改正的精度。机架模型也有人称为转台模型，目前常用于地平式机架，通过对望远镜机架进行全面分析得出的模型，共有 23 项，每一项都有具体的物理意义。它是对基本参数模型的扩展，因此精度更高，模型的逼近能力强于基本参数模型，缺点是没有基本参数模型稳定。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306103515401.png" alt="image-20220306103515401"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306104049068.png" alt="image-20220306104049068"></p><p><img src="C:\Users\hp\AppData\Roaming\Typora\typora-user-images\image-20220306222049071.png" alt="image-20220306222049071"></p><hr><hr><p><strong>严灵杰. 光电望远镜视轴指向及预测技术研究[J]. 成都: 中国科学院光电技术研究所, 2019, 1.</strong></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220306110849188.png" alt="image-20220306110849188"></p><hr><p>张涯辉, 罗一涵, 徐伟峰, 等. 采用加权最小二乘法的恒星校正研究[J]. 光电工程, 2014, 41(5): 7-11. 用了该方法</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307213741142.png" alt="image-20220307213741142"></p><hr><p>张玉碟, 柳万胜, 罗一涵, 等. 一种三轴光电跟踪系统指向误差修正的方法[J]. 光电工程, 2014, 41(6): 51-55.</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307214621476.png" alt="image-20220307214621476"></p>]]></content>
    
    
    <summary type="html">一直想对我司使用的指向模型进行溯源研究</summary>
    
    
    
    <category term="指向模型" scheme="https://tsuiwade.github.io/categories/%E6%8C%87%E5%90%91%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="指向模型" scheme="https://tsuiwade.github.io/tags/%E6%8C%87%E5%90%91%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>视场与赤经范围的关系</title>
    <link href="https://tsuiwade.github.io/2022/03/03/blog40-guide-Sel-4-raROV/"/>
    <id>https://tsuiwade.github.io/2022/03/03/blog40-guide-Sel-4-raROV/</id>
    <published>2022-03-03T23:37:17.000Z</published>
    <updated>2022-03-03T23:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>球面三角学</p><p><a href="https://mathworld.wolfram.com/SphericalTrigonometry.html">https://mathworld.wolfram.com/SphericalTrigonometry.html</a></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220304202743522.png" alt="image-20220304202743522"></p><hr><p>《一种快速搜索导航星表的方法》</p><p><a href="https://patentimages.storage.googleapis.com/36/8b/67/874c0824e15854/CN101995248B.pdf">https://patentimages.storage.googleapis.com/36/8b/67/874c0824e15854/CN101995248B.pdf</a></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303233833640.png" alt="image-20220303233833640"></p><p>还是不明白为什么是正切公式</p><hr><p><strong>王海涌, 徐皓. 一种星敏感器导航星筛选算法[J]. 激光与光电子学进展, 2021, 58(1): 0135001.</strong></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220304142358967.png" alt="image-20220304142358967"></p><p><a href="https://web.math.sinica.edu.tw/math_media/d281/28104.pdf">https://web.math.sinica.edu.tw/math_media/d281/28104.pdf</a></p><p><a href="https://mathworld.wolfram.com/SphericalTrigonometry.html">https://mathworld.wolfram.com/SphericalTrigonometry.html</a></p><p>中提到球面三角正弦公式</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220304151000732.png" alt="image-20220304151000732"></p><hr><p>《16mv精细导星星库构建与评价》</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301210751502.png" alt="image-20220301210751502"></p><hr><p>《<a href="http://geotech.chinaxiv.org/user/download.htm?id=6065">基于坐标系转换与QTM 编码的天球面探测覆盖栅格化分析方法研究</a>》</p><p>矩形锥视场</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220305100713620.png" alt="image-20220305100713620"></p><p>圆锥视场</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220305100740048.png" alt="image-20220305100740048"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;球面三角学&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mathworld.wolfram.com/SphericalTrigonometry.html&quot;&gt;https://mathworld.wolfram.com/SphericalTrigonometry.html&lt;</summary>
      
    
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/categories/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/tags/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>K-vector算法</title>
    <link href="https://tsuiwade.github.io/2022/03/02/blog39-guideSel-3/"/>
    <id>https://tsuiwade.github.io/2022/03/02/blog39-guideSel-3/</id>
    <published>2022-03-02T21:21:40.000Z</published>
    <updated>2022-03-02T21:21:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文《Search-less algorithm for star pattern recognition》</p><p><a href="https://link.springer.com/content/pdf/10.1007/BF03546375.pdf">https://link.springer.com/content/pdf/10.1007/BF03546375.pdf</a> 引用数129</p><p>K矢量查找法</p><p>中文论文《基于导航星域和K矢量的快速星图识别算法》</p><p>《一种改进的基于Ｋ 矢量的星图识别算法》</p><hr><p>《基于导航星域和K矢量的快速星图识别算法》</p><p>假设待排序的值为0.01到0.99，共有83363个数值，数列平均递增。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all ;close all;</span><br><span class="line">n = <span class="number">83363</span>;</span><br><span class="line">data=<span class="built_in">linspace</span>(<span class="number">0.01</span>,<span class="number">0.99</span>,<span class="number">83363</span>);</span><br><span class="line">D = (data(n)-data(<span class="number">1</span>))/(n<span class="number">-1</span>);</span><br><span class="line">a1 = n*D/(n<span class="number">-1</span>);</span><br><span class="line">a0 = data(<span class="number">1</span>) - a1 -D/<span class="number">2</span>;</span><br><span class="line">k = <span class="number">1</span>: n;</span><br><span class="line">costhe = a1 .* k + a0;</span><br><span class="line">K=[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scatter</span>(k,data,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">scatter</span>(k,costhe,<span class="string">&#x27;r&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303085357833.png" alt="image-20220303085357833"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303085450014.png" alt="image-20220303085450014"></p><p>搭建完毕，现在开始使用。</p><p>假定范围为（0.55,0.59），假设theta=0.57，delta=0.02</p><p>ib=45935</p><p>it=49338</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all ;close all;</span><br><span class="line">tic</span><br><span class="line">n = <span class="number">83363</span>;</span><br><span class="line">data=<span class="built_in">linspace</span>(<span class="number">0.01</span>,<span class="number">0.99</span>,<span class="number">83363</span>);</span><br><span class="line">D = (data(n)-data(<span class="number">1</span>))/(n<span class="number">-1</span>);</span><br><span class="line">a1 = n*D/(n<span class="number">-1</span>);</span><br><span class="line">a0 = data(<span class="number">1</span>) - a1 -D/<span class="number">2</span>;</span><br><span class="line">k = <span class="number">1</span>: n;</span><br><span class="line">costhe = a1 .* k + a0;</span><br><span class="line">K(<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">2</span>:n</span><br><span class="line">    K(<span class="built_in">j</span>) = sum(sum(data &lt; costhe(<span class="built_in">j</span>)));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ib = <span class="built_in">fix</span>((<span class="number">0.59</span>-a0)/a1);</span><br><span class="line">it = <span class="built_in">fix</span>((<span class="number">0.55</span>-a0)/a1)+<span class="number">1</span>;</span><br><span class="line">kstart = K(ib) +<span class="number">1</span> ;</span><br><span class="line">kend = K(it) +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>kstar=45936</p><p>kend=49339</p><p>历时 5.060949 秒。</p><hr><p>《一种改进的基于Ｋ 矢量的星图识别算法》</p><p>提到了该方法有问题</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303171127111.png" alt="image-20220303171127111"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303213921527.png" alt="image-20220303213921527"></p>]]></content>
    
    
    <summary type="html">本文研究K-vector搜索算法</summary>
    
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/categories/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/tags/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>均匀性-玻尔兹曼熵</title>
    <link href="https://tsuiwade.github.io/2022/02/28/blog38-guideSel-2/"/>
    <id>https://tsuiwade.github.io/2022/02/28/blog38-guideSel-2/</id>
    <published>2022-02-28T11:04:22.000Z</published>
    <updated>2022-02-28T11:04:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在多篇文章中提到玻尔兹曼熵来表征评价均匀性（还有各分区内的星数标准差）。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220228111816120.png" alt="image-20220228111816120"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301160342968.png" alt="image-20220301160342968"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301211333236.png" alt="image-20220301211333236"></p><h2 id="多尺度像面分割《CN201510107562-0-用于星敏感器的筛选导航星的方法》"><a href="#多尺度像面分割《CN201510107562-0-用于星敏感器的筛选导航星的方法》" class="headerlink" title="多尺度像面分割《CN201510107562.0-用于星敏感器的筛选导航星的方法》"></a>多尺度像面分割《CN201510107562.0-用于星敏感器的筛选导航星的方法》</h2><h3 id="玻尔兹曼熵《Boltzmann-entropy-based-guide-star-selection-algorithm-for-star-tracker》2005"><a href="#玻尔兹曼熵《Boltzmann-entropy-based-guide-star-selection-algorithm-for-star-tracker》2005" class="headerlink" title="玻尔兹曼熵《Boltzmann entropy-based guide star selection algorithm for star tracker》2005"></a>玻尔兹曼熵《Boltzmann entropy-based guide star selection algorithm for star tracker》2005</h3><h2 id="正交网格法《A-general-method-of-the-automatical-selection-of-guide-star》"><a href="#正交网格法《A-general-method-of-the-automatical-selection-of-guide-star》" class="headerlink" title="正交网格法《A general method of the automatical selection of guide star》"></a>正交网格法《A general method of the automatical selection of guide star》</h2><p>用到uniformity的计算</p><h3 id="均匀性计算《Star-trackers-star-catalogs-and-attitude-determination-Probabilistic-aspects-of-system-design》1993"><a href="#均匀性计算《Star-trackers-star-catalogs-and-attitude-determination-Probabilistic-aspects-of-system-design》1993" class="headerlink" title="均匀性计算《Star trackers, star catalogs, and attitude determination-Probabilistic aspects of system design》1993"></a>均匀性计算《Star trackers, star catalogs, and attitude determination-Probabilistic aspects of system design》1993</h3><h4 id="《基于螺旋基准点的导航星选取方法》"><a href="#《基于螺旋基准点的导航星选取方法》" class="headerlink" title="《基于螺旋基准点的导航星选取方法》"></a>《基于螺旋基准点的导航星选取方法》</h4><p>均匀性很好</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220302143041244.png" alt="image-20220302143041244"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220302151757196.png" alt="image-20220302151757196"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all ;close all;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">sphere(<span class="number">50</span>);</span><br><span class="line">alpha(<span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on ;</span><br><span class="line"></span><br><span class="line">z=[];</span><br><span class="line">theta=[];</span><br><span class="line">fai=[];</span><br><span class="line"></span><br><span class="line">n = <span class="number">30</span>;</span><br><span class="line">k = <span class="number">0</span>:n<span class="number">-1</span>;</span><br><span class="line">z = <span class="number">1</span>-(<span class="number">2</span>*k+<span class="number">1</span>)/n;</span><br><span class="line">theta=<span class="built_in">acos</span>(z);</span><br><span class="line">fai=<span class="built_in">sqrt</span>(n*<span class="built_in">pi</span>).*theta;</span><br><span class="line">x = <span class="built_in">sin</span>(theta).*<span class="built_in">cos</span>(fai);</span><br><span class="line">y = <span class="built_in">sin</span>(theta).*<span class="built_in">sin</span>(fai);</span><br><span class="line">A = [x.&#x27;, y.&#x27; ,z.&#x27;];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(A)<span class="number">-1</span> </span><br><span class="line">    delta(<span class="built_in">i</span>,:) = <span class="built_in">acosd</span>(A(<span class="built_in">i</span>,:)*A(<span class="built_in">i</span>+<span class="number">1</span>,:).&#x27;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">mean</span> = <span class="built_in">mean</span>(delta);</span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter3</span>(x,y,z,<span class="string">&#x27;filled&#x27;</span>);</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z,<span class="string">&#x27;r-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">1.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">1.1</span>,<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.1</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,A(<span class="number">2</span>,<span class="number">1</span>),A(<span class="number">2</span>,<span class="number">2</span>),A(<span class="number">2</span>,<span class="number">3</span>),<span class="number">1</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">s=<span class="number">20</span>;</span><br><span class="line">xmin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">1</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>);</span><br><span class="line">xmax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">1</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>);</span><br><span class="line">ymin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">2</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">2</span>)^<span class="number">2</span>);</span><br><span class="line">ymax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">2</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">2</span>)^<span class="number">2</span>);</span><br><span class="line">zmin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">3</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">3</span>)^<span class="number">2</span>);</span><br><span class="line">zmax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">3</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">3</span>)^<span class="number">2</span>);</span><br><span class="line">                     </span><br><span class="line">plotcube([xmax-xmin ymax-ymin zmax-zmin],[ xmin  ymin  zmin],<span class="number">.8</span>,[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">view(<span class="number">-30</span>,<span class="number">10</span>)</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220320155757356.png" alt="image-20220320155757356"></p><hr><p>后来我又看到 <a href="https://zhuanlan.zhihu.com/p/25988652?group_id=828963677192491008">https://zhuanlan.zhihu.com/p/25988652?group_id=828963677192491008</a> <strong>菲波那契网格</strong></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all ;close all;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">sphere(<span class="number">50</span>);</span><br><span class="line">axis equal;</span><br><span class="line">alpha(<span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on ;</span><br><span class="line"></span><br><span class="line">n = <span class="number">30</span>;</span><br><span class="line">k = <span class="number">1</span>:n;</span><br><span class="line">c = (<span class="built_in">sqrt</span>(<span class="number">5</span>)<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">z = (<span class="number">2</span>*k<span class="number">-1</span>)/n - <span class="number">1</span>;</span><br><span class="line">x = <span class="built_in">sqrt</span>(<span class="number">1</span>-z.^<span class="number">2</span>).*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>.*k*c);</span><br><span class="line">y = <span class="built_in">sqrt</span>(<span class="number">1</span>-z.^<span class="number">2</span>).*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>.*k*c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter3</span>(x,y,z);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [x.&#x27;, y.&#x27; ,z.&#x27;];</span><br><span class="line"></span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220320160017779.png" alt="image-20220320160017779"></p><p>效果并不好</p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220321101324772.png" alt="image-20220321101324772"></p><hr><p>阿基米德螺旋线</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220320105605922.png" alt="image-20220320105605922"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all; close all;</span><br><span class="line">a=<span class="number">0</span>;<span class="comment">%起始位置</span></span><br><span class="line">b=<span class="number">3</span>;<span class="comment">%螺线间距参数</span></span><br><span class="line">theta = <span class="number">0</span>:<span class="number">0.05</span>*<span class="built_in">pi</span>:<span class="number">10</span>*<span class="built_in">pi</span>;<span class="comment">%θ的范围和步长，同时也可以控制螺线的旋转方向</span></span><br><span class="line">coe=a+b*theta;<span class="comment">%阿基米德螺线方程</span></span><br><span class="line">x = (coe.*<span class="built_in">cos</span>(theta));<span class="comment">%因使用需要，获取直角坐标系下x轴的坐标并进行四舍五入</span></span><br><span class="line">y = (coe.*<span class="built_in">sin</span>(theta));<span class="comment">%因使用需要，获取直角坐标系下y轴的坐标并进行四舍五入</span></span><br><span class="line">r = <span class="built_in">pi</span>*b;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> :<span class="built_in">length</span>(x)</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line">    rectangle(<span class="string">&#x27;Position&#x27;</span>,[x(<span class="built_in">i</span>)-r,y(<span class="built_in">i</span>)-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;Curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;c&#x27;</span>);<span class="comment">%将获取的坐标打印在图纸上</span></span><br><span class="line">xt=x&#x27;;<span class="comment">%将x轴数据转置成列，便于导出使用</span></span><br><span class="line">yt=y&#x27;;<span class="comment">%将y周数据转置成列，便于导出使用</span></span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220307114759208.png" alt="image-20220307114759208"></p><p>弧长公式 <a href="https://www.zhihu.com/question/27384632">https://www.zhihu.com/question/27384632</a></p><h4 id="《均匀快速的导航星选取方法》"><a href="#《均匀快速的导航星选取方法》" class="headerlink" title="《均匀快速的导航星选取方法》"></a>《均匀快速的导航星选取方法》</h4><p>在赤纬带平分点，矩形范围的代码见下。（两角和余弦公式）</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220302200145394.png" alt="image-20220302200145394"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220302211206988.png" alt="image-20220302211206988"></p><h4 id="《16mv精细导星星库构建与评价》"><a href="#《16mv精细导星星库构建与评价》" class="headerlink" title="《16mv精细导星星库构建与评价》"></a>《16mv精细导星星库构建与评价》</h4><p>分区后取最亮几个。</p><p>国内研究构建星库的方法主要分为两类:第一类从星表划分角度出发,通过不同的划分方式进行导星筛选,现有的星表划分方法主要有赤纬带法、圆锥法、球矩形法、内接正方体法等;第二类从局部天区出发,主要包括回归筛星法、星等加权算法等。</p><p>评价标准：完备性 、均匀性和冗余性。（均匀性、速度、多于3个星的分区数概率）</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301210751502.png" alt="image-20220301210751502"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301210838500.png" alt="image-20220301210838500"></p><h4 id="《适用于小视场星敏感器的导航星表构建方法》"><a href="#《适用于小视场星敏感器的导航星表构建方法》" class="headerlink" title="《适用于小视场星敏感器的导航星表构建方法》"></a>《适用于小视场星敏感器的导航星表构建方法》</h4><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220303214512056.png" alt="image-20220303214512056"></p><hr><p>在1993年的均匀性计算文章中提到这一计算方法</p><p>总体均匀性计算方法：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220228225805510.png" alt="image-20220228225805510"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220228225835383.png" alt="image-20220228225835383"></p><p>局部均匀性计算方法：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220304094711632.png" alt="image-20220304094711632"></p><hr><p>以上一篇《基于星座聚类的星敏感器导航星优选算法研究》为例，</p><p>所有4908个点的全局均匀性为</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% boltzmannEntropy.m</span></span><br><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">profile on</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line">A  =  [  <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(:,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(:,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(:,<span class="number">3</span>))  ];</span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line"></span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>newmatrix =</p><p>​    0.2799   -0.0070    0.0483<br>   -0.0070    0.3631    0.0007<br>​    0.0483    0.0007    0.3570</p><p>eigen =</p><p>​    0.2562<br>​    0.3632<br>​    0.3805</p><p>ans =</p><p>​    0.0142</p><p>均匀化后 得到39个点 data=</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">profile on</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line">bandwidth = <span class="number">0</span>;</span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line"><span class="comment">% : = 1:end;</span></span><br><span class="line">data =  [  <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(:,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(:,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(:,<span class="number">3</span>))  ];</span><br><span class="line"></span><br><span class="line">x=data&#x27;;</span><br><span class="line"></span><br><span class="line">tic</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data)&gt;<span class="number">150</span></span><br><span class="line">    bandwidth = bandwidth + <span class="number">0.1</span>;</span><br><span class="line">        [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">length</span>(<span class="built_in">find</span>(point2cluster==mode(point2cluster)))&gt;<span class="number">1</span>)</span><br><span class="line">            [val,idx]=<span class="built_in">min</span>(dist(clustCent(:,mode(point2cluster)).&#x27;,data.&#x27;))   ;</span><br><span class="line">            data(idx,:)=[];</span><br><span class="line">            x(:,idx)=[];</span><br><span class="line">            [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>),clf,<span class="built_in">hold</span> on;axis equal</span><br><span class="line">cVec = <span class="string">&#x27;bgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmyk&#x27;</span>;<span class="comment">%, cVec = [cVec cVec];</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">min</span>(numClust,<span class="built_in">length</span>(cVec))</span><br><span class="line">    myMembers = clustMembsCell&#123;k&#125;;</span><br><span class="line">    myClustCen = clustCent(:,k);</span><br><span class="line">    <span class="built_in">plot</span>(x(<span class="number">2</span>,myMembers),x(<span class="number">1</span>,myMembers),[cVec(k) <span class="string">&#x27;.&#x27;</span>]);</span><br><span class="line">    <span class="built_in">plot</span>(myClustCen(<span class="number">2</span>),myClustCen(<span class="number">1</span>),<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,cVec(k), <span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">title([<span class="string">&#x27;no shifting, numClust:&#x27;</span> int2str(numClust)])</span><br><span class="line"><span class="built_in">hold</span> on </span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">sphere(<span class="number">50</span>);</span><br><span class="line">alpha(<span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on ;</span><br><span class="line"><span class="built_in">scatter3</span>(data(:,<span class="number">1</span>),data(:,<span class="number">2</span>),data(:,<span class="number">3</span>),<span class="string">&#x27;filled&#x27;</span>);</span><br><span class="line">view(<span class="number">-30</span>,<span class="number">10</span>)</span><br><span class="line">axis equal</span><br><span class="line"></span><br><span class="line">A  =  data;</span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line"></span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>0.721096202739022    0.143274305623194    -0.677858937938827<br>0.968970810392417    0.208978537391637    0.131998255735122<br>0.569826352357379    0.276879108656515    0.773715637265177<br>0.228610689351435    0.164381998103028    -0.959539322494872<br>0.680467391588214    0.574452415904999    0.454937963733565<br>0.755501580234282    0.652710692710075    0.0564456719814448<br>0.504277122250002    0.768039960865827    -0.394739410863010<br>0.154912237007631    0.405692531666614    0.900786194707282<br>0.210384928706513    0.600544339596624    -0.771417317637872<br>0.143977198200687    0.816855223274374    0.558585813109905<br>-0.229099414143074    0.950795223816936    -0.208571092930452<br>-0.282616508078908    0.919125613504918    0.274474071563222<br>-0.273028245935124    0.599816587126275    0.752114112837791<br>-0.384654835774312    0.742153343311259    -0.548861614915233<br>-0.256254169146301    0.406094432070341    -0.877166525259945<br>-0.739931959521445    0.571829210408285    -0.354276797719793<br>-0.806338802865188    0.579353885367924    0.119024411374415<br>-0.760075452992603    0.337837739926240    0.555113472399671<br>-0.487550601625308    0.150466743789691    0.860031493532724<br>-0.987416677336434    0.156220148544471    0.0245676719820876<br>-0.898581139351745    -0.0465144783456416    0.436335122704501<br>-0.374139568095630    -0.0287413085026819    -0.926926923101692<br>-0.963578273457490    -0.260891712855464    -0.0587573406820316<br>-0.799916216534544    -0.556325600463240    0.225024160467884<br>-0.732478694296601    -0.536144597346316    -0.419552062487963<br>-0.478334336301847    -0.740621679799566    0.471885356973005<br>-0.194005559456996    -0.435699798511738    0.878935451826020<br>-0.314232785230549    -0.886073947077770    -0.340779572445699<br>-0.00720050076528926    -0.0591052787344646    0.998225785488659<br>-0.0490019433066575    -0.732931424546231    -0.678535434936750<br>0.0801942976395903    -0.872038194549829    0.482823220104800<br>0.368597406332163    -0.929570349282381    0.00590912685900466<br>0.323982389195822    -0.553545295684837    0.767217711680429<br>0.514345456211916    -0.579655346834382    -0.632019327679517<br>0.827337679920563    -0.510494571429276    -0.234323827053289<br>0.448212896485379    -0.212583754752496    -0.868281835949317<br>0.964675223452813    -0.215965114222275    0.150866771342216<br>0.724877321462857    -0.104703930494290    0.680874405281827<br>0.927771336185871    -0.108671846203537    -0.356974477511487</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301152248993.png" alt="image-20220301152248993"></p><p>newmatrix =</p><p>​    0.3527   -0.0057   -0.0221<br>   -0.0057    0.3007    0.0039<br>   -0.0221    0.0039    0.3466</p><p>eigen =</p><p>​    0.3001<br>​    0.3273<br>​    0.3726</p><p>ans =</p><p>​    0.0040</p><p>均匀性不错。</p><p>又做一次实验</p><p>newmatrix =<br>    0.3364   -0.0062   -0.0127<br>   -0.0062    0.3195    0.0007<br>   -0.0127    0.0007    0.3441</p><p>eigen =<br>    0.3169<br>    0.3290<br>    0.3541</p><p>ans =<br>    0.0011</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301165031830.png" alt="image-20220301165031830"></p><p>随机选取39个点</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear;close all;</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line">star_data_xyz(:,<span class="number">1</span>) = <span class="built_in">cos</span>(star_data(:,<span class="number">2</span>) * <span class="built_in">pi</span> / <span class="number">180</span>) .* <span class="built_in">cos</span>(star_data(:,<span class="number">3</span>) * <span class="built_in">pi</span> / <span class="number">180</span>);</span><br><span class="line">star_data_xyz(:,<span class="number">2</span>) = <span class="built_in">sin</span>(star_data(:,<span class="number">2</span>) * <span class="built_in">pi</span> / <span class="number">180</span>) .* <span class="built_in">cos</span>(star_data(:,<span class="number">3</span>) * <span class="built_in">pi</span> / <span class="number">180</span>);</span><br><span class="line">star_data_xyz(:,<span class="number">3</span>) = <span class="built_in">sin</span>(star_data(:,<span class="number">3</span>) * <span class="built_in">pi</span> / <span class="number">180</span>);</span><br><span class="line">A = star_data_xyz(randperm(<span class="built_in">length</span>(star_data_xyz), <span class="number">39</span>),:)</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">scatter3</span>(star_data_xyz(:,<span class="number">1</span>),star_data_xyz(:,<span class="number">2</span>),star_data_xyz(:,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line">sphere(<span class="number">50</span>);</span><br><span class="line">alpha(<span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on ;</span><br><span class="line"><span class="built_in">scatter3</span>(A(:,<span class="number">1</span>),A(:,<span class="number">2</span>),A(:,<span class="number">3</span>),<span class="string">&#x27;filled&#x27;</span>);</span><br><span class="line">view(<span class="number">-30</span>,<span class="number">10</span>)</span><br><span class="line">axis equal</span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure><p>newmatrix =<br>    0.3068   -0.0422    0.0801<br>   -0.0422    0.3637   -0.0381<br>    0.0801   -0.0381    0.3295</p><p>eigen =<br>    0.2368<br>    0.3226<br>    0.4406</p><p>ans =<br>    0.0314</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301161540597.png" alt="image-20220301161540597"></p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 矩形范围</span></span><br><span class="line">clear all ;close all;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">sphere(<span class="number">50</span>);</span><br><span class="line">alpha(<span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">hold</span> on ;</span><br><span class="line"></span><br><span class="line">z=[];</span><br><span class="line">theta=[];</span><br><span class="line">fai=[];</span><br><span class="line"></span><br><span class="line">n = <span class="number">30</span>;</span><br><span class="line">k = <span class="number">0</span>:n<span class="number">-1</span>;</span><br><span class="line">z = <span class="number">1</span>-(<span class="number">2</span>*k+<span class="number">1</span>)/n;</span><br><span class="line">theta=<span class="built_in">acos</span>(z);</span><br><span class="line">fai=<span class="built_in">sqrt</span>(n*<span class="built_in">pi</span>).*theta;</span><br><span class="line">x = <span class="built_in">sin</span>(theta).*<span class="built_in">cos</span>(fai);</span><br><span class="line">y = <span class="built_in">sin</span>(theta).*<span class="built_in">sin</span>(fai);</span><br><span class="line">A = [x.&#x27;, y.&#x27; ,z.&#x27;];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(A)<span class="number">-1</span> </span><br><span class="line">    delta(<span class="built_in">i</span>,:) = <span class="built_in">acosd</span>(A(<span class="built_in">i</span>,:)*A(<span class="built_in">i</span>+<span class="number">1</span>,:).&#x27;);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">mean</span> = <span class="built_in">mean</span>(delta);</span><br><span class="line">newmatrix = <span class="number">1</span>/<span class="built_in">length</span>(A).*(A.&#x27;*A)</span><br><span class="line">eigen = eig(newmatrix)</span><br><span class="line">eigen(<span class="number">1</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">1</span>)) + eigen(<span class="number">2</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">2</span>)) + eigen(<span class="number">3</span>)*<span class="built_in">log</span>(<span class="number">3</span>*eigen(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter3</span>(x,y,z,<span class="string">&#x27;filled&#x27;</span>);</span><br><span class="line"><span class="built_in">plot3</span>(x,y,z,<span class="string">&#x27;r-&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">1.1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">1.1</span>,<span class="number">0</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">text(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.1</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">14</span>);</span><br><span class="line">quiver3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,A(<span class="number">2</span>,<span class="number">1</span>),A(<span class="number">2</span>,<span class="number">2</span>),A(<span class="number">2</span>,<span class="number">3</span>),<span class="number">1</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">s=<span class="number">20</span>;</span><br><span class="line">xmin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">1</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>);</span><br><span class="line">xmax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">1</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>);</span><br><span class="line">ymin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">2</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">2</span>)^<span class="number">2</span>);</span><br><span class="line">ymax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">2</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">2</span>)^<span class="number">2</span>);</span><br><span class="line">zmin = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">3</span>) - <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">3</span>)^<span class="number">2</span>);</span><br><span class="line">zmax = <span class="built_in">cosd</span>(s) * A(<span class="number">2</span>,<span class="number">3</span>) + <span class="built_in">sind</span>(s) * <span class="built_in">sqrt</span>(<span class="number">1</span>-A(<span class="number">2</span>,<span class="number">3</span>)^<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">plotcube([xmax-xmin ymax-ymin zmax-zmin],[ xmin  ymin  zmin],<span class="number">.8</span>,[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">view(<span class="number">-30</span>,<span class="number">10</span>)</span><br><span class="line">axis equal</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">接着上文求解球面上的均匀性</summary>
    
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/categories/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/tags/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>《基于星座聚类的星敏感器导航星优选算法研究》的复现</title>
    <link href="https://tsuiwade.github.io/2022/02/24/blog37-guideSel-1/"/>
    <id>https://tsuiwade.github.io/2022/02/24/blog37-guideSel-1/</id>
    <published>2022-02-24T17:20:11.000Z</published>
    <updated>2022-07-13T11:19:09.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一直对公司采用的指向模型修正过程中的选星过程很感兴趣，想知道是否有相关的文献。</p><p>的确有找到相关文献，想就此进行复现。先对下文进行复现。</p><p><code>吴峰, 朱锡芳, 相入喜, 等. 基于星座聚类的星敏感器导航星优选算法研究[J]. 微电子学与计算机, 2018, 35(3): 140-144.</code></p><p>主要涉及<code>Mean Shift</code>（均值漂移）算法</p><hr><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一般对原始星表恒星数据做星等阈值处理， 即可得到导航星星库． <code>为提高星图识别稳定性， 增强星敏感器系统性能</code>， 通常要求导航星在天球上分布均匀． 为此， 国内外许多研究人员提出了进一步筛选导航星的算法．   </p><hr><h1 id="相关文献："><a href="#相关文献：" class="headerlink" title="相关文献："></a>相关文献：</h1><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220224211251099.png" alt="image-20220224211251099"></p><hr><h1 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h1><p>通常星座区域的恒星密度高， 星座和星座之间的区域星密度低． 为此， 本文首先借鉴Mean Shift（均值漂移）算法， 提出星座聚类算法， 将视场内的恒星划分到不同的星座． 然后， 提出基于星座聚类的导航星优选算法， 通过每次选择星数最多的一个星座， 并删除离该星座中心最近的一颗恒星， 最终实现导航星的均匀分布  </p><p>Mean Shift（均值漂移）是<strong>基于密度的非参数聚类算法</strong>，其算法思想是假设不同簇类的数据集符合不同的概率密度分布，找到任一样本点<strong>密度增大的最快方向</strong>（最快方向的含义就是Mean Shift），样本密度高的区域对应于该分布的最大值，这些样本点最终会在局部密度最大值收敛，且收敛到相同局部最大值的点被认为是同一簇类的成员。（<a href="https://cloud.tencent.com/developer/article/1459530）">https://cloud.tencent.com/developer/article/1459530）</a></p><p><strong>1.核密度估计</strong></p><p>Mean Shift算法用核函数估计样本的密度，最常用的核函数是高斯核。它的工作原理是在数据集上的<strong>每一个样本点</strong>都设置一个核函数，然后对所有的核函数相加，得到数据集的核密度估计（kernel density estimation）。</p><p>假设我们有大小为n的d维数据集</p><p>如下图，我们用高斯核估计一维数据集的密度，每个样本点都设置了以该样本点为中心的高斯分布，累加所有的高斯分布，得到该数据集的密度。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220224212833039.png" alt="image-20220224212833039"></p><p>其中虚线表示每个样本点的高斯核，实线表示累加所有样本高斯核后的数据集密度。因此，我们通过高斯核来得到数据集的密度。</p><p><strong>5.图像分割</strong>示例</p><p>mean shift通过对像素空间进行聚类，达到图像分割的目的。</p><p>我们对下图进行图像分割：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220224212938640.png" alt="image-20220224212938640"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220224212952595.png" alt="image-20220224212952595"></p><h2 id="Mean-Shift算法的优缺点"><a href="#Mean-Shift算法的优缺点" class="headerlink" title="Mean Shift算法的优缺点"></a><strong>Mean Shift算法的优缺点</strong></h2><p>优点：</p><p>不需要设置簇类的个数；</p><p>可以处理任意形状的簇类；</p><p>算法只需设置带宽这一个参数，带宽影响数据集的核密度估计</p><p>算法结果稳定，不需要进行类似K均值的样本初始化</p><p>缺点：</p><p>聚类结果取决于带宽的设置，带宽设置的太小，收敛太慢，簇类个数过多；带宽设置的太大，一些簇类可能会丢失。</p><p>对于较大的特征空间，计算量非常大。</p><h2 id="图解过程"><a href="#图解过程" class="headerlink" title="图解过程"></a>图解过程</h2><p><a href="https://blog.csdn.net/google19890102/article/details/51030884">https://blog.csdn.net/google19890102/article/details/51030884</a></p><h1 id="matlab代码"><a href="#matlab代码" class="headerlink" title="matlab代码"></a>matlab代码</h1><p><a href="https://blog.csdn.net/HJ199404182515/article/details/121694298">https://blog.csdn.net/HJ199404182515/article/details/121694298</a></p><p><strong><a href="https://www.cnblogs.com/kailugaji/p/11646167.html">https://www.cnblogs.com/kailugaji/p/11646167.html</a></strong></p><p>函数代码为MeanShiftCluster.m</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[clustCent,data2cluster,cluster2dataCell]</span> = <span class="title">MeanShiftCluster</span><span class="params">(dataPts,bandWidth,plotFlag)</span></span></span><br><span class="line"><span class="comment">%perform MeanShift Clustering of data using a flat kernel</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% ---INPUT---</span></span><br><span class="line"><span class="comment">% dataPts           - input data, (numDim x numPts)</span></span><br><span class="line"><span class="comment">% bandWidth         - is bandwidth parameter (scalar)</span></span><br><span class="line"><span class="comment">% plotFlag          - display output if 2 or 3 D    (logical)</span></span><br><span class="line"><span class="comment">% ---OUTPUT---</span></span><br><span class="line"><span class="comment">% clustCent         - is locations of cluster centers (numDim x numClust)</span></span><br><span class="line"><span class="comment">% data2cluster      - for every data point which cluster it belongs to (numPts)</span></span><br><span class="line"><span class="comment">% cluster2dataCell  - for every cluster which points are in it (numClust)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Bryan Feldman 02/24/06</span></span><br><span class="line"><span class="comment">% MeanShift first appears in</span></span><br><span class="line"><span class="comment">% K. Funkunaga and L.D. Hosteler, &quot;The Estimation of the Gradient of a</span></span><br><span class="line"><span class="comment">% Density Function, with Applications in Pattern Recognition&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%*** Check input ****</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">    error(<span class="string">&#x27;no bandwidth specified&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">3</span></span><br><span class="line">    plotFlag = <span class="built_in">true</span>;</span><br><span class="line">    plotFlag = <span class="built_in">false</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%**** Initialize stuff ***</span></span><br><span class="line">[numDim,numPts] = <span class="built_in">size</span>(dataPts);</span><br><span class="line">numClust        = <span class="number">0</span>;</span><br><span class="line">bandSq          = bandWidth^<span class="number">2</span>;</span><br><span class="line">initPtInds      = <span class="number">1</span>:numPts;</span><br><span class="line">maxPos          = <span class="built_in">max</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%biggest size in each dimension</span></span><br><span class="line">minPos          = <span class="built_in">min</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%smallest size in each dimension</span></span><br><span class="line">boundBox        = maxPos-minPos;                        <span class="comment">%bounding box size</span></span><br><span class="line">sizeSpace       = norm(boundBox);                       <span class="comment">%indicator of size of data space</span></span><br><span class="line">stopThresh      = <span class="number">1e-3</span>*bandWidth;                       <span class="comment">%when mean has converged</span></span><br><span class="line">clustCent       = [];                                   <span class="comment">%center of clust</span></span><br><span class="line">beenVisitedFlag = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%track if a points been seen already</span></span><br><span class="line">numInitPts      = numPts;                               <span class="comment">%number of points to posibaly use as initilization points</span></span><br><span class="line">clusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> numInitPts</span><br><span class="line"> </span><br><span class="line">    tempInd         = <span class="built_in">ceil</span>( (numInitPts<span class="number">-1e-6</span>)*<span class="built_in">rand</span>);        <span class="comment">%pick a random seed point</span></span><br><span class="line">    stInd           = initPtInds(tempInd);                  <span class="comment">%use this point as start of mean</span></span><br><span class="line">    myMean          = dataPts(:,stInd);                     <span class="comment">% intilize mean to this points location</span></span><br><span class="line">    myMembers       = [];                                   <span class="comment">% points that will get added to this cluster                         </span></span><br><span class="line">    thisClusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                  <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>     <span class="comment">%loop untill convergence</span></span><br><span class="line">         </span><br><span class="line">        sqDistToAll = sum((<span class="built_in">repmat</span>(myMean,<span class="number">1</span>,numPts) - dataPts).^<span class="number">2</span>);    <span class="comment">%dist squared from mean to all points still active</span></span><br><span class="line">        inInds      = <span class="built_in">find</span>(sqDistToAll &lt; bandSq);                     <span class="comment">%points within bandWidth</span></span><br><span class="line">        thisClusterVotes(inInds) = thisClusterVotes(inInds)+<span class="number">1</span>;        <span class="comment">%add a vote for all the in points belonging to this cluster</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        myOldMean   = myMean;                                   <span class="comment">%save the old mean</span></span><br><span class="line">        myMean      = <span class="built_in">mean</span>(dataPts(:,inInds),<span class="number">2</span>);                <span class="comment">%compute the new mean</span></span><br><span class="line">        myMembers   = [myMembers inInds];                       <span class="comment">%add any point within bandWidth to the cluster</span></span><br><span class="line">        beenVisitedFlag(myMembers) = <span class="number">1</span>;                         <span class="comment">%mark that these points have been visited</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">%*** plot stuff ****</span></span><br><span class="line">        <span class="keyword">if</span> plotFlag</span><br><span class="line">            <span class="built_in">figure</span>(<span class="number">1</span>),clf,<span class="built_in">hold</span> on</span><br><span class="line">            <span class="keyword">if</span> numDim == <span class="number">2</span></span><br><span class="line">                <span class="built_in">plot</span>(dataPts(<span class="number">1</span>,:),dataPts(<span class="number">2</span>,:),<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="built_in">plot</span>(dataPts(<span class="number">1</span>,myMembers),dataPts(<span class="number">2</span>,myMembers),<span class="string">&#x27;ys&#x27;</span>)</span><br><span class="line">                <span class="built_in">plot</span>(myMean(<span class="number">1</span>),myMean(<span class="number">2</span>),<span class="string">&#x27;go&#x27;</span>)</span><br><span class="line">                <span class="built_in">plot</span>(myOldMean(<span class="number">1</span>),myOldMean(<span class="number">2</span>),<span class="string">&#x27;rd&#x27;</span>)</span><br><span class="line">                pause</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">%**** if mean doesn&#x27;t move much stop this cluster ***</span></span><br><span class="line">        <span class="keyword">if</span> norm(myMean-myOldMean) &lt; stopThresh</span><br><span class="line">             </span><br><span class="line">            <span class="comment">%check for merge posibilities</span></span><br><span class="line">            mergeWith = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">                distToOther = norm(myMean-clustCent(:,cN));     <span class="comment">%distance from posible new clust max to old clust max</span></span><br><span class="line">                <span class="keyword">if</span> distToOther &lt; bandWidth/<span class="number">2</span>                    <span class="comment">%if its within bandwidth/2 merge new and old</span></span><br><span class="line">                    mergeWith = cN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span> mergeWith &gt; <span class="number">0</span>    <span class="comment">% something to merge</span></span><br><span class="line">                clustCent(:,mergeWith)       = <span class="number">0.5</span>*(myMean+clustCent(:,mergeWith));              <span class="comment">%record the max as the mean of the two merged (I know biased twoards new ones)</span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;mergeWith&#125;    = unique([clustMembsCell&#123;mergeWith&#125; myMembers]);   %record which points inside</span></span><br><span class="line">                clusterVotes(mergeWith,:)    = clusterVotes(mergeWith,:) + thisClusterVotes;     <span class="comment">%add these votes to the merged cluster</span></span><br><span class="line">            <span class="keyword">else</span>    <span class="comment">%its a new cluster</span></span><br><span class="line">                numClust                    = numClust+<span class="number">1</span>;                    <span class="comment">%increment clusters</span></span><br><span class="line">                clustCent(:,numClust)       = myMean;                        <span class="comment">%record the mean </span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;numClust&#125;    = myMembers;                    %store my members</span></span><br><span class="line">                clusterVotes(numClust,:)    = thisClusterVotes;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    initPtInds      = <span class="built_in">find</span>(beenVisitedFlag == <span class="number">0</span>);           <span class="comment">%we can initialize with any of the points not yet visited</span></span><br><span class="line">    numInitPts      = <span class="built_in">length</span>(initPtInds);                   <span class="comment">%number of active points in set</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">[val,data2cluster] = <span class="built_in">max</span>(clusterVotes,[],<span class="number">1</span>);                <span class="comment">%a point belongs to the cluster with the most votes</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">%*** If they want the cluster2data cell find it for them</span></span><br><span class="line"><span class="keyword">if</span> nargout &gt; <span class="number">2</span></span><br><span class="line">    cluster2dataCell = cell(numClust,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">        myMembers = <span class="built_in">find</span>(data2cluster == cN);</span><br><span class="line">        cluster2dataCell&#123;cN&#125; = myMembers;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="number">9.32</span>   <span class="number">8.16</span>  </span><br><span class="line"><span class="number">8.45</span>    <span class="number">-4.4</span></span><br><span class="line"><span class="number">7.67</span>    <span class="number">0.73</span></span><br><span class="line"><span class="number">7.3</span>    <span class="number">-3.38</span></span><br><span class="line"><span class="number">5.72</span>  <span class="number">2.38</span></span><br><span class="line"><span class="number">5.5</span>  <span class="number">-3.7</span></span><br><span class="line"><span class="number">5.31</span>  <span class="number">-9.36</span></span><br><span class="line"><span class="number">4.31</span>  <span class="number">-5.68</span></span><br><span class="line"><span class="number">4.08</span>  <span class="number">-6.6</span></span><br><span class="line"><span class="number">2.52</span>  <span class="number">3.26</span></span><br><span class="line"><span class="number">1.24</span> <span class="number">-3.63</span></span><br><span class="line"><span class="number">0.24</span> <span class="number">7.19</span></span><br><span class="line"><span class="number">-0.45</span>  <span class="number">4.09</span></span><br><span class="line"><span class="number">-0.76</span>  <span class="number">-2.59</span></span><br><span class="line"><span class="number">-3.54</span>  <span class="number">8.17</span></span><br><span class="line"><span class="number">-4.49</span>  <span class="number">0.34</span></span><br><span class="line"><span class="number">-4.61</span>  <span class="number">9.58</span></span><br><span class="line"><span class="number">-5.76</span>  <span class="number">-6.98</span></span><br><span class="line"><span class="number">-6.55</span>  <span class="number">7.11</span></span><br><span class="line"><span class="number">-7.79</span>  <span class="number">8.99</span></span><br><span class="line"><span class="number">-9.40</span>  <span class="number">-3.37</span></span><br></pre></td></tr></table></figure><p>测试代码testMeanShift.m为</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">profile on</span><br><span class="line"> </span><br><span class="line">bandwidth = <span class="number">2</span>;</span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line">data_load=dlmread(<span class="string">&#x27;Copy_of_gauss_data.txt&#x27;</span>);</span><br><span class="line">[~,dim]=<span class="built_in">size</span>(data_load);</span><br><span class="line">data=data_load;</span><br><span class="line">x=data&#x27;;</span><br><span class="line"><span class="comment">%% 聚类</span></span><br><span class="line">tic</span><br><span class="line">[clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(x,bandwidth);</span><br><span class="line"><span class="comment">% clustCent：聚类中心 D*K, point2cluster：聚类结果 类标签, 1*N</span></span><br><span class="line">toc</span><br><span class="line"><span class="comment">%% 作图</span></span><br><span class="line">numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>),clf,<span class="built_in">hold</span> on</span><br><span class="line">cVec = <span class="string">&#x27;bgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmyk&#x27;</span>;<span class="comment">%, cVec = [cVec cVec];</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">min</span>(numClust,<span class="built_in">length</span>(cVec))</span><br><span class="line">    myMembers = clustMembsCell&#123;k&#125;;</span><br><span class="line">    myClustCen = clustCent(:,k);</span><br><span class="line"><span class="comment">%     plot(x(1,myMembers),x(2,myMembers),[cVec(k) &#x27;.&#x27;]);</span></span><br><span class="line">    <span class="built_in">plot</span>(x(<span class="number">2</span>,myMembers),x(<span class="number">1</span>,myMembers),[cVec(k) <span class="string">&#x27;.&#x27;</span>]);</span><br><span class="line">    <span class="built_in">plot</span>(myClustCen(<span class="number">2</span>),myClustCen(<span class="number">1</span>),<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,cVec(k), <span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%     plot(myClustCen(1),myClustCen(2),&#x27;o&#x27;,&#x27;MarkerEdgeColor&#x27;,&#x27;k&#x27;,&#x27;MarkerFaceColor&#x27;,cVec(k), &#x27;MarkerSize&#x27;,10)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:<span class="built_in">size</span>(data,<span class="number">1</span>)</span><br><span class="line">    text(data(<span class="built_in">j</span>,<span class="number">2</span>)+<span class="number">0.2</span>,data(<span class="built_in">j</span>,<span class="number">1</span>)<span class="number">-0.2</span>,num2str(<span class="built_in">j</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">title([<span class="string">&#x27;no shifting, numClust:&#x27;</span> int2str(numClust)])</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220225104512976.png" alt="image-20220225104512976"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220225104550867.png" alt="image-20220225104550867"></p><p>结果不唯一，有时为18类。</p><p>clustCent 2*18 为中心坐标</p><p>point2cluster 1*21 为类别</p><p>clustMembsCell =</p><p>  18×1 cell 数组</p><p>{[   19]}<br>{[   11]}<br>{[15 17]}<br>{[    3]}<br>{[   21]}<br>{[   10]}<br>{[   13]}<br>{[    1]}<br>{[   16]}<br>{[   14]}<br>{[2 4 6]}<br>{[  8 9]}<br>{[    7]}<br>{[   18]}<br>{[   12]}<br>{[    5]}<br>{[   20]}</p><p>根据文章算法修改后MeanShiftCluster.m</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220226160621431.png" alt="image-20220226160621431"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[clustCent,data2cluster,cluster2dataCell]</span> = <span class="title">MeanShiftCluster</span><span class="params">(dataPts,bandWidth,plotFlag)</span></span></span><br><span class="line"><span class="comment">%perform MeanShift Clustering of data using a flat kernel</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% ---INPUT---</span></span><br><span class="line"><span class="comment">% dataPts           - input data, (numDim x numPts)</span></span><br><span class="line"><span class="comment">% bandWidth         - is bandwidth parameter (scalar)</span></span><br><span class="line"><span class="comment">% plotFlag          - display output if 2 or 3 D    (logical)</span></span><br><span class="line"><span class="comment">% ---OUTPUT---</span></span><br><span class="line"><span class="comment">% clustCent         - is locations of cluster centers (numDim x numClust)</span></span><br><span class="line"><span class="comment">% data2cluster      - for every data point which cluster it belongs to (numPts)</span></span><br><span class="line"><span class="comment">% cluster2dataCell  - for every cluster which points are in it (numClust)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Bryan Feldman 02/24/06</span></span><br><span class="line"><span class="comment">% MeanShift first appears in</span></span><br><span class="line"><span class="comment">% K. Funkunaga and L.D. Hosteler, &quot;The Estimation of the Gradient of a</span></span><br><span class="line"><span class="comment">% Density Function, with Applications in Pattern Recognition&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%*** Check input ****</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">    error(<span class="string">&#x27;no bandwidth specified&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">3</span></span><br><span class="line">    plotFlag = <span class="built_in">true</span>;</span><br><span class="line">    plotFlag = <span class="built_in">false</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%**** Initialize stuff ***</span></span><br><span class="line">[numDim,numPts] = <span class="built_in">size</span>(dataPts);</span><br><span class="line">numClust        = <span class="number">0</span>;</span><br><span class="line">bandSq          = bandWidth^<span class="number">2</span>;</span><br><span class="line">initPtInds      = <span class="number">1</span>:numPts;</span><br><span class="line">maxPos          = <span class="built_in">max</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%biggest size in each dimension</span></span><br><span class="line">minPos          = <span class="built_in">min</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%smallest size in each dimension</span></span><br><span class="line">boundBox        = maxPos-minPos;                        <span class="comment">%bounding box size</span></span><br><span class="line">sizeSpace       = norm(boundBox);                       <span class="comment">%indicator of size of data space</span></span><br><span class="line">stopThresh      = <span class="number">1e-3</span>*bandWidth;                       <span class="comment">%when mean has converged</span></span><br><span class="line">clustCent       = [];                                   <span class="comment">%center of clust</span></span><br><span class="line">beenVisitedFlag = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%track if a points been seen already</span></span><br><span class="line">numInitPts      = numPts;                               <span class="comment">%number of points to posibaly use as initilization points</span></span><br><span class="line">clusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line">nowNum = <span class="number">1</span>;</span><br><span class="line">outCom = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> numInitPts</span><br><span class="line"></span><br><span class="line">    tempInd         = <span class="built_in">ceil</span>( (numInitPts<span class="number">-1e-6</span>)*<span class="built_in">rand</span>);        <span class="comment">%pick a random seed point</span></span><br><span class="line"><span class="comment">%     stInd           = initPtInds(tempInd);                  %use this point as start of mean</span></span><br><span class="line">    stInd           = <span class="built_in">min</span>(initPtInds);                  <span class="comment">%use this point as start of mean</span></span><br><span class="line">    myMean          = dataPts(:,stInd);                     <span class="comment">% intilize mean to this points location</span></span><br><span class="line">    myMembers       = [];                                   <span class="comment">% points that will get added to this cluster                         </span></span><br><span class="line">    thisClusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                  <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line"><span class="comment">%     beyondMe=[];</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>     <span class="comment">%loop untill convergence</span></span><br><span class="line">         </span><br><span class="line">        sqDistToAll = sum((<span class="built_in">repmat</span>(myMean,<span class="number">1</span>,numPts) - dataPts).^<span class="number">2</span>);    <span class="comment">%dist squared from mean to all points still active</span></span><br><span class="line">        inInds      = <span class="built_in">find</span>(sqDistToAll &lt; bandSq);                     <span class="comment">%points within bandWidth</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">length</span>(inInds)&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">min</span>(outCom(inInds))==<span class="number">0</span>)<span class="comment">% 2，6</span></span><br><span class="line">            beyondMe = inInds;</span><br><span class="line">            beyondMe(beyondMe == initPtInds(<span class="number">1</span>)) = [];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>))</span><br><span class="line">                thisCluster = <span class="built_in">min</span>(outCom(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>)));</span><br><span class="line">                outCom(stInd)=outCom(beyondMe(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>)));</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span> <span class="comment">% 4</span></span><br><span class="line">                outCom(stInd)=nowNum;</span><br><span class="line">                outCom(beyondMe)=nowNum;</span><br><span class="line">                nowNum = nowNum + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> <span class="built_in">length</span>(inInds)==<span class="number">1</span> <span class="comment">% 1、3、5</span></span><br><span class="line">            outCom(stInd)=nowNum;</span><br><span class="line">            nowNum = nowNum + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        thisClusterVotes(inInds) = thisClusterVotes(inInds)+<span class="number">1</span>;        <span class="comment">%add a vote for all the in points belonging to this cluster</span></span><br><span class="line">        myOldMean   = myMean;                                   <span class="comment">%save the old mean</span></span><br><span class="line">        myMean      = <span class="built_in">mean</span>(dataPts(:,inInds),<span class="number">2</span>);                <span class="comment">%compute the new mean</span></span><br><span class="line">        myMembers   = [myMembers inInds];                       <span class="comment">%add any point within bandWidth to the cluster</span></span><br><span class="line">        beenVisitedFlag(myMembers) = <span class="number">1</span>;                         <span class="comment">%mark that these points have been visited</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">%**** if mean doesn&#x27;t move much stop this cluster ***</span></span><br><span class="line">        <span class="keyword">if</span> norm(myMean-myOldMean) &lt; stopThresh</span><br><span class="line">             </span><br><span class="line">            <span class="comment">%check for merge posibilities</span></span><br><span class="line">            mergeWith = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">                distToOther = norm(myMean-clustCent(:,cN));     <span class="comment">%distance from posible new clust max to old clust max</span></span><br><span class="line">                <span class="keyword">if</span> distToOther &lt; bandWidth/<span class="number">2</span>                    <span class="comment">%if its within bandwidth/2 merge new and old</span></span><br><span class="line">                    mergeWith = cN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span> mergeWith &gt; <span class="number">0</span>    <span class="comment">% something to merge</span></span><br><span class="line">                clustCent(:,mergeWith)       = <span class="number">0.5</span>*(myMean+clustCent(:,mergeWith));              <span class="comment">%record the max as the mean of the two merged (I know biased twoards new ones)</span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;mergeWith&#125;    = unique([clustMembsCell&#123;mergeWith&#125; myMembers]);   %record which points inside</span></span><br><span class="line">                clusterVotes(mergeWith,:)    = clusterVotes(mergeWith,:) + thisClusterVotes;     <span class="comment">%add these votes to the merged cluster</span></span><br><span class="line">            <span class="keyword">else</span>    <span class="comment">%its a new cluster</span></span><br><span class="line">                numClust                    = outCom(stInd);                    <span class="comment">%increment clusters</span></span><br><span class="line">                clustCent(:,numClust)       = myMean;                        <span class="comment">%record the mean </span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;numClust&#125;    = myMembers;                    %store my members</span></span><br><span class="line">                clusterVotes(numClust,:)    = thisClusterVotes;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    initPtInds      = <span class="built_in">find</span>(beenVisitedFlag == <span class="number">0</span>);           <span class="comment">%we can initialize with any of the points not yet visited</span></span><br><span class="line">    numInitPts      = <span class="built_in">length</span>(initPtInds);                   <span class="comment">%number of active points in set</span></span><br><span class="line">    [val,data2cluster] = <span class="built_in">max</span>(clusterVotes,[],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">data2cluster = outCom;</span><br><span class="line"></span><br><span class="line"><span class="comment">%*** If they want the cluster2data cell find it for them</span></span><br><span class="line"><span class="keyword">if</span> nargout &gt; <span class="number">2</span></span><br><span class="line">    cluster2dataCell = cell(numClust,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">        myMembers = <span class="built_in">find</span>(data2cluster == cN);</span><br><span class="line">        cluster2dataCell&#123;cN&#125; = myMembers;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>outCom =</p><pre><code> 1     2     3     2     4     2     5     6     6     7     8     9    10    11    12    13    12    14    15    16    17</code></pre><p>clustCent 2*17 为中心坐标</p><p>point2cluster 1*21 为类别 1     1     3     2     4     2     5     6     6     7     8     9    10    11    12    13    12    14    15    16    17</p><p>根据文章算法修改后MeanShiftCluster.m</p><p>clustMembsCell =</p><p>  18×1 cell 数组</p><p>{[   19]}<br>{[   11]}<br>{[15 17]}<br>{[    3]}<br>{[   21]}<br>{[   10]}<br>{[   13]}<br>{[    1]}<br>{[   16]}<br>{[   14]}<br>{[2 4 6]}<br>{[  8 9]}<br>{[    7]}<br>{[   18]}<br>{[   12]}<br>{[    5]}<br>{[   20]}</p><p>经过第一轮循环，删除了第4/8/15个星。</p><p>再正式修改为MeanShiftCluster.m</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[clustCent,data2cluster,cluster2dataCell]</span> = <span class="title">MeanShiftCluster</span><span class="params">(dataPts,bandWidth,plotFlag)</span></span></span><br><span class="line"><span class="comment">%perform MeanShift Clustering of data using a flat kernel</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% ---INPUT---</span></span><br><span class="line"><span class="comment">% dataPts           - input data, (numDim x numPts)</span></span><br><span class="line"><span class="comment">% bandWidth         - is bandwidth parameter (scalar)</span></span><br><span class="line"><span class="comment">% plotFlag          - display output if 2 or 3 D    (logical)</span></span><br><span class="line"><span class="comment">% ---OUTPUT---</span></span><br><span class="line"><span class="comment">% clustCent         - is locations of cluster centers (numDim x numClust)</span></span><br><span class="line"><span class="comment">% data2cluster      - for every data point which cluster it belongs to (numPts)</span></span><br><span class="line"><span class="comment">% cluster2dataCell  - for every cluster which points are in it (numClust)</span></span><br><span class="line"><span class="comment">%</span></span><br><span class="line"><span class="comment">% Bryan Feldman 02/24/06</span></span><br><span class="line"><span class="comment">% MeanShift first appears in</span></span><br><span class="line"><span class="comment">% K. Funkunaga and L.D. Hosteler, &quot;The Estimation of the Gradient of a</span></span><br><span class="line"><span class="comment">% Density Function, with Applications in Pattern Recognition&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">%*** Check input ****</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">2</span></span><br><span class="line">    error(<span class="string">&#x27;no bandwidth specified&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">3</span></span><br><span class="line">    plotFlag = <span class="built_in">true</span>;</span><br><span class="line">    plotFlag = <span class="built_in">false</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%**** Initialize stuff ***</span></span><br><span class="line">[numDim,numPts] = <span class="built_in">size</span>(dataPts);</span><br><span class="line">numClust        = <span class="number">0</span>;</span><br><span class="line">bandSq          = bandWidth^<span class="number">2</span>;</span><br><span class="line">initPtInds      = <span class="number">1</span>:numPts;</span><br><span class="line">maxPos          = <span class="built_in">max</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%biggest size in each dimension</span></span><br><span class="line">minPos          = <span class="built_in">min</span>(dataPts,[],<span class="number">2</span>);                    <span class="comment">%smallest size in each dimension</span></span><br><span class="line">boundBox        = maxPos-minPos;                        <span class="comment">%bounding box size</span></span><br><span class="line">sizeSpace       = norm(boundBox);                       <span class="comment">%indicator of size of data space</span></span><br><span class="line">stopThresh      = <span class="number">1e-3</span>*bandWidth;                       <span class="comment">%when mean has converged</span></span><br><span class="line">clustCent       = [];                                   <span class="comment">%center of clust</span></span><br><span class="line">beenVisitedFlag = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%track if a points been seen already</span></span><br><span class="line">numInitPts      = numPts;                               <span class="comment">%number of points to posibaly use as initilization points</span></span><br><span class="line">clusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                      <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line">nowNum = <span class="number">1</span>;</span><br><span class="line">outCom = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> numInitPts</span><br><span class="line"></span><br><span class="line">    tempInd         = <span class="built_in">ceil</span>( (numInitPts<span class="number">-1e-6</span>)*<span class="built_in">rand</span>);        <span class="comment">%pick a random seed point</span></span><br><span class="line">    stInd           = initPtInds(tempInd);                  <span class="comment">%use this point as start of mean</span></span><br><span class="line">    myMean          = dataPts(:,stInd);                     <span class="comment">% intilize mean to this points location</span></span><br><span class="line">    myMembers       = [];                                   <span class="comment">% points that will get added to this cluster                         </span></span><br><span class="line">    thisClusterVotes    = <span class="built_in">zeros</span>(<span class="number">1</span>,numPts);                  <span class="comment">%used to resolve conflicts on cluster membership</span></span><br><span class="line"><span class="comment">%     beyondMe=[];</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>     <span class="comment">%loop untill convergence</span></span><br><span class="line">         </span><br><span class="line">        sqDistToAll = sum((<span class="built_in">repmat</span>(myMean,<span class="number">1</span>,numPts) - dataPts).^<span class="number">2</span>);    <span class="comment">%dist squared from mean to all points still active</span></span><br><span class="line">        inInds      = <span class="built_in">find</span>(sqDistToAll &lt; bandSq);                     <span class="comment">%points within bandWidth</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">length</span>(inInds)&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">min</span>(outCom(inInds))==<span class="number">0</span>)<span class="comment">% 2，6</span></span><br><span class="line">            beyondMe = inInds;</span><br><span class="line">            beyondMe(beyondMe == stInd) = [];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>))</span><br><span class="line">                thisCluster = <span class="built_in">min</span>(outCom(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>)));</span><br><span class="line">                outCom(stInd)=<span class="built_in">min</span>(outCom(beyondMe(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>))));</span><br><span class="line">                outCom(beyondMe)=<span class="built_in">min</span>(outCom(beyondMe(<span class="built_in">find</span>(outCom(beyondMe) &gt;<span class="number">0</span>))));</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">% 4</span></span><br><span class="line">                outCom(stInd)=nowNum;</span><br><span class="line">                outCom(beyondMe)=nowNum;</span><br><span class="line">                nowNum = nowNum + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">elseif</span> <span class="built_in">length</span>(inInds)==<span class="number">1</span> <span class="comment">% 1、3、5</span></span><br><span class="line">            outCom(stInd)=nowNum;</span><br><span class="line">            nowNum = nowNum + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        thisClusterVotes(inInds) = thisClusterVotes(inInds)+<span class="number">1</span>;        <span class="comment">%add a vote for all the in points belonging to this cluster</span></span><br><span class="line">        myOldMean   = myMean;                                   <span class="comment">%save the old mean</span></span><br><span class="line">        myMean      = <span class="built_in">mean</span>(dataPts(:,inInds),<span class="number">2</span>);                <span class="comment">%compute the new mean</span></span><br><span class="line">        myMembers   = [myMembers inInds];                       <span class="comment">%add any point within bandWidth to the cluster</span></span><br><span class="line">        beenVisitedFlag(myMembers) = <span class="number">1</span>;                         <span class="comment">%mark that these points have been visited</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">%**** if mean doesn&#x27;t move much stop this cluster ***</span></span><br><span class="line">        <span class="keyword">if</span> norm(myMean-myOldMean) &lt; stopThresh</span><br><span class="line">             </span><br><span class="line">            <span class="comment">%check for merge posibilities</span></span><br><span class="line">            mergeWith = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">                distToOther = norm(myMean-clustCent(:,cN));     <span class="comment">%distance from posible new clust max to old clust max</span></span><br><span class="line">                <span class="keyword">if</span> distToOther &lt; bandWidth/<span class="number">2</span>                    <span class="comment">%if its within bandwidth/2 merge new and old</span></span><br><span class="line">                    mergeWith = cN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span> mergeWith &gt; <span class="number">0</span>    <span class="comment">% something to merge</span></span><br><span class="line">                clustCent(:,mergeWith)       = <span class="number">0.5</span>*(myMean+clustCent(:,mergeWith));              <span class="comment">%record the max as the mean of the two merged (I know biased twoards new ones)</span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;mergeWith&#125;    = unique([clustMembsCell&#123;mergeWith&#125; myMembers]);   %record which points inside</span></span><br><span class="line">                clusterVotes(mergeWith,:)    = clusterVotes(mergeWith,:) + thisClusterVotes;     <span class="comment">%add these votes to the merged cluster</span></span><br><span class="line">            <span class="keyword">else</span>    <span class="comment">%its a new cluster</span></span><br><span class="line">                numClust                    = outCom(stInd);                    <span class="comment">%increment clusters</span></span><br><span class="line">                clustCent(:,numClust)       = myMean;                        <span class="comment">%record the mean </span></span><br><span class="line">                <span class="comment">%clustMembsCell&#123;numClust&#125;    = myMembers;                    %store my members</span></span><br><span class="line">                clusterVotes(numClust,:)    = thisClusterVotes;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    initPtInds      = <span class="built_in">find</span>(beenVisitedFlag == <span class="number">0</span>);           <span class="comment">%we can initialize with any of the points not yet visited</span></span><br><span class="line">    numInitPts      = <span class="built_in">length</span>(initPtInds);                   <span class="comment">%number of active points in set</span></span><br><span class="line">    [val,data2cluster] = <span class="built_in">max</span>(clusterVotes,[],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">data2cluster = outCom;</span><br><span class="line"></span><br><span class="line"><span class="comment">%*** If they want the cluster2data cell find it for them</span></span><br><span class="line"><span class="keyword">if</span> nargout &gt; <span class="number">2</span></span><br><span class="line">    cluster2dataCell = cell(numClust,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> cN = <span class="number">1</span>:numClust</span><br><span class="line">        myMembers = <span class="built_in">find</span>(data2cluster == cN);</span><br><span class="line">        cluster2dataCell&#123;cN&#125; = myMembers;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>testMeanShift.m为</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">profile on</span><br><span class="line"> </span><br><span class="line">bandwidth = <span class="number">2</span>;</span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line">data_load=dlmread(<span class="string">&#x27;Copy_of_gauss_data.txt&#x27;</span>);</span><br><span class="line">[~,dim]=<span class="built_in">size</span>(data_load);</span><br><span class="line">data=data_load;</span><br><span class="line">x=data&#x27;;</span><br><span class="line"><span class="comment">%% 聚类</span></span><br><span class="line">tic</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data)&gt;<span class="number">6</span></span><br><span class="line">        [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">length</span>(<span class="built_in">find</span>(point2cluster==mode(point2cluster)))&gt;<span class="number">1</span>)</span><br><span class="line">            [val,idx]=<span class="built_in">min</span>(dist(clustCent(:,mode(point2cluster)).&#x27;,data.&#x27;))   ;</span><br><span class="line">            data(idx,:)=[];</span><br><span class="line">            x(:,idx)=[];</span><br><span class="line">            [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        bandwidth = bandwidth + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>),clf,<span class="built_in">hold</span> on;axis equal</span><br><span class="line">cVec = <span class="string">&#x27;bgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmyk&#x27;</span>;<span class="comment">%, cVec = [cVec cVec];</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">min</span>(numClust,<span class="built_in">length</span>(cVec))</span><br><span class="line">    myMembers = clustMembsCell&#123;k&#125;;</span><br><span class="line">    myClustCen = clustCent(:,k);</span><br><span class="line">    <span class="built_in">plot</span>(x(<span class="number">2</span>,myMembers),x(<span class="number">1</span>,myMembers),[cVec(k) <span class="string">&#x27;.&#x27;</span>]);</span><br><span class="line">    <span class="built_in">plot</span>(myClustCen(<span class="number">2</span>),myClustCen(<span class="number">1</span>),<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,cVec(k), <span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">title([<span class="string">&#x27;no shifting, numClust:&#x27;</span> int2str(numClust)])</span><br><span class="line"><span class="built_in">hold</span> on </span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>得到不多于6个点的几个测试结果为：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220227002446282.png" alt="image-20220227002446282"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220227002502414.png" alt="image-20220227002502414"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220227002520760.png" alt="image-20220227002520760"></p><p>通常以玻尔兹曼熵评价导航星的全天球分布均匀性， 以视场内捕获恒星数的最大值、 最小值、 均值和标准差等评价局部天球分布均匀。</p><p>但我还不知道如何求解玻尔兹曼熵。（下文求解）</p><hr><p>带入星图数据（下代码有误，请看后一篇博客）</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">profile on</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line">bandwidth = <span class="number">5</span>;</span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line">data_load=dlmread(<span class="string">&#x27;Copy_of_gauss_data.txt&#x27;</span>);</span><br><span class="line">[~,dim]=<span class="built_in">size</span>(data_load);</span><br><span class="line">data = star_data(:,<span class="number">2</span>:<span class="number">3</span>);</span><br><span class="line"><span class="comment">% data = data_load(:,1:2);</span></span><br><span class="line">x=data&#x27;;</span><br><span class="line"><span class="comment">%% 聚类</span></span><br><span class="line">tic</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span>(data)&gt;<span class="number">150</span></span><br><span class="line">        [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">length</span>(<span class="built_in">find</span>(point2cluster==mode(point2cluster)))&gt;<span class="number">1</span>)</span><br><span class="line">            [val,idx]=<span class="built_in">min</span>(dist(clustCent(:,mode(point2cluster)).&#x27;,data.&#x27;))   ;</span><br><span class="line">            data(idx,:)=[];</span><br><span class="line">            x(:,idx)=[];</span><br><span class="line">            [clustCent,point2cluster,clustMembsCell] = MeanShiftCluster(data.&#x27;,bandwidth);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        numClust = <span class="built_in">length</span>(clustMembsCell);</span><br><span class="line">        bandwidth = bandwidth + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>),clf,<span class="built_in">hold</span> on;axis equal</span><br><span class="line">cVec = <span class="string">&#x27;bgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmykbgrcmyk&#x27;</span>;<span class="comment">%, cVec = [cVec cVec];</span></span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span>:<span class="built_in">min</span>(numClust,<span class="built_in">length</span>(cVec))</span><br><span class="line">    myMembers = clustMembsCell&#123;k&#125;;</span><br><span class="line">    myClustCen = clustCent(:,k);</span><br><span class="line">    <span class="built_in">plot</span>(x(<span class="number">2</span>,myMembers),x(<span class="number">1</span>,myMembers),[cVec(k) <span class="string">&#x27;.&#x27;</span>]);</span><br><span class="line">    <span class="built_in">plot</span>(myClustCen(<span class="number">2</span>),myClustCen(<span class="number">1</span>),<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,cVec(k), <span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">title([<span class="string">&#x27;no shifting, numClust:&#x27;</span> int2str(numClust)])</span><br><span class="line"><span class="built_in">hold</span> on </span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220301103413554.png" alt="image-20220301103413554"></p><p>历时 3101.811945 秒。</p>]]></content>
    
    
    <summary type="html">从本文起将开启研究导航星的筛选问题，本文首先研究 《基于星座聚类的星敏感器导航星优选算法研究》。</summary>
    
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/categories/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
    
    <category term="导航星筛选" scheme="https://tsuiwade.github.io/tags/%E5%AF%BC%E8%88%AA%E6%98%9F%E7%AD%9B%E9%80%89/"/>
    
  </entry>
  
  <entry>
    <title>星图识别5-小结验证识别、求指向、求滚转角</title>
    <link href="https://tsuiwade.github.io/2022/02/18/blog36-starId-5/"/>
    <id>https://tsuiwade.github.io/2022/02/18/blog36-starId-5/</id>
    <published>2022-02-18T16:15:53.000Z</published>
    <updated>2022-02-18T16:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结前面几个博客，首先main4.m计算出是哪些星，再带入main10.m求出滚转角。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%  main10.m</span></span><br><span class="line"></span><br><span class="line">clc;clear;close all;</span><br><span class="line">index = [<span class="number">518</span></span><br><span class="line"><span class="number">472</span></span><br><span class="line"><span class="number">537</span></span><br><span class="line"><span class="number">428</span></span><br><span class="line"><span class="number">491</span></span><br><span class="line"><span class="number">469</span></span><br><span class="line"><span class="number">482</span></span><br><span class="line"><span class="number">503</span></span><br><span class="line"><span class="number">478</span></span><br><span class="line"><span class="number">499</span></span><br><span class="line"><span class="number">547</span></span><br><span class="line"><span class="number">460</span></span><br><span class="line"><span class="number">507</span></span><br><span class="line"><span class="number">556</span></span><br><span class="line"><span class="number">447</span></span><br><span class="line"><span class="number">479</span></span><br><span class="line">];</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line"></span><br><span class="line">f = <span class="number">256</span>/(<span class="built_in">tand</span>(<span class="number">6</span>));</span><br><span class="line">A1 = xlsread(<span class="string">&#x27;D:\文献\starimage\npmcm2019b\npmcm2019-B\附件3  8幅星图相关数据\xingtu02.xls&#x27;</span>) - <span class="number">256</span>;</span><br><span class="line">xingtu1=[-A1(:,<span class="number">1</span>), A1(:,<span class="number">2</span>) ];</span><br><span class="line"></span><br><span class="line">newMatrix= [A1,<span class="built_in">repmat</span>(f,<span class="built_in">size</span>(A1,<span class="number">1</span>),<span class="number">1</span>)];</span><br><span class="line">A  =  [  <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(index,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(index,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(index,<span class="number">3</span>))  ];</span><br><span class="line">Y = [   (f  ./  (<span class="built_in">sqrt</span>(f^<span class="number">2</span> + newMatrix(<span class="number">1</span>:<span class="built_in">size</span>(index,<span class="number">1</span>),<span class="number">1</span>).^<span class="number">2</span> + newMatrix(<span class="number">1</span>:<span class="built_in">size</span>(index,<span class="number">1</span>),<span class="number">2</span>).^<span class="number">2</span>))  )];</span><br><span class="line">zhixiang = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line">E = (A*zhixiang - Y);</span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E));</span><br><span class="line"><span class="keyword">if</span>   zhixiang(<span class="number">2</span>)/<span class="built_in">sqrt</span>(<span class="number">1</span>-zhixiang(<span class="number">3</span>)^<span class="number">2</span>) &gt; <span class="number">0</span> </span><br><span class="line">    alpha=<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    alpha = <span class="number">360</span>-<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">beta</span>=<span class="built_in">asind</span>( zhixiang(<span class="number">3</span>) );</span><br><span class="line">corWorld =  [  <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(index,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(index,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(index,<span class="number">3</span>))  ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">syms a b fai;</span><br><span class="line">R = [</span><br><span class="line">-<span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">sind</span>(fai)</span><br><span class="line"> <span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)     -<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">cosd</span>(fai)</span><br><span class="line"> <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(b)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">x_ba = f .* ( R(<span class="number">1</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">1</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">1</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line">y_ba = f .* ( R(<span class="number">2</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">2</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">2</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = [diff(x_ba,a) , diff(x_ba,b) , diff(x_ba,fai)];</span><br><span class="line">B = [diff(y_ba,a) , diff(y_ba,b) , diff(y_ba,fai)];</span><br><span class="line"></span><br><span class="line">iter=[alpha;<span class="built_in">beta</span>;<span class="number">0</span>];</span><br><span class="line">times = <span class="number">10</span>;</span><br><span class="line">iterRecord = <span class="built_in">zeros</span>(<span class="number">3</span>, times);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : times</span><br><span class="line">    </span><br><span class="line">    p = [double(subs(x_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;))-xingtu1(:,<span class="number">1</span>); double(subs(y_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;)) - xingtu1(:,<span class="number">2</span>)];</span><br><span class="line">    M = [double(subs(A , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;)); double(subs(B , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;))];</span><br><span class="line">    wow = inv((M.&#x27;) * M) * (M.&#x27;)*p;</span><br><span class="line">    iter = iter - wow</span><br><span class="line">    iterRecord(:,<span class="built_in">i</span>) = iter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:times;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,iterRecord(<span class="number">3</span>,:),<span class="string">&#x27;-or&#x27;</span> , x,iterRecord(<span class="number">1</span>,:),<span class="string">&#x27;-*b&#x27;</span> , x,iterRecord(<span class="number">2</span>,:),<span class="string">&#x27;-*b&#x27;</span> ); <span class="comment">%线性，颜色，标记</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;maxp=&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">max</span>(p));</span><br><span class="line">RMS</span><br><span class="line"><span class="comment">%  最后看各点的差值p即可</span></span><br><span class="line"></span><br><span class="line">x_real = double(subs(x_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;));</span><br><span class="line">y_real = double(subs(y_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;));</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">scatter</span>(x_real,y_real,<span class="number">140</span>,<span class="string">&#x27;dk&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">scatter</span>(xingtu1(:,<span class="number">1</span>), xingtu1(:,<span class="number">2</span>), <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>);</span><br></pre></td></tr></table></figure><p>发现星图4和星图6有所偏差。</p><hr><p>针对星图1的点</p><p>1670<br>1477<br>1502<br>1631<br>1603<br>1453<br>1432<br>1492<br>1488<br>1648<br>1646<br>1566<br>1688<br>1655<br>1505</p><p>iter =</p><p>  109.6000<br>   34.5000<br>  -89.9997</p><p>maxp=<br>    0.0048  表征最大的x、y值的变差绝对值。</p><p>RMS =</p><p>   1.1755e-07</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218183202596.png" alt="image-20220218183202596"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218170719748.png" alt="image-20220218170719748"></p><hr><p>星图2</p><p>518<br>472<br>537<br>428<br>491<br>469<br>482<br>503<br>478<br>499<br>547<br>460<br>507<br>556<br>447<br>479</p><p>iter =</p><p>   43.0000<br>   18.0000<br>  -29.9994</p><p>maxp=<br>    0.0054</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218181712233.png" alt="image-20220218170548186"></p><p>修改main6.m得到上图</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218183005140.png" alt="image-20220218183005140"></p><hr><p>星图3</p><p>1864<br>1942<br>1825<br>1941<br>1943<br>1900<br>1722</p><p>iter =</p><p>  124.9771<br>   43.9942<br>  -90.0708</p><p>maxp=<br>    2.3836</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218183333607.png" alt="image-20220218183333607"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218170255850.png" alt="image-20220218170255850"></p><hr><p>星图4（指向117，-28 (后查看应该为243，-28)</p><p>3249<br>3346<br>3364<br>3275<br>3421<br>3319<br>3283<br>3370<br>3265<br>3261<br>3321<br>3309</p><p>iter =</p><p>   61.7471<br>   28.6652<br>   28.7760</p><p>maxp=<br>  441.2296</p><p>由main6看上去是旋转270得到的结果。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218225852784.png" alt="image-20220218225852784"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218171253121.png" alt="image-20220218171253121"></p><p>main8得到</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220220221305644.png" alt="image-20220220221305644"></p><p>很奇怪，明明一致。</p><p>经过 360-赤经 修改后</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222193234089.png" alt="image-20220222193234089"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222193416059.png" alt="image-20220222193416059"></p><p>iter =</p><p>  243.0000<br>  -28.0000<br>  -90.0002</p><p>RMS =</p><p>   5.8798e-08</p><hr><p>星图5</p><p>1230<br>1150<br>1017<br>1033<br>1014<br>1223<br>1008<br>1208<br>1201</p><p>iter =</p><p>   86.5836<br>   44.4766<br>  270.0121</p><p>maxp=<br>    0.0058</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218223127789.png" alt="image-20220218223127789"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218171428172.png" alt="image-20220218171428172"></p><hr><p>星图6</p><p>1670<br>1675<br>1502<br>1631<br>1655<br>1692<br>1492<br>1576<br>1646<br>1566<br>1655<br>1505</p><p>iter =</p><p>  113.7861<br>   35.4645<br>  280.3664</p><p>maxp=<br>  258.0423</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218223440442.png" alt="image-20220218223440442"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218171627300.png" alt="image-20220218171627300"></p><p>查看问题</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220220212053946.png" alt="image-20220220212053946"></p><p>逆时针旋转90度，并且参考053.pdf的F02/F05/F08无解，则圈红，猜测大致是如此。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220220181726568.png" alt="image-20220220181726568"></p><p>main6中用到了错误的点，去除错误点得到赤经赤纬为112.6，34.5</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220220192757928.png" alt="image-20220220192757928"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%  main10.m</span></span><br><span class="line"></span><br><span class="line">clc;clear;close all;</span><br><span class="line">index = [<span class="number">1670</span></span><br><span class="line"><span class="number">1675</span></span><br><span class="line"><span class="number">1502</span></span><br><span class="line"><span class="number">1631</span></span><br><span class="line"><span class="number">1655</span></span><br><span class="line"><span class="number">1692</span></span><br><span class="line"><span class="number">1492</span></span><br><span class="line"><span class="number">1576</span></span><br><span class="line"><span class="number">1646</span></span><br><span class="line"><span class="number">1566</span></span><br><span class="line"><span class="number">1655</span></span><br><span class="line"><span class="number">1505</span></span><br><span class="line">];</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line"></span><br><span class="line">f = <span class="number">256</span>/(<span class="built_in">tand</span>(<span class="number">6</span>));</span><br><span class="line">A1 = xlsread(<span class="string">&#x27;D:\文献\starimage\npmcm2019b\npmcm2019-B\附件3  8幅星图相关数据\xingtu06.xls&#x27;</span>) - <span class="number">256</span>;</span><br><span class="line">xingtu1=[-A1(:,<span class="number">1</span>), A1(:,<span class="number">2</span>) ];</span><br><span class="line"></span><br><span class="line">newMatrix= [A1,<span class="built_in">repmat</span>(f,<span class="built_in">size</span>(A1,<span class="number">1</span>),<span class="number">1</span>)];</span><br><span class="line"><span class="comment">% A  =  [  cosd(star_data(index,3)).*cosd(star_data(index,2))   ,   cosd(star_data(index,3)).*sind(star_data(index,2))  ,  sind(star_data(index,3))  ];</span></span><br><span class="line"><span class="comment">% Y = [   (f  ./  (sqrt(f^2 + newMatrix(1:size(index,1),1).^2 + newMatrix(1:size(index,1),2).^2))  )];</span></span><br><span class="line">A  =  [  <span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>))  ];</span><br><span class="line">Y = [   (f  ./  (<span class="built_in">sqrt</span>(f^<span class="number">2</span> + newMatrix([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">1</span>).^<span class="number">2</span> + newMatrix([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">2</span>).^<span class="number">2</span>))  )];</span><br><span class="line"></span><br><span class="line">zhixiang = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line">E = (A*zhixiang - Y);</span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E));</span><br><span class="line"><span class="keyword">if</span>   zhixiang(<span class="number">2</span>)/<span class="built_in">sqrt</span>(<span class="number">1</span>-zhixiang(<span class="number">3</span>)^<span class="number">2</span>) &gt; <span class="number">0</span> </span><br><span class="line">    alpha=<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    alpha = <span class="number">360</span>-<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">beta</span>=<span class="built_in">asind</span>( zhixiang(<span class="number">3</span>) );</span><br><span class="line"><span class="comment">% corWorld =  [  cosd(star_data(index,3)).*cosd(star_data(index,2))   ,   cosd(star_data(index,3)).*sind(star_data(index,2))  ,  sind(star_data(index,3))  ];</span></span><br><span class="line">corWorld =  [  <span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(index([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]),<span class="number">3</span>))  ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">syms a b fai;</span><br><span class="line">R = [</span><br><span class="line">-<span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">sind</span>(fai)</span><br><span class="line"> <span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)     -<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">cosd</span>(fai)</span><br><span class="line"> <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(b)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">x_ba = f .* ( R(<span class="number">1</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">1</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">1</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line">y_ba = f .* ( R(<span class="number">2</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">2</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">2</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA = [diff(x_ba,a) , diff(x_ba,b) , diff(x_ba,fai)];</span><br><span class="line">B = [diff(y_ba,a) , diff(y_ba,b) , diff(y_ba,fai)];</span><br><span class="line"></span><br><span class="line">iter=[alpha;<span class="built_in">beta</span>;<span class="number">0</span>];</span><br><span class="line">times = <span class="number">10</span>;</span><br><span class="line">iterRecord = <span class="built_in">zeros</span>(<span class="number">3</span>, times);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : times</span><br><span class="line">    </span><br><span class="line">    p = [double(subs(x_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;))-xingtu1([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">1</span>); double(subs(y_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;)) - xingtu1([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">2</span>)];</span><br><span class="line">    <span class="built_in">disp</span>(<span class="built_in">max</span>(p));</span><br><span class="line">    M = [double(subs(AA , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;)); double(subs(B , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;))];</span><br><span class="line">    wow = inv((M.&#x27;) * M) * (M.&#x27;)*p;</span><br><span class="line">    iter = iter - wow</span><br><span class="line">    iterRecord(:,<span class="built_in">i</span>) = iter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x=<span class="number">1</span>:<span class="number">1</span>:times;</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,iterRecord(<span class="number">3</span>,:),<span class="string">&#x27;-or&#x27;</span> , x,iterRecord(<span class="number">1</span>,:),<span class="string">&#x27;-*b&#x27;</span> , x,iterRecord(<span class="number">2</span>,:),<span class="string">&#x27;-*b&#x27;</span> ); <span class="comment">%线性，颜色，标记</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;maxp=&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">max</span>(p));</span><br><span class="line">RMS</span><br><span class="line"><span class="comment">%  最后看各点的差值p即可</span></span><br><span class="line"></span><br><span class="line">x_real = double(subs(x_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;));</span><br><span class="line">y_real = double(subs(y_ba , &#123;a,b,fai&#125;,&#123;iter(<span class="number">1</span>),iter(<span class="number">2</span>),iter(<span class="number">3</span>)&#125;));</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">scatter</span>(x_real,y_real,<span class="number">140</span>,<span class="string">&#x27;dk&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">scatter</span>(xingtu1([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">1</span>), xingtu1([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],<span class="number">2</span>), <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220220192830453.png" alt="image-20220220192830453"></p><p>iter =</p><p>  112.6000<br>   34.5000<br>  -89.9997</p><p>maxp=<br>    0.0048</p><p>RMS =</p><p>   4.6872e-08</p><hr><p>星图7</p><p>1525<br>1572<br>1443<br>1748<br>1780<br>1675<br>1720<br>1503<br>1634<br>1577<br>1757<br>1586<br>1536<br>1610<br>1681<br>1606<br>1670<br>1477<br>1790<br>1502<br>1631<br>1603<br>1415<br>1692<br>1453<br>1432<br>1492<br>1488<br>1648<br>1646<br>1566<br>1688<br>1655<br>1505<br>1373<br>1576<br>1545<br>1424<br>1375<br>1825<br>1401</p><p>iter =</p><p>  112.6000<br>   34.5000<br>  269.9999</p><p>maxp=<br>    0.0060</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218223545858.png" alt="image-20220218223545858"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218172202760.png" alt="image-20220218172202760"></p><hr><p>星图8</p><p>1572<br>1387<br>1675<br>1634<br>1586<br>1610<br>1354<br>1681<br>1606<br>1670<br>1390<br>1502<br>1631<br>1603<br>1692<br>1432<br>1488<br>1648<br>1646<br>1566<br>1688<br>1359<br>1505<br>1373<br>1576<br>1424<br>1375<br>1401<br>1385</p><p>iter =</p><p>  106.0000<br>   35.0000<br>  270.0000</p><p>maxp=<br>    0.0081</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218223640303.png" alt="image-20220218223640303"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220218172345094.png" alt="image-20220218172345094"></p><hr><p>针对星图4，需要考察一下问题。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222185204497.png" alt="image-20220222185204497"></p><p>正向验证</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%  main11.m</span></span><br><span class="line"><span class="comment">%  正向求解指向区域内的星图和题图的对比。</span></span><br><span class="line"></span><br><span class="line">clc;clear;close all;</span><br><span class="line">index = [<span class="number">1670</span></span><br><span class="line"><span class="number">1477</span></span><br><span class="line"><span class="number">1502</span></span><br><span class="line"><span class="number">1631</span></span><br><span class="line"><span class="number">1603</span></span><br><span class="line"><span class="number">1453</span></span><br><span class="line"><span class="number">1432</span></span><br><span class="line"><span class="number">1492</span></span><br><span class="line"><span class="number">1488</span></span><br><span class="line"><span class="number">1648</span></span><br><span class="line"><span class="number">1646</span></span><br><span class="line"><span class="number">1566</span></span><br><span class="line"><span class="number">1688</span></span><br><span class="line"><span class="number">1655</span></span><br><span class="line"><span class="number">1505</span></span><br><span class="line">];</span><br><span class="line">load(<span class="string">&quot;附件2  简易星表.mat&quot;</span>);</span><br><span class="line"></span><br><span class="line">f = <span class="number">256</span>/(<span class="built_in">tand</span>(<span class="number">6</span>));</span><br><span class="line">A1 = xlsread(<span class="string">&#x27;D:\文献\starimage\npmcm2019b\npmcm2019-B\附件3  8幅星图相关数据\xingtu01.xls&#x27;</span>) - <span class="number">256</span>;</span><br><span class="line">xingtu1=[-A1(:,<span class="number">1</span>), A1(:,<span class="number">2</span>) ];</span><br><span class="line"></span><br><span class="line">newMatrix= [A1,<span class="built_in">repmat</span>(f,<span class="built_in">size</span>(A1,<span class="number">1</span>),<span class="number">1</span>)];</span><br><span class="line">A  =  [  <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(index,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(index,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(index,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(index,<span class="number">3</span>))  ];</span><br><span class="line">Y = [   (f  ./  (<span class="built_in">sqrt</span>(f^<span class="number">2</span> + newMatrix(<span class="number">1</span>:<span class="built_in">size</span>(index,<span class="number">1</span>),<span class="number">1</span>).^<span class="number">2</span> + newMatrix(<span class="number">1</span>:<span class="built_in">size</span>(index,<span class="number">1</span>),<span class="number">2</span>).^<span class="number">2</span>))  )];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zhixiang = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line">E = (A*zhixiang - Y);</span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>   zhixiang(<span class="number">2</span>)/<span class="built_in">sqrt</span>(<span class="number">1</span>-zhixiang(<span class="number">3</span>)^<span class="number">2</span>) &gt; <span class="number">0</span> </span><br><span class="line">    alpha=<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    alpha = <span class="number">360</span>-<span class="built_in">acosd</span>( zhixiang(<span class="number">1</span>)  /  <span class="built_in">sqrt</span>(<span class="number">1</span>-((zhixiang(<span class="number">3</span>))^<span class="number">2</span>) )   );</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">beta</span>=<span class="built_in">asind</span>( zhixiang(<span class="number">3</span>) );</span><br><span class="line">corWorld =  [  <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">cosd</span>(star_data(:,<span class="number">2</span>))   ,   <span class="built_in">cosd</span>(star_data(:,<span class="number">3</span>)).*<span class="built_in">sind</span>(star_data(:,<span class="number">2</span>))  ,  <span class="built_in">sind</span>(star_data(:,<span class="number">3</span>))  ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% syms a b fai;</span></span><br><span class="line">a = alpha;</span><br><span class="line">b = <span class="built_in">beta</span>;</span><br><span class="line">fai = <span class="number">270</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R = [</span><br><span class="line">-<span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">sind</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">sind</span>(fai)</span><br><span class="line"> <span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)     -<span class="built_in">cosd</span>(a)*<span class="built_in">sind</span>(fai)-<span class="built_in">sind</span>(a)*<span class="built_in">sind</span>(b)*<span class="built_in">cosd</span>(fai)      <span class="built_in">cosd</span>(b)*<span class="built_in">cosd</span>(fai)</span><br><span class="line"> <span class="built_in">cosd</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(a)*<span class="built_in">cosd</span>(b)                                  <span class="built_in">sind</span>(b)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">x_ba = f .* ( R(<span class="number">1</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">1</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">1</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line">y_ba = f .* ( R(<span class="number">2</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">2</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">2</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>)) ./ (R(<span class="number">3</span>,<span class="number">1</span>).*corWorld(:,<span class="number">1</span>) +  R(<span class="number">3</span>,<span class="number">2</span>).*corWorld(:,<span class="number">2</span>)  +  R(<span class="number">3</span>,<span class="number">3</span>).*corWorld(:,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">indexIn = <span class="built_in">find</span>(x_ba(:,<span class="number">1</span>)&lt;<span class="number">256</span> &amp; x_ba(:,<span class="number">1</span>)&gt;<span class="number">-256</span> &amp; y_ba(:,<span class="number">1</span>)&lt;<span class="number">256</span> &amp; y_ba(:,<span class="number">1</span>)&gt;<span class="number">-256</span>);</span><br><span class="line">idx = kmeans(indexIn,<span class="number">2</span>);</span><br><span class="line">idx1 = <span class="built_in">find</span>(idx == <span class="number">1</span>);</span><br><span class="line">idx2 = <span class="built_in">find</span>(idx == <span class="number">2</span>);</span><br><span class="line">all(<span class="built_in">ismember</span>(index,indexIn))</span><br><span class="line"></span><br><span class="line">CorIn = [x_ba(indexIn(idx2)) , y_ba(indexIn(idx2))];</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);  </span><br><span class="line"><span class="built_in">plot</span>(CorIn(:,<span class="number">1</span>),CorIn(:,<span class="number">2</span>),<span class="string">&#x27;ok&#x27;</span>  ); <span class="comment">%线性，颜色，标记</span></span><br><span class="line"><span class="comment">% plot(x,iterRecord(3,:),&#x27;-or&#x27; , x,iterRecord(1,:),&#x27;-*b&#x27; , x,iterRecord(2,:),&#x27;-*b&#x27; ); %线性，颜色，标记</span></span><br><span class="line">text(CorIn(:,<span class="number">1</span>)<span class="number">-20</span>,CorIn(:,<span class="number">2</span>)<span class="number">-17</span>,string(indexIn(idx2)));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">scatter</span>(xingtu1(:,<span class="number">1</span>),xingtu1(:,<span class="number">2</span>),<span class="number">140</span>,<span class="string">&#x27;or&#x27;</span>  ); <span class="comment">%线性，颜色，标记</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(star_data(:,<span class="number">2</span>),star_data(:,<span class="number">3</span>),<span class="string">&#x27;ok&#x27;</span>  ); <span class="comment">%线性，颜色，标记</span></span><br><span class="line"></span><br><span class="line">xlim([<span class="number">109.6</span><span class="number">-6</span>  <span class="number">109.6</span>+<span class="number">6</span>]);</span><br><span class="line">ylim([<span class="number">34.5</span><span class="number">-6</span>  <span class="number">34.5</span>+<span class="number">6</span>]);</span><br><span class="line">text(star_data(:,<span class="number">2</span>),star_data(:,<span class="number">3</span>),string(star_data(:,<span class="number">1</span>)) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">scatter3</span>(corWorld(indexIn,<span class="number">1</span>),corWorld(indexIn,<span class="number">2</span>),corWorld(indexIn,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>星图1：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222184550530.png" alt="image-20220222184550530"></p><p>星图2：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222184816184.png" alt="image-20220222184816184"></p><p>星图3</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222185427074.png" alt="image-20220222185427074"></p><p>星图4：</p><p>3249<br>3346<br>3364<br>3275<br>3421<br>3319<br>3283<br>3370<br>3265<br>3261<br>3321<br>3309</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222191924445.png" alt="image-20220222191924445"></p><p>对照003.pdf的答案才知道，指向并非117，-28，而是243，-28</p><p>星图5：</p><p>未被圈出的是缺失星：如1210为5.97等星，</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222185753031.png" alt="image-20220222185753031"></p><p>星图6：</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222190321348.png" alt="image-20220222190321348"></p><p>1670<br>1675 无解 ：应该为1477<br>1502<br>1631<br>1655 ：应该为1603 位置偏移<br>1692<br>1492<br>1576 应该无解<br>1646<br>1566<br>1655<br>1505</p><p> 星图7</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222191043412.png" alt="image-20220222191043412"></p><p>星图8 缺失挺多星</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220222191119023.png" alt="image-20220222191119023"></p>]]></content>
    
    
    <summary type="html">终于求出滚转角，之前的求解过程已忘了差不多，在此总结一下各星图的指向滚转角。并且验证各图的实际星图与数据星图的叠加对比和分析。</summary>
    
    
    
    <category term="星图识别" scheme="https://tsuiwade.github.io/categories/%E6%98%9F%E5%9B%BE%E8%AF%86%E5%88%AB/"/>
    
    
    <category term="星图识别" scheme="https://tsuiwade.github.io/tags/%E6%98%9F%E5%9B%BE%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>抽奖程序</title>
    <link href="https://tsuiwade.github.io/2022/01/24/blog35-luckydraw/"/>
    <id>https://tsuiwade.github.io/2022/01/24/blog35-luckydraw/</id>
    <published>2022-01-24T21:19:26.000Z</published>
    <updated>2022-01-24T21:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次给公司搞了抽奖程序，使用了js语言，vue框架，electron进行打包。</p><p>首先安装nodejs，最新版出现许多问题，因此推荐使用v14.16版本。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124212221950.png" alt="image-20220124212221950"></p><p>本项目fork自 <a href="https://github.com/vitozyf/lucky-draw">https://github.com/vitozyf/lucky-draw</a> </p><p>修改了背景图片。</p><p>发现了 <code>先抽三等奖就三等奖出现在抽奖结果上分</code>的bug，无奈只得写死特等、一等、二等、三等。</p><p>修改了抽奖结果显示号码，而显示<code>姓名</code>。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220124165803965.png" alt="image-20220124165803965"></p><p>再通过<a href="https://www.cxyzjd.com/article/qq_41579104/107340431">https://www.cxyzjd.com/article/qq_41579104/107340431</a> 用electron进行打包成exe文件。</p><p>第一步   将自己的vue项目进行打包，可以看到打包后的dist文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>第二步（选）安装electron</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install electron</span><br></pre></td></tr></table></figure><p>第三步  在dist文件夹中 创建主程序的入口文件main.js和相关配置package.json文件</p><p>其中，main程序为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; =<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);<span class="comment">//引入electron</span></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"><span class="keyword">let</span> windowConfig = &#123;</span><br><span class="line">  width:<span class="number">800</span>,</span><br><span class="line">  height:<span class="number">600</span></span><br><span class="line">&#125;;<span class="comment">//窗口配置程序运行窗口的大小，可自行设置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(windowConfig);<span class="comment">//创建一个窗口</span></span><br><span class="line">  win.loadURL(<span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html`</span>);<span class="comment">//在窗口内要展示的内容index.html 就是打包生成的index.html</span></span><br><span class="line"><span class="comment">//   win.webContents.openDevTools();  //开启调试工具</span></span><br><span class="line">  win.on(<span class="string">&#x27;close&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//回收BrowserWindow对象</span></span><br><span class="line">    win = <span class="literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  win.on(<span class="string">&#x27;resize&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    win.reload();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>,createWindow);</span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.quit();</span><br><span class="line">&#125;);</span><br><span class="line">app.on(<span class="string">&#x27;activate&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(win == <span class="literal">null</span>)&#123;</span><br><span class="line">    createWindow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> package.json为</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;productName&quot;</span>: <span class="string">&quot;天仪公司2022抽奖程序&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;author&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;天仪公司2022抽奖程序&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;pack&quot;</span>: <span class="string">&quot;electron-builder --dir&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;dist&quot;</span>: <span class="string">&quot;electron-builder&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;electron-builder install-app-deps&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;electronVersion&quot;</span>: <span class="string">&quot;1.8.4&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;win&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;requestedExecutionLevel&quot;</span>: <span class="string">&quot;highestAvailable&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;nsis&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;arch&quot;</span>: [</span><br><span class="line">              <span class="string">&quot;x64&quot;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;appId&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;artifactName&quot;</span>: <span class="string">&quot;demo-$&#123;version&#125;-$&#123;arch&#125;.$&#123;ext&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nsis&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;artifactName&quot;</span>: <span class="string">&quot;demo-$&#123;version&#125;-$&#123;arch&#125;.$&#123;ext&#125;&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;extraResources&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;from&quot;</span>: <span class="string">&quot;./static/xxxx/&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;to&quot;</span>: <span class="string">&quot;app-server&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;**/*&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;publish&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;provider&quot;</span>: <span class="string">&quot;generic&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://xxxxx/download/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^2.4.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;electron-packager&quot;</span>: <span class="string">&quot;^12.1.0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;electron-updater&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>第四步 在dist文件夹中运行electron</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line">elctron .</span><br></pre></td></tr></table></figure><p>最后一步 打包为exe程序了</p><p>先<strong>安装electron-builder</strong>，直接在dist目录下安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install electron-builder --save-dev</span><br></pre></td></tr></table></figure><p>执行<strong>npm run dist</strong> ,执行<strong>npm run dist</strong>进行打包，由于我们package.json中将打包命令electron-builder，定义为了dist，因此我们只需执行npm run dist即可打包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dist</span><br></pre></td></tr></table></figure><p>在我们原本vue项目打包后的dist文件夹下，又出现一个dist,进去之后，就发现了这个exe程序。</p><hr><h1 id="天仪公司2022年会抽奖软件说明"><a href="#天仪公司2022年会抽奖软件说明" class="headerlink" title="天仪公司2022年会抽奖软件说明"></a>天仪公司2022年会抽奖软件说明</h1><h3 id="一、-快速指南"><a href="#一、-快速指南" class="headerlink" title="一、 快速指南"></a>一、 快速指南</h3><p>进入软件后，如果您之前已经设置过该程序，请根据需要，点击右边<em>重置</em>进行记录重置。</p><p>接着需要点击右边<em>导入名单</em>，名单则从<em>附件中的名单</em>中复制带有序号和姓名的两列，呈现为下图的格式。（如果后续打开软件不修改名单，可省略该步）</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124182658614.png" alt="image-20220124182658614"></p><p>还需要点击右上角<em>抽奖配置</em>，检查总人数及奖项人数（如果后续打开软件不修改，可省略）。接着点击右边<em>开始</em>就可以开始抽奖、点击<em>停止</em>结束抽奖。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220124182928507.png" alt="image-20220124182928507"></p><p>​    最后点击右上角<em>抽奖结果</em>可以查看当前各项抽奖结果。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124185905221.png" alt="image-20220124185905221"></p><h3 id="二、安装说明"><a href="#二、安装说明" class="headerlink" title="二、安装说明"></a>二、安装说明</h3><p>​    软件需要安装，安装包为<em>天仪公司<strong>2022</strong>抽奖程序安装包**.exe</em>。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124190127040.png" alt="image-20220124190127040"></p><p>安装生成<em>天仪公司<strong>2022</strong>抽奖程序**.exe</em>。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124190147521.png" alt="image-20220124190147521"></p><p>打开<em>天仪公司<strong>2022</strong>抽奖程序**.exe</em>，出现以下界面。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124190218686.png" alt="image-20220124190218686"></p><p>​     若要删除该程序别忘了在<em>程序和功能</em>内删除。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/img/image-20220124190302295.png" alt="image-20220124190302295"></p><h3 id="三、功能介绍"><a href="#三、功能介绍" class="headerlink" title="三、功能介绍"></a>三、功能介绍</h3><p>​    总体上，该程序将呈现现代化的抽奖效果，采用炫酷的动效，喜庆的背景音乐；可以实现自定义奖项及人数、重置部分设置及结果、单独取消中奖人员；幕布滚动播放中奖结果；软件关闭后仍可保存当前设置情况和抽奖结果。</p><p>​    下面进行分功能介绍。</p><div class="table-container"><table><thead><tr><th>功能</th><th>介绍</th></tr></thead><tbody><tr><td>主界面中心展示</td><td>自动三维旋转抽奖人员姓名</td></tr><tr><td>鼠标滚轮名单球</td><td>名单球放大缩小</td></tr><tr><td>抽奖设置</td><td>设置抽奖标题、总人数、各奖项人数，可新增奖项</td></tr><tr><td>抽奖结果</td><td>显示各奖项中奖人员，可单独删除中奖人员</td></tr><tr><td>主界面上方幕布</td><td>展示标题、各奖项中奖人员</td></tr><tr><td>重置</td><td>重置设置或结果</td></tr><tr><td>导入名单</td><td>导入备选人员的序号和名单，注意格式</td></tr><tr><td>抽取方式</td><td>设置抽取奖项和抽取人数</td></tr><tr><td>背景音乐</td><td>可播放暂停背景音乐</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">这次给公司搞了抽奖程序，使用了js语言，vue框架，electron进行打包。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>树莓派外接显示屏</title>
    <link href="https://tsuiwade.github.io/2022/01/16/blog34-raspScreen/"/>
    <id>https://tsuiwade.github.io/2022/01/16/blog34-raspScreen/</id>
    <published>2022-01-16T10:32:37.000Z</published>
    <updated>2022-01-16T10:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116112051112.png" alt="image-20220116112051112"></p><p>最近在研究树莓派的屏幕，当看到这样一个参数复杂的屏幕截图时，我有些难以理解。今天就来查一查里面的参数含义。</p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p><code>分辨率</code>又称解析度、解像度，可以从显示分辨率与图像分辨率两个方向来分类。 </p><p>通常，“分辨率”被表示成每一个方向上的像素数量，比如640X480等。某些情况下也可以同时表示成“每英寸像素”（ppi）以及图形的长度和宽度。比如72ppi，和8X6英寸。</p><p>15英寸LCD的最佳分辨率为1024×768，17～19英寸的最佳分辨率通常为1280×1024，更大尺寸拥有更大的最佳分辨率。</p><p><strong>屏幕分辨率</strong></p><p>屏幕分辨率（显示分辨率）是屏幕<a href="https://baike.baidu.com/item/图像/773234">图像</a>的<a href="https://baike.baidu.com/item/精密度/7902819">精密度</a>，是指<a href="https://baike.baidu.com/item/显示器/362722">显示器</a>所能显示的<a href="https://baike.baidu.com/item/像素/95084">像素</a>有多少。由于屏幕上的点、线和面都是由像素组成的，显示器可显示的像素越多，画面就越<a href="https://baike.baidu.com/item/精细/1312083">精细</a>，同样的屏幕区域内能显示的信息也越多，所以分辨率是个非常重要的性能指标。可以把整个图像想象成是一个大型的棋盘，而分辨率的表示方式就是所有经线和纬线交叉点的数目。显示分辨率一定的情况下，显示屏越小图像越清晰，反之，显示屏大小固定时，显示分辨率越高图像越清晰。</p><p><a href="https://baike.baidu.com/item/屏幕分辨率/2193029">屏幕分辨率</a>是指实际显示图像时计算机所采用的分辨率，用户可在“控制面板”的“显示”属性的“设置”下根据需要设置“<a href="https://baike.baidu.com/item/屏幕分辨率/2193029">屏幕分辨率</a>”，或右击桌面，在快捷菜单中选择“<a href="https://baike.baidu.com/item/屏幕分辨率/2193029">屏幕分辨率</a>”命令，也可根据需要设置“屏幕分辨率”。 </p><p><a href="https://baike.baidu.com/item/屏幕分辨率/2193029">屏幕分辨率</a>必须小于或等于显示器分辨率，而显示器分辨率描述的是显示器自身的像素点数量，是固有的、不可改变的。</p><p><strong>图像分辨率</strong></p><p><a href="https://baike.baidu.com/item/图像分辨率/872374">图像分辨率</a>是指在计算机中保存和显示一幅<a href="https://baike.baidu.com/item/数字图像/5199238">数字图像</a>所具有的分辨率，它和图像的像素有直接的关系。例如，一张分辨率为640×480像素的图片，其分辨率就达到了307200像素，也就是常说的30万像素；而一张分辨率为1600×1200的图片，它的像素就是200万这样，<a href="https://baike.baidu.com/item/图像分辨率/872374">图像分辨率</a>表示的是图片在长和宽上占的点数的单位。一张数码图片的长宽比通常是4:3。 </p><p><a href="https://baike.baidu.com/item/图像分辨率/872374">图像分辨率</a>决定图像的质量。对于同样尺寸的一幅图，如果图像分辨率越高，则组成该图的图像像素数目越多，像素点也越小，图像越清晰、逼真。如：72dpi分辨率的1英寸×1英寸图像包含5184像素，而300dpi分辨率的1英寸×1英寸图像包含90000像素。</p><p>图像分辨率与<a href="https://baike.baidu.com/item/显示器分辨率/8575053">显示器分辨率</a>是两个不同的概念：<a href="https://baike.baidu.com/item/显示器分辨率/8575053">显示器分辨率</a>用于确定显示图像的区域大小，而图像分辨率用于确定组成一幅图像的像素数目。如在显示器分辨率为1024×768的显示屏上，一幅图像分辨率为320×240的图像约占显示屏的1/12，而一幅图像分辨率为2400×3000的图像在这个显示屏上是不能完全显示的。</p><p>对于具有相同图像分辨率的图像，<a href="https://baike.baidu.com/item/屏幕分辨率/2193029">屏幕分辨率</a>越低(如800×600)，则图像看起来较大，但屏幕上显示的项目少；屏幕分辨率越高(如1024×768)，则图像看起来就越小。 </p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116114123143.png" alt="image-20220116114123143"></p><p>亮度</p><h2 id="色域"><a href="#色域" class="headerlink" title="色域"></a>色域</h2><p>色域其实也可以叫做色彩空间（Color Space），而域有是一个数学概念，可以更好的说明色彩是有一定的范围。色域是对一种颜色进行编码的方法，也指一个技术系统能够产生颜色的总和。在计算机图形处理中色域是颜色的某个完全的子集。颜色子集最常见的应用是用来精确地代表一种给定的情况，例如一个给定的空间或是某个输出装置的呈色范围。色域是显示器屏幕所能够表达的颜色数量所构成的范围区域，在现实世界中自然界中可见光谱的颜色组成了最大的色域空间，该色域空间中包含了人眼所能见到的所有颜色。</p><p>CIE国际照明协会为了更好的让用户轻易的理解色域，制定了一个用于描述色域的方法，那就是CIE-xy色度图。在这个坐标系中，各种显示设备能表现的色域范围用RGB（红、绿、蓝）三点连线组成的三角形区域来表示，三角形的面积越大，就表示这种显示设备的色域范围越大。 </p><p><strong>常见的屏幕色域三种标准：</strong></p><p>目前常见的屏幕色域标准有三种，分别是sRGB、NTSC、Adobe RGB。</p><p><strong>1、sRGB</strong></p><p>最早期的色域标准之一，至今仍有重要的影响力。</p><p>由微软和惠普在1996年制定，当时主流显示器为CRT显示器，这种显示器对颜色还原能力比较差。其中一个<strong>严重的问题</strong>就是对<strong>绿色部分</strong>色域覆盖非常少。</p><p>从它的特点可以得出结论，sRGB 属于一种比较宽松的标准，很多显示器都能达到100%。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116115727055.png" alt="image-20220116115727055"></p><p><strong>2、NTSC</strong></p><p>NTSC色域是NTSC电视标准下的色彩空间，NTSC是美国国家电视标准委员会，他们所推出的NTSC电视标准是一套广播电视传输协议，被运用在美国、日本等国家的广播电视系统中。当然这也就意味着，NTSC色彩空间更多被运用在电视行业。</p><p>由 Adobe Systems于1998年制定，为了解决 sRGB 色域不能覆盖印刷系统中的 CMYK 色域的问题而制定的新标准。</p><p>一般针对色彩专业的显示器都会以 Adobe sRGB 的色域进行标示。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116115757500.png" alt="image-20220116115757500"></p><p><strong>3、Adobe RGB</strong></p><p>Adobe RGB是专业软件生产商Adobe在1998年推出的色彩空间，初衷是为了同时囊括sRGB（电脑常用的色彩空间）和CMYK（印刷常用的色彩空间），这样拍出的数码照片不仅能在电脑上正常显示和编辑，也能印刷出颜色无损而正确的相片。Adobe RGB相比sRGB囊括的色彩范围更广，受到设计师的青睐，因此在专业的摄影和后期领域被广泛使用。</p><p>通过下图可以得知，Adobe RGB的色域几乎和NTSC1953年标准比较相近一些，而sRGB所能表示的色彩最少，sRGB色彩空间范围要小于前两者，近似相当于 sRGB ≈ 72% NTSC，Adobe RGB≈95% NTSC，不过sRGB是世界上最为广泛使用的色彩空间，大多数的显示器，都只支持sRGB的色域范围。AdobeRGB相比sRGB，能表示出更加细腻的青色和绿色，而NTSC的色域范围是最广的。 </p><p><strong>100%sRGB = 72%NTSC</strong></p><p><strong>100%AdobeRGB = 95%NTSC</strong>﻿</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/1-191024150551G3.jpg" alt="色域是什么？显示器屏幕色域sRGB、NTSC、Adobe RGB区别对比科普"></p><h2 id="对比度"><a href="#对比度" class="headerlink" title="对比度"></a>对比度</h2><p>对比度是屏幕上同一点最亮时(白色)与最暗时(黑色)的亮度的比值,高的对比度意味着相对较高的亮度和呈现颜色的艳丽程度;</p><h2 id="亮度"><a href="#亮度" class="headerlink" title="亮度"></a>亮度</h2><p>液晶是一种介于液体和晶体之间的物质，本身并不能发光，因此背光的亮度决定了它的亮度。一般来说，液晶显示器的亮度越高，显示的色彩就越鲜艳，现实效果也就越好。液晶显示器中表示亮度的单位为cd/m2（流明），普通液晶显示器的亮度为250cd/m2。如果亮度过低，显示出来的颜色会偏暗，看久了就会觉得非常疲劳。对比度是亮度的比值，也就是在暗室中，白色画面下的亮度除以黑色画面下的亮度。因此白色越亮、黑色越暗，对比度就越高，显示的画面就越清晰亮丽，色彩的层次感就越强。一般液晶显示器的对比度为300:1，一些较好的可达到400:1，而传统的CRT显示器可达到500:1。如果对比度小于250:1，我们在看屏幕时就会产生模糊感。</p><h2 id="面板类型"><a href="#面板类型" class="headerlink" title="面板类型"></a>面板类型</h2><p>面板类型关系着液晶显示器的响应时间、色彩、可视角度、对比度这些重要因素。液晶显示器的常用面板有TN（Twisted Nematic扭曲向列型）、IPS（In-Plane-Switching平面转换型）、VA（Vertical Alignment多象限垂直配向型）三种类型，前两种相对常见。</p><p><strong>TN屏：响应时间快是优势</strong></p><p>TN屏就是较早前常见的软屏，用手能按出水波纹，这是最早使用的LCD面板之一，目前也在大量使用，因为它的技术最成熟，成本最低。TN屏响应速度快，最快可以达到1ms的响应时间，不会出现残影。使用这种材质的屏幕通常用来作为职业电竞屏，通过快速响应，TN屏可无损呈现高速变化的场景细节。</p><p>相对地，TN面板的缺陷也很明显，输出灰阶少，原生只有6bit色彩，画面色彩偏白、可视角度小，显示效果一般，通过不同角度观看会出现偏色和亮度差别。因此，如果你从事设计、影视后期相关工作或在观影娱乐时对屏幕色彩有较高要求，不建议使用这种屏幕。</p><p><strong>IPS屏：广视角、色彩好</strong></p><p>IPS屏面板较硬，用手指轻触屏幕，画面不会变形。IPS屏在色彩显示、可视角度等方面比TN面板好上不少，对于色彩的呈现范围与准确性也都有亮眼的表现，广视角是IPS面板的原生优势，不论哪个角度观看都不会产生色偏。目前跟影像处理有关的专业屏幕大多采用IPS面板。苹果也一直与IPS屏捆绑宣传，对于偏爱Mac的用户，IPS屏是一个不错的选择。</p><p>此外，尽管在响应时间上IPS屏比TN屏稍逊一筹，但得益于IPS屏出色的色彩表现，对于兼有办公娱乐多功能需求的普通游戏玩家，IPS屏仍然值得考虑。</p><p>受制于IPS屏需要更多背光灯来提高亮度，功耗偏高的局限性，控制不好就会漏光是IPS屏的通病。不过专业的屏幕生产厂商在应对这个问题时通常有更规范的把控机制，更值得信赖。</p><p><strong>VA屏：对比度高</strong></p><p>VA类面板也属于软屏，只要用手指轻触面板，显现梅花纹的是VA面板，出现水波纹的则是TN面板。VA面板是在中高端液晶显示器应用比较多的面板类型，富士通、三星、奇美电子、友达光电等面板企业均采用了这项面板技术。VA屏的特点是宽容度和对比度都更高，可达到3000:1的高对比度，画面中黑色和白色都更加纯净，且不会出现漏光等问题。</p><p>VA面板的缺陷主要体现在响应时间方面，好在现在VA面板的响应时间已经大幅改善，可以低至6ms内，足够正常使用。</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/5d5f5c4c6718d4523.png_e1080.jpg" alt="一文讲解LCD显示器：TN/IPS/VA面板的好与坏，我究竟该选哪一种？"></p><h2 id="屏幕色彩"><a href="#屏幕色彩" class="headerlink" title="屏幕色彩"></a>屏幕色彩</h2><p>彩屏的色阶指数从低到高可分三个层次，最低单色，其次是256色、4096色、 65536色； 最高的为1677万色。</p><p>256=2的8次方，即8位彩色，依次律推，65536色=2的16次方，即通常所说 的16位真彩色，26万=2的18次方，也就是18位<a href="https://baike.baidu.com/item/真彩">真彩</a>。其实65536色已基本可满足我们肉眼的识别 需求。</p><h2 id="HDR"><a href="#HDR" class="headerlink" title="HDR"></a>HDR</h2><p>普通显示器采用的是标准动态范围（Standard Dynamic Range），简称 SDR，与之相比，HDR 显示器采用的是高动态范围（High Dynamic Range），简称 HDR。</p><p>HDR 显示器能明显改善屏幕明暗区域的对比度，提供更好的色彩，使画面更加细腻逼真，也更接近现实中的样子。其中最重要的是增加亮度，足够的亮度才能增强对比感，图像才能更接近现实中的样子。</p><p>所以，在挑选 HDR 显示器时，<strong>对比度</strong>和<strong>颜色</strong>是两个非常关键的因素，下文会详细阐述。</p><h3 id="HDR-显示器如何影响显示效果？"><a href="#HDR-显示器如何影响显示效果？" class="headerlink" title="HDR 显示器如何影响显示效果？"></a>HDR 显示器如何影响显示效果？</h3><p>1、亮度<br>亮度对 HDR 非常重要，一般显示器都能达到 300cd / m²，而 HDR 显示器的亮度为 600cd / m² – 1000cd / m² 之间，更高的亮度必然带来更好的显示效果。</p><p>2、位深<br>8位面板可以显示1678万种颜色，而10位面板则可以显示10.7亿种颜色。理论上来说，HDR 显示器要具有 10bit 的面板，但实际情况可能没有那么理想，比如华硕 ROG Swift PG27UQ 和 Acer Predator X27 虽然只是8位面板，通过2位抖动来模拟 10 位面板的质量，从显示上来说，要优于真 8位 面板。</p><p>3、色域<br>sRGB 色域大家比较熟悉，这种标准是人类肉眼可以感知到的颜色的33%，DCI-P3 标准则是人类肉眼可以感知到的颜色的 45% ，而 HDR 显示器至少要达到 90% 的 DCI-P3，才能保证良好的显示效果</p><h3 id="对硬件和软件有什么要求？"><a href="#对硬件和软件有什么要求？" class="headerlink" title="对硬件和软件有什么要求？"></a>对硬件和软件有什么要求？</h3><p>游戏需要更高性能的 GPU，而 HDR 并不需要非常强大的 GPU，Nvidia 的 GTX 950、AMD 的 R9 380 及以后的显卡均能支持；<br>接口方面，需要 HDMI 2.0 和 DisplayPort 1.4；<br>面板方面，TN 面板不支持 HDR；<br>Win10、PS4、Xbox one 都支持 HDR。</p><hr><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/20220116163159.png" alt=""></p><h3 id="白色的线："><a href="#白色的线：" class="headerlink" title="白色的线："></a>白色的线：</h3><p>FPC（Flexible printed circuit）排线，FPC排线就是可在一定程度内弯曲的连接线组。</p><h3 id="屏幕输出线："><a href="#屏幕输出线：" class="headerlink" title="屏幕输出线："></a>屏幕输出线：</h3><p><strong>EDP接口屏线</strong>常年技术领先VGA，HDMI是因为十几年前高清需求被电影电视垄断，PC显示器高清不是主流需求，由电视/DVD 厂商主推的HDMI才得以快速普及。<br>目前计算机公司 AMD/Intel/NVIDIA 的显示芯片都是原生输出<strong><a href="https://link.zhihu.com/?target=http%3A//www.kem-ffc.com/">高清EDP屏线</a></strong>信号，HDMI芯片也是由EDP-HDMI转换芯片转接出来的。<br>目前趋势上来讲，高规格显示器普遍都采用EDP接口。USB4 的内置显示协议也是EDP1.4。由于 HDMI 的市场惯性优势，低规格显示器 HDMI 会多一些。但是长远看HDMI被EDP接口排线取代是发展趋势。</p><p>而树莓派上有个dsi接口，</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116164007140.png" alt="image-20220116164007140"></p><p>树莓派的DSI显示器接口</p><p>可以将LCD显示器连接到树莓派上，一般用于嵌入式产品开发。通常情况下，HDMI接口已经能满足需求。<img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116164219580.png" alt="image-20220116164219580"></p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/20160614171106516" alt="img"></p><h2 id="绿色板子："><a href="#绿色板子：" class="headerlink" title="绿色板子："></a>绿色板子：</h2><p>液晶屏驱动板，eDP转hdmi<a href="https://www.taobao.com/list/item/573596992161.htm?spm=a21wu.10013406.taglist-content.1.586310ffaQ3QGI">https://www.taobao.com/list/item/573596992161.htm?spm=a21wu.10013406.taglist-content.1.586310ffaQ3QGI</a></p><p>近年来随着电子产业的高速发展，智能显示设备也取得了辉煌的成就，高清显示得到了消费者的青睐。目前高清显示协议接口有RGB、LVDS、MIPI、eDP、HDMI、miniLVDS、V-by-One等</p><p><img src="https://images-1312692717.cos.ap-nanjing.myqcloud.com/img/image-20220116165446262.png" alt="image-20220116165446262"></p><h2 id="蓝色板子"><a href="#蓝色板子" class="headerlink" title="蓝色板子"></a>蓝色板子</h2><p>触摸屏驱动，电容屏触摸 IIC转USB，免驱动。</p>]]></content>
    
    
    <summary type="html">重温曾在福晴做的这套树莓派外接显示器的解决方案。</summary>
    
    
    
    <category term="raspberrypi" scheme="https://tsuiwade.github.io/categories/raspberrypi/"/>
    
    
    <category term="raspberrypi" scheme="https://tsuiwade.github.io/tags/raspberrypi/"/>
    
  </entry>
  
</feed>
