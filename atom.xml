<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TsuiWade&#39;s blog</title>
  
  
  <link href="https://tsuiwade.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsuiwade.github.io/"/>
  <updated>2021-03-15T16:11:50.000Z</updated>
  <id>https://tsuiwade.github.io/</id>
  
  <author>
    <name>tsuiwade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>blog18-GithubActions</title>
    <link href="https://tsuiwade.github.io/2021/03/15/blog19-GithubActions/"/>
    <id>https://tsuiwade.github.io/2021/03/15/blog19-GithubActions/</id>
    <published>2021-03-15T16:11:50.000Z</published>
    <updated>2021-03-15T16:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>DevOps</p><p>CI/CD（持续集成、持续部署）</p><p>GitHub Actions 部署爬虫并定时发送邮件</p><p><a href="https://blog.csdn.net/a12355556/article/details/112099143">https://blog.csdn.net/a12355556/article/details/112099143</a></p><p>newsexpress—利用github_actions建立自动运行爬取学校官网通知并自动发送邮件的小玩意</p><p><a href="https://www.cnblogs.com/roccoshi/p/13144078.html">https://www.cnblogs.com/roccoshi/p/13144078.html</a></p><p>github:epc ustc</p>]]></content>
    
    
    <summary type="html">挖坑、爬虫、deploy.yml</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【第18篇博客】探索树莓派64位系统</title>
    <link href="https://tsuiwade.github.io/2021/03/14/blog18_RasperryPi64bit/"/>
    <id>https://tsuiwade.github.io/2021/03/14/blog18_RasperryPi64bit/</id>
    <published>2021-03-14T00:13:31.000Z</published>
    <updated>2021-03-13T00:13:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于树莓派官方推荐的版本仍是32位，本博客探索64位版本。</p><p><a href="https://www.codenong.com/37790029/">https://www.codenong.com/37790029/</a></p><p>Raspberry Pi Type 3具有64位CPU，但其体系结构不是arm64，而是armhf。armhf代表” arm hard float”，是为具有硬件浮点支持的arm处理器(armv7 +)的debian端口指定的名称。<br>arm64和armhf有什么区别？</p><p>armhf代表” arm hard float”，是为具有硬件浮点支持的arm处理器(armv7 +)的debian端口指定的名称。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:~$ dpkg --print-architecture</span><br><span class="line">armhf</span><br></pre></td></tr></table></figure><p>在树莓派官方推荐的32位系统中将返回armhf，在官方推荐的32位系统升级64位后的系统也返回armhf，只有按下文下载的系统才会返回arm64。</p><h3 id="如何安装64位树莓派系统"><a href="#如何安装64位树莓派系统" class="headerlink" title="如何安装64位树莓派系统"></a>如何安装64位树莓派系统</h3><p><a href="https://raspberrytips.com/raspberry-pi-os-64-bits-vs-32-bits/">https://raspberrytips.com/raspberry-pi-os-64-bits-vs-32-bits/</a></p><p><strong>Raspberry Pi OS is available only in a 32-bit version. There is a 64-bit version in development, but it’s not stable yet.<br>When the CPU is compatible, a 64-bit operating system improves the program performances.</strong></p><p><strong>You can expect an overall boost of about 25% in performance with a 64-bit operating system on a compatible device. And some apps will benefit even more from it.</strong></p><p><strong>On the official website and in the Raspberry Pi Imager, you’ll only find the 32-bit version. You need to go directly <a href="https://downloads.raspberrypi.org/raspios_arm64/images/">to this link</a> to find the latest versions available.</strong></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210530152132577.png" alt="image-20210530152132577"></p><p>可能出现某个版本系统无法安装的情况，换一个即可。</p><p>但是存在一些问题。<strong>Another thing you will notice is that a few apps are missing in the “Recommended Software” tool.</strong>For example, there is no Minecraft Pi or Mathematica that you can install directly from there.<br>These software packages don’t have a build available for the 64-bit operating system.</p><p>上一篇博客可看到系统的架构是v7l，为32位系统。</p><p>下面显示安装的树莓派64位系统的信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@pi:~ $ pi@pi:~ $ uname -a</span><br><span class="line">Linux pi 5.4.51-v8+ #1333 SMP PREEMPT Mon Aug 10 16:58:35 BST 2020 aarch64 GNU&#x2F;Linux</span><br><span class="line">pi@pi:~ $ cat &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">-bash: pi@pi:~：未找到命令</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : fp asimd evtstrm crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">Hardware        : BCM2835</span><br><span class="line">Revision        : c03112</span><br><span class="line">Serial          : 1000000060357d6d</span><br><span class="line">Model           : Raspberry Pi 4 Model B Rev 1.2</span><br></pre></td></tr></table></figure><h3 id="芯片版本BCM2711-or-BCM2835"><a href="#芯片版本BCM2711-or-BCM2835" class="headerlink" title="芯片版本BCM2711 or BCM2835"></a>芯片版本BCM2711 or BCM2835</h3><p>查看当前芯片版本，显示为4核心，但是芯片名字却是BCM2835，这是一个很老的芯片。在树莓派zero和1上使用的，新的树莓派4B是BCM2711，拿起板子我能明显看到 芯片上的丝印字，为什么cpuinfo命令查出来的是错误的呢？因为内核只许设置1个值，如果设置不同的值就要改代码，这会导致上游集成更加麻烦。建议查版本用cat /proc/device-tree/model来看。</p><p>版本参考这里就是准确的 <a href="https://shumeipai.nxez.com/raspberry-pi-revision-codes">https://shumeipai.nxez.com/raspberry-pi-revision-codes</a> 或 <a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md">https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md</a> 。从 4.9 版的内核开始，所有的树莓派都显示为 BCM2835，即便实际上是 BCM2836 和 BCM2837 或2837和2711 处理器。因此仅用这串字符来作为判断依据是不够的。</p><p>cat /proc/cpuinfo 打印的信息里面，包含 Hardware: BCM2835 硬件架构码，但这并不是 CPU 型号，而是 Linux 内核内置的，代表树莓派系列的硬件架构码。</p><p>这个官方也解释过了：<br>Why does cpuinfo report I have a BCM2835? The upstream Linux kernel developers had decided that all models of Raspberry Pi return bcm2835 as the SoC name. At Raspberry Pi we like to use as much upstream kernel code as possible, as it makes software maintenance much easier, so we use this code. Unfortunately it means that cat /proc/cpuinfo is inaccurate for the Raspberry Pi 2, Raspberry Pi 3 and Raspberry Pi 4, which use the bcm2836/bcm2837, bcm2837 and bcm2711 respectively. You can use cat /proc/device-tree/model to get an accurate description of the SoC on your Raspberry Pi model.</p><h3 id="操作系统版本—指令集版本ARMv7-or-ARMv8"><a href="#操作系统版本—指令集版本ARMv7-or-ARMv8" class="headerlink" title="操作系统版本—指令集版本ARMv7 or ARMv8"></a>操作系统版本—指令集版本ARMv7 or ARMv8</h3><p>ARMv7 是32位。</p><p>ARMv8架构引入了对ARM架构的64位支持，重点在于节能的实现，同时保持与现有32位软件的兼容性。通过采用干净的方法，ARMv8-A处理器扩展了可用的性能范围，同时保持了ARM处理器的低功耗特性，这将为未来最具创新性和效率的设备提供动力。ARM有3种不同的产品级别支持ARMv8-A架构：高性能，高效率和超高效率。</p><p>ARMv8-A为ARM体系结构引入了64位体系结构支持，其中包括：</p><p>64位通用寄存器，SP（堆栈指针）和PC（程序计数器）</p><p>64位数据处理和扩展虚拟寻址<br>两个主要执行状态：</p><p>AArch64 - 64位执行状态，包括异常模式，内存模式，程序员模型和指令集支持</p><p>AArch32 - 32位执行状态，包括异常模型，存储器模型，程序员模型和支持该状态的指令集</p><p>低于ARMv8（如ARMv7）是32位。</p><p><a href="https://www.cnblogs.com/pingwen/p/13455876.html">https://www.cnblogs.com/pingwen/p/13455876.html</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ uname -a</span><br><span class="line">Linux raspberrypi 5.10.17-v8+ #1414 SMP PREEMPT Fri Apr 30 13:23:25 BST 2021 aarch64 GNU&#x2F;Linux</span><br><span class="line">pi@raspberrypi:~ $ uname -m</span><br><span class="line">aarch64</span><br><span class="line">pi@pi:~ $ getconf LONG_BIT</span><br><span class="line">64</span><br></pre></td></tr></table></figure><p>ARMv8指令集分为Aarch64和Aarch32指令集，而ARMv7使用的是A32和T16指令集（分别为32位和16位）。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/0" alt=""></p><p>再补充一个小知识，armv7不是arm7，做嵌入式的可能比较清楚的，但做纯PC的程序员就比较迷糊了。arm7，8, 9是芯片版本，而v7，v8是指令集版本。</p><p>查看当前操作系统版本，有的是v7l，l是小端的cpu。</p><h3 id="架构aarch64-or-armv7l"><a href="#架构aarch64-or-armv7l" class="headerlink" title="架构aarch64 or armv7l"></a>架构aarch64 or armv7l</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -m 显示主机类型</span><br></pre></td></tr></table></figure><h3 id="linux版本buster"><a href="#linux版本buster" class="headerlink" title="linux版本buster"></a>linux版本buster</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@pi:~ $ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Debian</span><br><span class="line">Description:  Debian GNU&#x2F;Linux 10 (buster)</span><br><span class="line">Release:    10</span><br><span class="line">Codename:    buster</span><br></pre></td></tr></table></figure><p><a href="https://www.debian.org/releases/index.zh-cn.html">https://www.debian.org/releases/index.zh-cn.html</a></p><p>当前 Debian 的稳定版版本号是 10，开发代号为 <em>buster</em>。Buster，来自皮克斯《玩具总动员》电影中狗的名字。<br>这个版本基于最新的 Debian 开发，甚至比 Debian 的官方版本更早发布。</p><h5 id="发行版目录"><a href="#发行版目录" class="headerlink" title="发行版目录"></a>发行版目录</h5><ul><li>下一代 Debian 正式发行版的代号为 bullseye — 测试中，发布时间尚未确定 </li><li><a href="https://www.debian.org/releases/buster/">Debian 10（buster）</a> — 当前的稳定（stable）版</li><li><a href="https://www.debian.org/releases/stretch/">Debian 9（stretch）</a> — 旧的稳定（oldstable）版，现有<a href="https://wiki.debian.org/LTS">长期支持</a></li><li><a href="https://www.debian.org/releases/jessie/">Debian 8（jessie）</a> — 更旧的稳定（oldoldstable）版，现有<a href="https://wiki.debian.org/LTS/Extended">扩展长期支持</a></li><li><a href="https://www.debian.org/releases/wheezy/">Debian 7（wheezy）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/squeeze/">Debian 6.0（squeeze）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/lenny/">Debian GNU/Linux 5.0（lenny）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/etch/">Debian GNU/Linux 4.0（etch）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/sarge/">Debian GNU/Linux 3.1（sarge）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/woody/">Debian GNU/Linux 3.0（woody）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/potato/">Debian GNU/Linux 2.2（potato）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/slink/">Debian GNU/Linux 2.1（slink）</a> — 被淘汰的稳定版</li><li><a href="https://www.debian.org/releases/hamm/">Debian GNU/Linux 2.0（hamm）</a> — 被淘汰的稳定版</li></ul><h3 id="树莓派4B使用Raspbian官方64位系统内核"><a href="#树莓派4B使用Raspbian官方64位系统内核" class="headerlink" title="树莓派4B使用Raspbian官方64位系统内核"></a>树莓派4B使用Raspbian官方64位系统内核</h3><p><a href="https://www.mmuaa.com/post/0c9188ffde4e2cff.html">https://www.mmuaa.com/post/0c9188ffde4e2cff.html</a></p><h3 id="树莓派版本信息"><a href="#树莓派版本信息" class="headerlink" title="树莓派版本信息"></a>树莓派版本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getconf&#96; &#96;LONG_BIT    &#96;&#96;# 查看系统位数&#96;&#96;</span><br><span class="line">uname&#96; &#96;-a      &#96;&#96;# kernel 版本&#96;&#96;</span><br><span class="line">&#x2F;opt&#x2F;vc&#x2F;bin&#x2F;vcgencmd&#96; &#96;version  &#96;&#96;# firmware版本&#96;&#96;</span><br><span class="line">strings&#96; &#96;&#x2F;boot&#x2F;start&#96;&#96;.elf | &#96;&#96;grep&#96; &#96;VC_BUILD_ID  &#96;&#96;# firmware版本&#96;&#96;</span><br><span class="line">cat&#96; &#96;&#x2F;proc&#x2F;version&#96;    &#96;# kernel&#96;&#96;</span><br><span class="line">cat&#96; &#96;&#x2F;etc&#x2F;os-release&#96;   &#96;# OS版本资讯&#96;&#96;</span><br><span class="line">cat&#96; &#96;&#x2F;etc&#x2F;issue&#96;     &#96;# Linux distro 版本&#96;&#96;</span><br><span class="line">cat&#96; &#96;&#x2F;etc&#x2F;debian_version&#96;   &#96;# Debian版本编号</span><br></pre></td></tr></table></figure><h2 id="树莓派系统linux桌面运行flutter"><a href="#树莓派系统linux桌面运行flutter" class="headerlink" title="树莓派系统linux桌面运行flutter"></a>树莓派系统linux桌面运行flutter</h2><p><a href="https://snapcraft.io/install/flutter/raspbian">https://snapcraft.io/install/flutter/raspbian</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libGL error: unable to load driver: swrast_dri.so</span><br><span class="line">libGL error: failed to load driver: swrast</span><br><span class="line"></span><br><span class="line">** (dummy_desktop:10814): WARNING **: Failed to start Flutter renderer: Unable to create a GL context</span><br><span class="line"></span><br><span class="line">** (dummy_desktop:10814): WARNING **: Unable to retrieve framework response: No engine to send to</span><br></pre></td></tr></table></figure><p><a href="https://github.com/flutter/flutter/issues/76178">https://github.com/flutter/flutter/issues/76178</a></p>]]></content>
    
    
    <summary type="html">该文章尝试探索树莓派64位系统</summary>
    
    
    
    <category term="raspberrypi" scheme="https://tsuiwade.github.io/categories/raspberrypi/"/>
    
    
    <category term="raspberrypi" scheme="https://tsuiwade.github.io/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>【第17篇博客】windows下开发树莓派运行flutter项目</title>
    <link href="https://tsuiwade.github.io/2021/03/13/blog17_RasperryPi/"/>
    <id>https://tsuiwade.github.io/2021/03/13/blog17_RasperryPi/</id>
    <published>2021-03-13T00:13:31.000Z</published>
    <updated>2021-03-13T00:13:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux有非常多的发行版本，从性质上划分，大体分为由商业公司维护的商业版本与由开源社区维护的免费发行版本。开源社区版本以debian为代表。这些版本各有不同的特点，在不同的应用领域发挥着不同的作用，不能一概而论。下面就这些不同的Linux发行版进行简单的分析。</p><p><strong>Ubuntu</strong></p><p>Ubuntu近些年的粉丝越来越多，Ubuntu有着漂亮的用户界面，完善的包管理系统，强大的软件源支持，丰富的技术社区，Ubuntu还对大多数硬件有着良好的兼容性，包括最新的图形显卡等等。这一切让Ubuntu越来越向大众化方向发展。但别忘了：你所需要的只是一个简约、稳定、易用的服务器系统而已！</p><p>Ubuntu的图形界面固然漂亮，但这也决定了它最佳的应用领域是桌面操作系统而非服务器操作系统。如何你希望在学习Linux的过程中有个沉浸式的环境，那么Ubuntu的确不错：仅仅安装在自己的电脑中而非服务器中。从这一点来讲，Ubuntu并没有在VPS安装的操作系统选择之列，相信你也不会为了那数百M的驱动与宝贵的内存买单。</p><p><strong>CentOS</strong></p><p>你会发现非常多的商业公司部署在生产环境上的服务器都是使用的CentOS系统，CentOS是从RHEL源代码编译的社区重新发布版。CentOS简约，命令行下的人性化做得比较好，稳定，有着强大的英文文档与开发社区的支持。与Redhat有着相同的渊源。虽然不单独提供商业支持，但往往可以从Redhat中找到一丝线索。相对debian来说，CentOS略显体积大一点。是一个非常成熟的Linux发行版。</p><p><strong>Debian</strong></p><p>一般来说Debian作为适合于服务器的操作系统，它比Ubuntu要稳定得多。可以说稳定得无与伦比了。debian整个系统，只要应用层面不出现逻辑缺陷，基本上固若金汤，是个常年不需要重启的系统（当然，这是夸张了点，但并没有夸大其稳定性）。debian整个系统基础核心非常小，不仅稳定，而且占用硬盘空间小，占用内存小。128M的VPS即可以流畅运行Debian，而CentOS则会略显吃力。但是由于Debian的发展路线，使它的帮助文档相对于CentOS略少，技术资料也少一些。</p><p><strong>Raspbian is a free operating system based on Debian Linux, and it is optimized Raspberry Pi.</strong></p><h2 id="下载和安装Raspberry-Pi-OS（以前称为Raspbian）"><a href="#下载和安装Raspberry-Pi-OS（以前称为Raspbian）" class="headerlink" title="下载和安装Raspberry Pi OS（以前称为Raspbian）"></a>下载和安装Raspberry Pi OS（以前称为Raspbian）</h2><p>打开raspberrypi官网，www.raspberrypi.org/ ，进入<code>software</code>，可以看到有三种下载方式。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210316090859590.png" alt="image-20210316090859590"></p><p>我选择full版，带有推荐软件的。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318231323830.png" alt="image-20210318231323830"></p><p>下载2021-01-11-raspios-buster-armhf-full.zip，共2.8g</p><p>再下载balenaEtcher软件或者Raspberry Pi Imager，是一种镜像刻录工具。打开来，选择Flash from file，选择刚刚下载的2.8g的zip。第二步select target选择自己的SD卡，记得需要格式化。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318231625865.png" alt="image-20210318231625865"></p><p>刻录完成之后，SD卡插至树莓派上，接上电源，自动安装系统，接着填写必要信息，接上wifi或网线，系统就安装完成了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~ $ uname -a</span><br><span class="line">Linux raspberrypi 5.10.11-v7l+ #1399 SMP Thu Jan 28 12:09:48 GMT 2021 armv7l GNU&#x2F;Linux</span><br><span class="line">pi@raspberrypi:~ $ cat &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">model name      : ARMv7 Processor rev 3 (v7l)</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">model name      : ARMv7 Processor rev 3 (v7l)</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">model name      : ARMv7 Processor rev 3 (v7l)</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">model name      : ARMv7 Processor rev 3 (v7l)</span><br><span class="line">BogoMIPS        : 108.00</span><br><span class="line">Features        : half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt vfpd32 lpae evtstrm crc32</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 7</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd08</span><br><span class="line">CPU revision    : 3</span><br><span class="line"></span><br><span class="line">Hardware        : BCM2711</span><br><span class="line">Revision        : b03111</span><br><span class="line">Serial          : 100000001c6c37b2</span><br><span class="line">Model           : Raspberry Pi 4 Model B Rev 1.1</span><br></pre></td></tr></table></figure><h2 id="安装dart"><a href="#安装dart" class="headerlink" title="安装dart"></a><del>安装dart</del></h2><p><del><a href="https://blog.csdn.net/weixin_44601948/article/details/105620588">https://blog.csdn.net/weixin_44601948/article/details/105620588</a></del></p><p>Dart SDK已经在打包在Flutter SDK里了，没有必要单独安装Dart。</p><h2 id="windows下安装flutter"><a href="#windows下安装flutter" class="headerlink" title="windows下安装flutter"></a>windows下安装flutter</h2><p><a href="https://flutter.cn/docs/get-started/install/windows">https://flutter.cn/docs/get-started/install/windows</a></p><p>下载安装</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210317101157787.png" alt="image-20210317101157787"></p><p>解压 环境变量</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210317101223767.png" alt="image-20210317101223767"></p><h3 id="安装-Android-Studio"><a href="#安装-Android-Studio" class="headerlink" title="安装 Android Studio"></a><del>安装 Android Studio</del></h3><p><del><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210317101415553.png" alt="image-20210317101415553"></del></p><p><del>运行 Android Studio，并进入 ‘Android Studio Setup Wizard’，这会安装最新的 Android SDK， Android SDK Platform-Tools 以及 Android SDK Build-Tools，这些都是在开发 Android Flutter 应用时所需要的。</del></p><p>记得sdk安装的目录！</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210317121537227.png" alt="image-20210317121537227"></p><p>一路y，最终。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210317121600734.png" alt="image-20210317121600734"></p><h2 id="flutter使用"><a href="#flutter使用" class="headerlink" title="flutter使用"></a>flutter使用</h2><p>一些常用flutter指令</p><p>flutter creat 创建项目</p><p>进入项目根目录</p><p>flutter run</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210319194525325.png" alt="image-20210319194525325"></p><h2 id="Flutter应用模板"><a href="#Flutter应用模板" class="headerlink" title="Flutter应用模板"></a>Flutter应用模板</h2><ol><li>导入包。</li></ol><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><p>此行代码作用是导入了Material UI组件库。<a href="https://material.io/guidelines/">Material (opens new window)</a>是一种标准的移动端和web端的视觉设计语言， Flutter默认提供了一套丰富的Material风格的UI组件。</p><ol><li>应用入口。</li></ol><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br></pre></td></tr></table></figure><ul><li>与C/C++、Java类似，Flutter 应用中<code>main</code>函数为应用程序的入口。<code>main</code>函数中调用了<code>runApp</code> 方法，它的功能是启动Flutter应用。<code>runApp</code>它接受一个<code>Widget</code>参数，在本示例中它是一个<code>MyApp</code>对象，<code>MyApp()</code>是Flutter应用的根组件。</li><li><code>main</code>函数使用了(<code>=&gt;</code>)符号，这是Dart中单行函数或方法的简写。</li></ul><ol><li>应用结构。</li></ol><ul><li><code>MyApp</code>类代表Flutter应用，它继承了 <code>StatelessWidget</code>类，这也就意味着应用本身也是一个widget。</li><li>在Flutter中，大多数东西都是widget（后同“组件”或“部件”），包括对齐(alignment)、填充(padding)和布局(layout)等，它们都是以widget的形式提供。</li><li>Flutter在构建页面时，会调用组件的<code>build</code>方法，widget的主要工作是提供一个build()方法来描述如何构建UI界面（通常是通过组合、拼装其它基础widget）。</li><li><code>MaterialApp</code> 是Material库中提供的Flutter APP框架，通过它可以设置应用的名称、主题、语言、首页及路由列表等。<code>MaterialApp</code>也是一个widget。</li><li><code>home</code> 为Flutter应用的首页，它也是一个widget。</li></ul><ol><li><p>首页 </p><p><code>MyHomePage</code> 是Flutter应用的首页，它继承自<code>StatefulWidget</code>类，表示它是一个有状态的组件（Stateful widget）。关于Stateful widget我们将在第三章“Widget简介”一节仔细介绍，现在我们只需简单认为有状态的组件（Stateful widget） 和无状态的组件（Stateless widget）有两点不同：</p><ol><li><p>Stateful widget可以拥有状态，这些状态在widget生命周期中是可以变的，而Stateless widget是不可变的。</p></li><li><p>Stateful widget至少由两个类组成：</p><ul><li>一个<code>StatefulWidget</code>类。</li><li>一个 <code>State</code>类； <code>StatefulWidget</code>类本身是不变的，但是<code>State</code>类中持有的状态在widget生命周期中可能会发生变化。</li></ul><p><code>_MyHomePageState</code>类是<code>MyHomePage</code>类对应的状态类。</p></li></ol></li></ol><h2 id="树莓派4B板载资源介绍"><a href="#树莓派4B板载资源介绍" class="headerlink" title="树莓派4B板载资源介绍"></a>树莓派4B板载资源介绍</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318112405257.png" alt="image-20210318112405257"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318112640216.png" alt="image-20210318112640216"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/21545108-38395d45b6e243d5.png" alt="img"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/c822fb58546d27deba8091a729ccf7d892b5b3a0.png@1320w_1110h.webp" alt="img"></p><h2 id="windows系统下vscode通过ssh远程树莓派"><a href="#windows系统下vscode通过ssh远程树莓派" class="headerlink" title="windows系统下vscode通过ssh远程树莓派"></a>windows系统下vscode通过ssh远程树莓派</h2><p><a href="https://code.visualstudio.com/docs/remote/ssh">https://code.visualstudio.com/docs/remote/ssh</a></p><ul><li><p>在树莓派系统的<code>applications menu</code>的<code>首选项</code>的<code>raspberry pi configuration</code>中<code>Interfaces</code>中开启<code>SSH</code>，</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210528155231462.png" alt="image-20210528155231462"></p></li><li><p>修改树莓派的用户名，在<code>System</code>选项卡中修改<code>password</code>和<code>Hostname</code>，假定都改为pi。 打开一个终端会话，您应该看到如下提示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi: ~ $</span><br></pre></td></tr></table></figure><p>在每个命令后都会看到的提示（pi @ raspberrypi：〜$）提醒您用户名User（pi）和计算机名HostName（raspberrypi）。 〜字符是您的主目录（/ home / pi）的简写。</p><p><strong>这里我修改的原因在于一直是这里配置不对，当然如果你能分清以上概念，应该也是可以配置成功。</strong></p></li></ul><p>接着在客户端windows的vscode上，输入<code>F1</code>打开命令面板，输入<code>remote ssh connect to host</code>，选择<code>Configure SSH Hosts</code>. 再选择自己用户目录下.ssh文件夹下的config文件，进行配置，Host填ip地址。树莓派 Raspbian 系统默认的主机名HostName为 raspberrypi，这里我们修改为</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/]APMJ58}4YM%{JR9@E5PA0U.png" alt="img"></p><p>接着再进行Connect to host选择刚刚的10.0.1.83就可以连接到树莓派了。</p><p>成功。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210528154606211.png" alt="image-20210528154606211"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210528161322051.png" alt="image-20210528161322051"></p><h2 id="使用PuTTY连接树莓派"><a href="#使用PuTTY连接树莓派" class="headerlink" title="使用PuTTY连接树莓派"></a>使用PuTTY连接树莓派</h2><p><a href="https://www.w3schools.com/nodejs/nodejs_raspberrypi.asp">https://www.w3schools.com/nodejs/nodejs_raspberrypi.asp</a></p><p>下载putty，查看树莓派右上角的ip。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210530120945956.png" alt="image-20210530120945956"></p><p>Hostname： pi</p><p>password : pi</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318160026149.png" alt=""></p><p><strong>You are now able to run your Raspberry Pi in “Headless-mode”, meaning you do not need a monitor or keyboard. And if you have a WiFi connection, you do not need a ethernet cable either, just the power cable!</strong></p><p>如果需要安装nodejs，可以继续参考上面的链接。</p><h2 id="用windows远程桌面连接树莓派，通过xrdp"><a href="#用windows远程桌面连接树莓派，通过xrdp" class="headerlink" title="用windows远程桌面连接树莓派，通过xrdp"></a>用<code>windows远程桌面</code>连接树莓派，通过xrdp</h2><p><a href="https://gitee.com/null_695_7527/raspberry_school_learning/tree/master/01.%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%87%86%E5%A4%87">https://gitee.com/null_695_7527/raspberry_school_learning/tree/master/01.%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E6%9C%BA%E5%87%86%E5%A4%87</a></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318161025649.png" alt="image-20210318161025649"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210318161050426.png" alt="image-20210318161050426"></p><h2 id="使用flutter-pi运行flutter程序"><a href="#使用flutter-pi运行flutter程序" class="headerlink" title="使用flutter-pi运行flutter程序"></a>使用flutter-pi运行flutter程序</h2><p>在上文提到的，先在windows下开发应用，接着通过flutter-pi运行flutter程序。</p><p>首先需要安装flutter引擎二进制文件<a href="https://github.com/ardera/flutter-engine-binaries-for-arm">https://github.com/ardera/flutter-engine-binaries-for-arm</a> 。<strong>其中注意，在windows上开发的flutter SDK版本需要在stable模式下，并且需要和flutter-pi的版本一致。</strong></p><p>按照 <a href="https://github.com/ardera/flutter-pi">https://github.com/ardera/flutter-pi</a> 进行配置即可。</p><h2 id="树莓派配置git镜像"><a href="#树莓派配置git镜像" class="headerlink" title="树莓派配置git镜像"></a>树莓派配置git镜像</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/">https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/</a></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;git-repo -o repo</span><br><span class="line">chmod +x repo</span><br></pre></td></tr></table></figure><h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>repo的运行过程中会尝试访问官方的git源更新自己，如果想使用tuna的镜像源进行更新，可以将如下内容复制到你的<code>~/.bashrc</code>里</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export REPO_URL&#x3D;&#39;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;git-repo&#39;</span><br></pre></td></tr></table></figure><p>并重启终端模拟器。</p><p>将代码输入Terminal中即可git clone下载。</p><h2 id="树莓派学习笔记——文件管理及常用命令"><a href="#树莓派学习笔记——文件管理及常用命令" class="headerlink" title="树莓派学习笔记——文件管理及常用命令"></a>树莓派学习笔记——文件管理及常用命令</h2><p><a href="https://blog.csdn.net/youngandyang/article/details/100042966?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/youngandyang/article/details/100042966?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure><p>ctrl+d 关闭终端。</p><p><a href="https://blog.csdn.net/weixin_43336281/article/details/97373288">https://blog.csdn.net/weixin_43336281/article/details/97373288</a></p><p><a href="https://www.jianshu.com/p/67b9e6ebf8a0">https://www.jianshu.com/p/67b9e6ebf8a0</a></p><p>检查包版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-cache policy libstdc++6</span><br></pre></td></tr></table></figure><p><strong>Sudo</strong> 的全称为：<strong>super user do</strong>。 顾名思义：干超级用户才能干的事！所以Sudo最常用的功能就是提升一个命名的执行权限。</p><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。</p><p>apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><p>apt 命令执行需要超级管理员权限(root)。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt [options] [command] [package ...]</span><br></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package</strong>：安装的包名。</li></ul><p>apt 常用命令</p><ul><li><p>列出所有可更新的软件清单命令：<strong>sudo apt update</strong></p></li><li><p>升级软件包：<strong>sudo apt upgrade</strong></p><p>列出可更新的软件包及版本信息：<strong>apt list —upgradeable</strong></p><p>升级软件包，升级前先删除需要更新软件包：<strong>sudo apt full-upgrade</strong></p></li><li><p>安装指定的软件命令：<strong>sudo apt install <package_name></strong></p><p>安装多个软件包：<strong>sudo apt install <package_1> <package_2> <package_3></strong></p></li><li><p>更新指定的软件命令：<strong>sudo apt update <package_name></strong></p></li><li><p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<strong>sudo apt show <package_name></strong></p></li><li><p>删除软件包命令：<strong>sudo apt remove <package_name></strong></p></li><li><p>清理不再使用的依赖和库文件: <strong>sudo apt autoremove</strong></p></li><li><p>移除软件包及配置文件: <strong>sudo apt purge <package_name></strong></p></li><li><p>查找软件包命令： <strong>sudo apt search <keyword></strong></p></li><li><p>列出所有已安装的包：<strong>apt list —installe</strong>d</p></li><li><p>列出所有已安装的包的版本信息：<strong>apt list —all-versions</strong></p></li></ul><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>利用gitee来clone <a href="https://blog.csdn.net/u011386173/article/details/109099134?spm=1001.2014.3001.5501">https://blog.csdn.net/u011386173/article/details/109099134?spm=1001.2014.3001.5501</a></p><p>Flutter开发 - 卡在 Running “flutter pub get” in xxx <a href="https://www.jianshu.com/p/fe1354db42b2">https://www.jianshu.com/p/fe1354db42b2</a></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210322093157733.png" alt="image-20210322093157733"></p><p>windows下设置git代理 <a href="https://blog.csdn.net/qq_29545715/article/details/103576549">https://blog.csdn.net/qq_29545715/article/details/103576549</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux有非常多的发行版本，从性质上划分，大体分为由商业公司维护的商业版本与由开源社区维护的免费发行版本。开源社区版本以debian为代表。这些版本各有不同的特点，在不同的应用领域发挥着不同的作用，不能一概而论。下面就这些不同的Linux发行版进行简单的分析。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="flutter" scheme="https://tsuiwade.github.io/categories/flutter/"/>
    
    
    <category term="raspberrypi" scheme="https://tsuiwade.github.io/tags/raspberrypi/"/>
    
    <category term="flutter" scheme="https://tsuiwade.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>【第16篇博客】DNS解析及浏览器渲染流程</title>
    <link href="https://tsuiwade.github.io/2021/03/12/blog16-DNS/"/>
    <id>https://tsuiwade.github.io/2021/03/12/blog16-DNS/</id>
    <published>2021-03-12T15:32:40.000Z</published>
    <updated>2021-03-12T15:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DNS解析（域名解析）"><a href="#DNS解析（域名解析）" class="headerlink" title="DNS解析（域名解析）"></a>DNS解析（域名解析）</h2><p>今天是遇到我换github博客域名的时候的一个问题，总是自动跳转访问旧的那个网址。带着这个问题，今天就来记录一下。</p><p>当一个用户在地址栏输入www.taobao.com 时，<strong>DNS（Domain Names Service）</strong>解析有大致十个过程，如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/20171211190812796" alt="img"></p><ol><li>浏览器先检查<code>自身缓存</code>中有没有这个域名被解析过对应的ip地址，如果有，解析结束。同时域名被缓存的时间也可通过TTL属性来设置。缓存就是把你之前访问的web资源，比如一些js，css，图片什么的保存在你本机的内存或者磁盘当中。（在图中访问用户的计算机中）。</li><li>如果浏览器缓存中没有（专业点叫还没命中），浏览器会检查操作<code>系统缓存</code>中有没有对应的已解析过的结果。而操作系统也有一个域名解析的过程。在windows中可通过c盘里一个叫hosts的文件来设置，如果你在这里指定了一个域名对应的ip地址（我的第3篇博客中有提到），那浏览器会首先使用这个ip地址。（在图中访问用户的计算机中）</li><li>如果至此还没有命中域名，才会真正请求<code>本地域名服务器（LDNS）</code>来解析这个域名，这台服务器一般在你的城市的某个角落，距离你不会很远，并且这台服务器的性能都很好，一般都会缓存域名解析结果，大约80%的域名解析到这里就完成了。</li><li>如果LDNS仍然没有命中，就直接跳到Root Server <code>根域名服务器</code>请求解析。</li><li><code>根域名服务器</code>返回给LDNS一个所查询域的<code>主域名服务器</code>（gTLD Server，国际顶尖域名服务器，如.com .cn .org等）地址。</li><li>此时LDNS再发送请求给上一步返回的gTLD。</li><li>接受请求的gTLD查找并返回这个域名对应的<code>Name Server</code>的地址，这个Name Server就是网站注册的<code>域名服务器</code>。</li><li>Name Server根据映射关系表找到目标ip，返回给LDNS。</li><li>LDNS缓存这个域名和对应的ip。</li><li>LDNS把解析的结果返回给用户，用户根据TTL值缓存到本地系统缓存中，域名解析过程至此结束。</li></ol><p><strong>总结：</strong></p><p><strong>DNS解析:域名到IP地址的转换过程。</strong></p><p><strong>域名的解析工作由DNS服务器完成。</strong></p><p><strong>解析后可以获取域名相应的IP地址，发送http请求。</strong></p><h2 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h2><p>在域名解析之后，浏览器向服务器发起了http请求，<strong>tcp连接，三次握手</strong>建立tcp连接。TCP协议是面向连接的，所以在传输数据前必须建立连接。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/20190819151449989.png" alt="img"></p><ol><li>客户端向服务器发送连接请求报文； </li><li>服务器端接受客户端发送的连接请求后后回复ACK报文，并为这次连接分配资源。</li><li>客户端接收到ACK报文后也向服务器端发生ACK报文，并分配资源。</li></ol><p>这样TCP连接就建立了。</p><p>在此之后，浏览器开始向服务器发送http请求，请求数据包。请求信息包含一个头部和一个请求体。</p><h2 id="服务器收到请求"><a href="#服务器收到请求" class="headerlink" title="服务器收到请求"></a>服务器收到请求</h2><p>服务器收到浏览器发送的请求信息，返回一个响应头和一个响应体。</p><h2 id="浏览器页面渲染流程（Renderer-Process）"><a href="#浏览器页面渲染流程（Renderer-Process）" class="headerlink" title="浏览器页面渲染流程（Renderer Process）"></a>浏览器页面渲染流程（Renderer Process）</h2><p>浏览器从HTTP服务器获取html文档，核心任务就是把html、css、js、image等资源渲染成用户可以交互的web页面。渲染器进程的主线程将html进行解析，构造DOM数据结构，DOM也就是文档对象模型，是浏览器对页面在其内部的表示形式，是web开发者可以通过JS与之交互的数据结构和API。</p><p>html首先经过Tokeniser标记化，通过词法分析将输入的html内容解析成多个<code>标记</code>，根据识别后的标记进行<code>DOM树</code>构造。</p><p>html代码中往往会引入一些额外的<code>资源</code>，比如图片、css、js脚本等，前两个需要通过网络下载或者从缓存中直接加载，这些资源不会阻塞html的解析，因为他们不会阻塞dom的生成。但当html解析过程中遇到script标签，将停止html解析流程，转而去解析并且执行JS。</p><p>在确定了DOM树之后，接下来需要主线程<code>解析CSS</code>，确定每个DOM节点的计算样式（<code>style</code>）。</p><p>接下来需要确定每个节点需要放在页面的哪个位置，也就是节点的坐标和区域，该阶段被称为layout<code>布局</code>，主线程生成layout tree，与最后显示在屏幕上的节点对应。</p><p>为了保证在屏幕上显示正确的层级，主线程遍历layout tree创建一个绘制记录表（<code>Paint</code> Record），该表记录了绘制的顺序，该阶段被称为<code>绘制</code>。   </p><p>终于到了该把这些信息转化为像素点，显示在屏幕上，该过程称为<code>栅格化</code>（Rastering），由合成器线程负责。</p><p>参考：</p><p><a href="https://blog.csdn.net/m0_37812513/article/details/78775629?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/m0_37812513/article/details/78775629?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a></p><p><a href="https://www.bilibili.com/video/BV1x54y1B7RE/?spm_id_from=333.788.recommend_more_video.-1">https://www.bilibili.com/video/BV1x54y1B7RE/?spm_id_from=333.788.recommend_more_video.-1</a></p>]]></content>
    
    
    <summary type="html">记录一下曾经被问到的一个问题。</summary>
    
    
    
    <category term="前端" scheme="https://tsuiwade.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="DNS" scheme="https://tsuiwade.github.io/tags/DNS/"/>
    
    <category term="浏览器" scheme="https://tsuiwade.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【第15篇博客】使用新的免费短域名</title>
    <link href="https://tsuiwade.github.io/2021/03/11/blog15-NewDomain/"/>
    <id>https://tsuiwade.github.io/2021/03/11/blog15-NewDomain/</id>
    <published>2021-03-11T22:35:24.000Z</published>
    <updated>2021-03-11T22:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册freenom免费域名"><a href="#注册freenom免费域名" class="headerlink" title="注册freenom免费域名"></a>注册freenom免费域名</h2><p><a href="https://www.freenom.com/en/index.html">https://www.freenom.com/en/index.html</a></p><p>我们熟知的免费域名，有.tk，.ml，.cf。.tk域名是南太平洋岛国托克劳的顶级域名，.ml则是马里的顶级域名，.cf则是中非共和国的域名，不过搜索引擎基本上已经不收录了，虽然这些域名和.cn其实没什么区别。以前这些免费域名都是分开注册的，后来都被托管到了freenom，更加方便大家的注册。不过先在freenom也办法直接注册了，当你注册的时候会显示如下:</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210311231105623.png" alt="image-20210311231105623"></p><p>建议先用google登录！然后寻找自己想要的域名。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210311231131960.png" alt="image-20210311231131960"></p><p>接着去结账</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210311232743765.png" alt="image-20210311232743765"></p><p>接下来可以看到自己已经申请成功。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210311232920762.png" alt="image-20210311232920762"></p><p>接下来选择我们要设置的域名，比如说.tk，点击manage domain。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313211509151.png" alt="image-20210313211509151"></p><p>后续需要先进行Cloudflare方面的设置。</p><h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p><a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>登录后添加站点</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313212659363.png" alt="image-20210313212659363"></p><p>选择0美元的继续</p><p><img src="C:\Users\tsui\AppData\Roaming\Typora\typora-user-images\image-20210313212744810.png" alt="image-20210313212744810"></p><p>接下来进行添加DNS记录</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313212840605.png" alt="image-20210313212840605"></p><p>添加2条类型为CNAME的记录，名称分别为@和www，分别进行保存，如下</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313213144831.png" alt="image-20210313213144831"></p><p>接下来显示我们还需要做的事情，就是到我们的注册机构，也就是freenom中更改名称服务器。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313213309448.png" alt="image-20210313213309448"></p><p>回到freenom设置我们的<strong><code>名称服务器</code></strong>。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313213521211.png" alt="image-20210313213521211"></p><p>再回到cloudflare中，进行检查。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313213631282.png" alt="image-20210313213631282"></p><p>是的，接下来就收到了邮件。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313222840472.png" alt="image-20210313222840472"></p><p>回到cloudflare</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313222942285.png" alt="image-20210313222942285"></p><h2 id="Github仓库Settings"><a href="#Github仓库Settings" class="headerlink" title="Github仓库Settings"></a>Github仓库Settings</h2><p>找到GitHub Pages项。</p><p>输入刚才申请的域名如<code>tsuiwade.tk</code>，点击保存。下面那个HTTPS证书会在你保存域名后自动帮你申请，不过可能最长需要24小时才能申请成功。</p><p>如果上面的步骤都完成后，等待一会，在浏览器的地址栏输入新增域名，应该就可以跳转到你的博客页面了。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210311233633554.png" alt="image-20210311233633554"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313223613784.png" alt="image-20210313223613784"></p><h2 id="本地CNAME文件"><a href="#本地CNAME文件" class="headerlink" title="本地CNAME文件"></a>本地CNAME文件</h2><p>这是困扰了我很多天的问题，在于每当我重新提交代码的时候，我的博客仓库中的站点域名又被清空为原先的.github.io域名，而非自己在<code>Custom domain</code>中填写的其他域名。</p><p>如果需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录。</p><p>A记录是解析域名到IP，CNAME是解析域名到另外一个域名。</p><p><strong>A记录</strong></p><p>A记录，即Address记录，它并不是一个IP或者一个域名，我们可以把它理解为一种指向关系：域名 <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111 主机名 DD → 222.222.222.222</p><p>也就是当你访问这些域名或者主机名的时候，DNS服务器上会通过A记录会帮你解析出相应的IP地址，以达到后续访问目的。所以A记录是IP解析，直接将域名或主机名指向某个IP。</p><p><strong>CNAME</strong></p><p>CNAME记录，也叫别名记录，相当于给A记录中的域名起个小名儿，比如<a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a>的小名儿就叫<a href="https://link.zhihu.com/?target=http%3A//www.yy.com">http://www.yy.com</a>好了，然后CNAME记录也和A记录一样，是一种指向关系，把小名儿<a href="https://link.zhihu.com/?target=http%3A//www.yy.com">http://www.yy.com</a>指向了<a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a>，然后通过A记录，<a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a>又指向了对应的IP：</p><p><a href="https://link.zhihu.com/?target=http%3A//www.yy.com">http://www.yy.com</a> → <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111</p><p>这样一来就能通过它的小名儿直接访问111.111.111.111了。</p><p>这时候有人问：这不多了一步嘛，不嫌麻烦？</p><p>假如这个时候我又想给原域名取几个小名儿，分别叫<a href="https://link.zhihu.com/?target=http%3A//www.cc.com">http://www.cc.com</a>和<a href="https://link.zhihu.com/?target=http%3A//www.kk.com">http://www.kk.com</a>那么存在下列指向关系：</p><p><a href="https://link.zhihu.com/?target=http%3A//www.yy.com">http://www.yy.com</a> → <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111</p><p><a href="https://link.zhihu.com/?target=http%3A//www.cc.com">http://www.cc.com</a> → <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111</p><p><a href="https://link.zhihu.com/?target=http%3A//www.kk.com">http://www.kk.com</a> → <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111</p><p>突然服务器的IP地址因为一些不可描述的原因要换了，不再是111.111.111.111了，换成了333.333.333.333，这时候你发现，只要把<a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a>的指向修改一下即可：</p><p>域名 <a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 333.333.333.333</p><p>这时候你又发现了，原来他的小名儿不需要做更改，直接就能访问服务器，因为他们都只指向了<a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a>，服务器IP改没改它们不管</p><p>那么假如不用CNAME，直接做A记录会怎样？</p><p><a href="https://link.zhihu.com/?target=http%3A//www.yy.com">http://www.yy.com</a> → 111.111.111.111</p><p><a href="https://link.zhihu.com/?target=http%3A//www.cc.com">http://www.cc.com</a> → 111.111.111.111</p><p><a href="https://link.zhihu.com/?target=http%3A//www.xx.com">http://www.xx.com</a> → 111.111.111.111</p><p><a href="https://link.zhihu.com/?target=http%3A//www.kk.com">http://www.kk.com</a> → 111.111.111.111</p><p>那么当111.111.111.111更改的时候，全部相关A记录指向关系都要做更改，这才叫麻烦…</p><p>因此我们这边，实际上指向的关系是，tsuiwade.ml域名指向tsuiwade.github.io，当访问ml时，DNS商回把这个这个请求解析发到github去，github内部进行处理，那么github要如何知道它应该响应哪个仓库的内容回去呢？是根据你在仓库Gitpages设置的自定义域名，来给你响应对应仓库的静态内容。</p><p><strong>CNAME的应用</strong></p><p>比较多的是用在CDN加速上</p><p>举个CDN的栗子 ：假如你是DD公司老板，你公司中的一台IP为1.1.1.1的服务器，注册了域名为<a href="https://link.zhihu.com/?target=http%3A//www.dd.com">http://www.dd.com</a>，要对外提供客户访问。随着公司越做越大，访问量也越来越多，服务器顶不住了，你去找CDN提供商购买CDN加速服务，这个时候他们要求你的域名做个CNAME指向他们给你的一个域名叫<a href="https://link.zhihu.com/?target=http%3A//www.xdd.com">http://www.xdd.com</a>，当用户访问<a href="https://link.zhihu.com/?target=http%3A//www.dd.com">http://www.dd.com</a>的时候，本地DNS会获得CDN提供的CNAME域名：<a href="https://link.zhihu.com/?target=http%3A//www.xdd.com">http://www.xdd.com</a>，然后再次向DNS调度系统发出请求，通过DNS调度系统的智能分析，把这个<a href="https://link.zhihu.com/?target=http%3A//www.xdd.com">http://www.xdd.com</a>指向一个（离用户地理位置最近的）CDN提供商的服务器IP，让用户就近取到想要的资源（如访问网站），大大降低了延迟。</p><hr><p>解决方法就是在博客文件的source目录下，新增一个CNAME文件，注意全大写，并且没有文件后缀。CNAME中写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsuiwade.tk</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313223738438.png" alt="image-20210313223738438"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313163741297.png" alt="image-20210313163741297"></p><p>最后可以在公开的博客仓库的master分支下，看到新增了CNAME文件，并且setting中的站点域名是我所设置的。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313154745903.png" alt="image-20210313154745903"></p><p> source 文件夹，实质上才是你发布时候使用的根目录，你项目的根目录，只是开发的时候的根目录而已。hexo build 的时候，会将 source 目下下的内容进行一次拷贝，如果放在项目根目录下的话，文件并不会存在于构建输出的目录里。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313160408176.png" alt="image-20210313160408176"></p><p>参考：<a href="https://blog.csdn.net/xs20691718/article/details/81873921">https://blog.csdn.net/xs20691718/article/details/81873921</a></p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>我前面使用的是.ml后缀的域名，后来再输入github.io的时候，会自动跳转到ml，导致问题。后来打开浏览器设置选项，清空用户的缓存文件和cookies即可。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210313112617249.png" alt="image-20210313112617249"></p>]]></content>
    
    
    <summary type="html">原本我们一直使用.github.io的域名，比较长，记录一下申请短域名以及新域名的部署。主要用到freenom、cloudflare和github。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="github" scheme="https://tsuiwade.github.io/tags/github/"/>
    
    <category term="cloudflare" scheme="https://tsuiwade.github.io/tags/cloudflare/"/>
    
    <category term="freenom" scheme="https://tsuiwade.github.io/tags/freenom/"/>
    
  </entry>
  
  <entry>
    <title>【第14篇博客】带上gitee，双线部署</title>
    <link href="https://tsuiwade.github.io/2021/03/09/blog14-gitee/"/>
    <id>https://tsuiwade.github.io/2021/03/09/blog14-gitee/</id>
    <published>2021-03-09T20:43:52.000Z</published>
    <updated>2021-03-09T20:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何单一使用gitee博客，后面会考虑介绍多线部署多个博客。</p><h2 id="新建gitee仓库"><a href="#新建gitee仓库" class="headerlink" title="新建gitee仓库"></a>新建gitee仓库</h2><p>尽量仓库名称与用户名保持一致。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310095306299.png" alt="image-20210310095306299"></p><p><code>请复制生成token</code>、因为只会生成一次，请及时粘贴保存。如果忘记了、记得重新生成。</p><h2 id="hexo配置文件修改"><a href="#hexo配置文件修改" class="headerlink" title="hexo配置文件修改"></a>hexo配置文件修改</h2><p>复制URL，到hexo的配置文件<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://tsuiwade.gitee.io/</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/tsuiwade/tsuiwade</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="gitee部署"><a href="#gitee部署" class="headerlink" title="gitee部署"></a>gitee部署</h2><p>接下来在根目录输入<code>hexo d</code>进行部署，然后如图，输入自己的信息。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310100652160.png" alt="image-20210310100652160"></p><h2 id="gitee设置"><a href="#gitee设置" class="headerlink" title="gitee设置"></a>gitee设置</h2><p>部署完可以回到gitee仓库上看看：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310100849780.png" alt="image-20210310100849780"></p><p>此时gitee仓库上已经有了内容，再点击服务——pages：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310100930745.png" alt="image-20210310100930745"></p><p>在master分支下，点击更新，等待部署完即可访问自己的网址。<a href="https://tsuiwade.gitee.io/">https://tsuiwade.gitee.io</a></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310101015487.png" alt="image-20210310101015487"></p><h2 id="如何更新部署"><a href="#如何更新部署" class="headerlink" title="如何更新部署"></a>如何更新部署</h2><p>gitee并不像github可以自动化部署，因为 Gitee 的自动部署属于 Gitee Pages Pro 的服务，不可通过git add . &amp;&amp; git commit .. &amp;&amp; git push三连提交代码。。</p><p>而是必须hexo cl &amp;&amp; hexo g &amp;&amp; hexo d来提交代码。</p><p>请注意，必须先hexo cl 。</p><p>此时网站已经搭建好了，访问速度也快许多。</p><hr><p>当然，我们不会满足于此。</p><p>是否有一种方法，只需我同样适用git三连进行提交代码，而可以同时部署到github.io和gitee.io上。</p><h2 id="创建github私有仓库"><a href="#创建github私有仓库" class="headerlink" title="创建github私有仓库"></a>创建github私有仓库</h2><p>我们需要一个<code>私有仓库</code>用来存放 Hexo 的源文件、用来执行 Action</p><p>比如我这里创建的仓库名为<code>aacitons</code>，并且设置为私有。</p><h2 id="生成-Github-Token"><a href="#生成-Github-Token" class="headerlink" title="生成 Github Token"></a>生成 Github Token</h2><p>为确保 <code>hexo d</code> 有足够的访问权限、我们需要创建 token</p><p>因为我需要同时部署到 Github 和 Gitee 上、就需要生成三个 token (<code>你可以选择你需要的来创建</code>)</p><p>进入 <a href="https://github.com/">Github</a> 、点击<code>头像 -&gt; Settings</code>。找到 <code>Developer settings</code>。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310203522099.png" alt="image-20210310203522099"></p><p>点击 <code>Personal access tokens</code>，点击 <code>Generate new token</code></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310203818764.png" alt="image-20210310203818764"></p><p>名字随便取、一定要勾选 <code>repo</code></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310203917310.png" alt="image-20210310203917310"></p><p><code>请复制生成token</code>、因为只会生成一次，请及时粘贴保存。如果忘记了、记得重新生成。</p><h2 id="生成-Gitee-Token"><a href="#生成-Gitee-Token" class="headerlink" title="生成 Gitee Token"></a>生成 Gitee Token</h2><p>进入 <a href="https://gitee.com/">Gitee</a> 、 点击<code>头像 -&gt; 设置</code></p><p>点击<code>安全设置 -&gt; 私人令牌</code></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/20210310204213.png" alt=""></p><h2 id="编辑-config-yml"><a href="#编辑-config-yml" class="headerlink" title="编辑 _config.yml"></a>编辑 _config.yml</h2><p>编辑根目录下的 <code>_config.yml</code> </p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://tsuiwade:稍短的那个token@gitee.com/tsuiwade/tsuiwade.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://tsuiwade:稍长的那个token@github.com/tsuiwade/tsuiwade.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="配置-Github-Action"><a href="#配置-Github-Action" class="headerlink" title="配置 Github Action"></a>配置 Github Action</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310204610996.png" alt="image-20210310204610996"></p><p>里面写 Github Actions 的配置内容：</p><p>当然下面的部分内容需要根据自己配置如：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span>  <span class="comment"># 需要注意，改为自己所在的本地分支，同样也需要和远程分支对应。本地仓库为main，远程仓库也为main。</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存依赖</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;tsuiwade&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;478451541@qq.com&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/tsuiwade/tsuiwade.github.io.git</span> <span class="string">.deploy_git</span> </span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line">       <span class="comment"># 注意上面git clone后的仓库为前文新建的私有仓库。</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">同步到</span> <span class="string">Gitee</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:tsuiwade/tsuiwade.github.io.git&quot;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:tsuiwade/tsuiwade.git&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">tsuiwade</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">tsuiwade/tsuiwade</span></span><br></pre></td></tr></table></figure><h2 id="私有仓库的秘钥设置"><a href="#私有仓库的秘钥设置" class="headerlink" title="私有仓库的秘钥设置"></a>私有仓库的秘钥设置</h2><p>在私有仓库内配置</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310205206849.png" alt="image-20210310205206849"></p><p>需要新建仓库的2个秘钥，键分别是<code>GITEE_PASSWORD</code>和<code>GITEE_RSA_PRIVATE_KEY</code>，而值分别是<code>gitee账号的密码</code>和<code>.ssh/id_rsa</code>文件内的内容（文件格式如图）。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310205255600.png" alt="image-20210310205255600"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310205547221.png" alt="image-20210310205547221"></p><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>在博客根目录 [Blogroot] 下启动终端，使用 git 指令重设仓库地址。这样在新建仓库，我们仍旧可以保留珍贵的 commit history，便于版本回滚。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin <span class="comment"># 删除原有仓库链接</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:[GithubUsername]/[SourceRepo].git <span class="comment">#[SourceRepo]为新的存放源码的github私有仓库</span></span><br><span class="line"><span class="comment"># 如 git remote add origin  git@github.com:tsuiwade/aactions.git</span></span><br><span class="line"></span><br><span class="line">git checkout -b master <span class="comment"># 切换到master分支，</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"><span class="comment"># 如果不是，后面的所有设置的分支记得保持一致</span></span><br><span class="line"><span class="comment"># 2020年10月以后，新建仓库的默认分支换成main</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310205907653.png" alt="image-20210310205907653"></p><p>倘若在此出了错，提交的分支名和仓库名。</p><p>最终可以在github新建私有仓库内看到actions成功。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210310210306406.png" alt="image-20210310210306406"></p><p>主要参考：<a href="https://blog.zykjofficial.top/posts/ea8e8e59/">https://blog.zykjofficial.top/posts/ea8e8e59/</a></p>]]></content>
    
    
    <summary type="html">我们一直在用github pages，想尝试一下gitee码云博客。后面的部分我们将进行双线(github、gitee)部署。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="gitee" scheme="https://tsuiwade.github.io/tags/gitee/"/>
    
  </entry>
  
  <entry>
    <title>【第13篇博客】github贡献日历上画画及博客首页显示gitcalendar</title>
    <link href="https://tsuiwade.github.io/2021/03/07/blog13-githubpaint/"/>
    <id>https://tsuiwade.github.io/2021/03/07/blog13-githubpaint/</id>
    <published>2021-03-07T22:36:44.000Z</published>
    <updated>2021-03-07T22:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gitcalendar魔改效果"><a href="#gitcalendar魔改效果" class="headerlink" title="gitcalendar魔改效果"></a>gitcalendar魔改效果</h2><p>由于我是新人，号是新号，github贡献日历基本都挤在右边，看上去确实囊中羞涩、乏善可陈，于是想为加上一些图案，正好看到前人有过类似魔改记录，于是重新走了一遍，首先先来看一下效果。</p><p>github首页效果：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308010618267.png" alt="image-20210308010618267"></p><p>博客首页效果：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308010559971.png" alt="image-20210308010559971"></p><h2 id="github图案绘制"><a href="#github图案绘制" class="headerlink" title="github图案绘制"></a>github图案绘制</h2><ol><li><p>首先感谢<a href="https://github.com/qinshuang1998">qinshuang1998</a>大神的开源项目<a href="https://github.com/qinshuang1998/GithubPainter">GithubPainter</a> ，在本地新建一个空文件夹，例如我在桌面上打开<code>git bash here</code>。下载该项目，得到如下图文件。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;qinshuang1998&#x2F;GithubPainter.git  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308002030166.png" alt="image-20210308002030166"></p></li><li><p>打开文件<code>./designer/index.html</code>，这一个用html写的designer设计器，打开后会生成一个和Github一模一样的贡献板，你可以通过在上面点击鼠标来控制格子的颜色，进行绘制图案，如我选择的图案。</p><p>注意，应先选择结束日期，在自己的github首页上看看最后一天对应哪天，再选择开始日期，也需要在github贡献日历上看看左上角是哪天，对应起来。</p><p>接着进行绘制图案，如我选择的图案，点击一下是最浅色，多点击则变深，请各位耐心绘制自己喜欢的图案。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308010536931.png" alt="image-20210308010536931"></p></li><li><p>图案绘制完毕，导出为map.qs文件，替换上图路径下的同名文件。</p></li></ol><h2 id="github仓库创建"><a href="#github仓库创建" class="headerlink" title="github仓库创建"></a>github仓库创建</h2><p>在github上创建新仓库，我命名为<code>githubpaint</code>。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308005534216.png" alt="image-20210308005534216"></p><p>然后在刚刚<code>C:\Users\tsui\Desktop\GithubPainter-master\GithubPainter-master</code>路径下打开<code>git bash</code>，将自己的<code>githubpaint</code>项目clone下来：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:tsuiwade&#x2F;githubpaint.git</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308005921760.png" alt="image-20210308005921760"></p><p>因此在<code>C:\Users\tsui\Desktop\GithubPainter-master\GithubPainter-master</code>路径下生成了<code>githubpaint</code>文件夹。</p><h2 id="commit脚本"><a href="#commit脚本" class="headerlink" title="commit脚本"></a>commit脚本</h2><p>接着执行python文件，用commit.py的python脚本读取它，并对本地的Git仓库进行commit操作就好了（脚本中的文件路径等参数需要自己改动，包括本地仓库文件githubpaint和图案文件）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">repo = Repo(<span class="string">&#x27;./githubpaint&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意，这里的<code>git</code>模块是<code>GitPython</code>模块，通过<code>pip install gitpython</code>或<code>conda install gitpython</code>进行安装。GitPython块python用来封装git操作的模块，主要用来替代gitbash的操作。</p><p>不报错运行完即是成功运行。</p><h2 id="git-push提交"><a href="#git-push提交" class="headerlink" title="git push提交"></a>git push提交</h2><p>运行完成后将你的本地仓库push即可，在本地仓库githubpaint路径下git push，就可大功告成了。此时查看你的github首页，就不那么囊中羞涩、乏善可陈，反而有趣新奇，甚好甚好。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308004353339.png" alt="image-20210308004353339"></p><h2 id="hexo-github-calendar使用"><a href="#hexo-github-calendar使用" class="headerlink" title="hexo-github-calendar使用"></a>hexo-github-calendar使用</h2><p>hexo api 文档可参考<a href="https://zfe.space/post/hexo-githubcalendar.html">https://zfe.space/post/hexo-githubcalendar.html</a> 。</p><p>一键部署：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br></pre></td></tr></table></figure><p>网站根目录_config配置项(不是主题的)： 例如butterfly配置为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ice Kano Plus_in</span></span><br><span class="line"><span class="comment"># Hexo Github Canlendar</span></span><br><span class="line"><span class="comment"># Author: Ice Kano</span></span><br><span class="line"><span class="comment"># Modify: Lete乐特</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># butterfly</span></span><br><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">zfour</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot;</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>接下来来简单说明一下配置项的含义：</p><ol><li><p><strong>enable</strong></p><p><strong>参数：</strong>true/false<br><strong>含义：</strong>是否开启插件</p></li><li><p><strong>enable_page</strong></p><p><strong>参数：</strong>/<br><strong>含义：</strong>路由地址，如 / 代表主页。/me/代表自我介绍页等等</p></li><li><p><strong>user</strong></p><p><strong>参数：</strong>zfour<br><strong>含义：</strong>你的 github 或者 gitee 用户名</p></li></ol><ol><li><p><strong>layout</strong></p><p><strong>参数：</strong>type; （class&amp;id）<br><strong>参数：</strong>name;<br><strong>参数：</strong>index；（数字）<br><strong>含义：</strong>如果说 gihubcalendar 是一幅画，那么这个 layout 就是指定了哪面墙来挂画<br>而在 HTML 的是世界里有两种墙分别 type 为 id 和 class。<br>其中在定义 class 的时候会出现多个 class 的情况，这时就需要使用 index，确定是哪一个。<br>最后墙的名字即是 name;</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是墙&quot;</span> <span class="attr">id</span>=<span class="string">&quot;recent-posts&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id=&gt;type  recent-posts=&gt;name    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是画框&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;我是纸&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这里通过js挂载githubcalendar，也就是画画--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3 id="githubcalendar-html"><a href="#githubcalendar-html" class="headerlink" title="githubcalendar_html"></a><strong>githubcalendar_html</strong></h3><p><strong>参数：</strong>html 模板字段<br><strong>含义：</strong>包含 loading，和挂载容器</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:auto;padding:10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个是画框，顾名思义就是借用文章样式给加个框--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是loading的样式，可自行调整--&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    id=&quot;github_loading&quot;</span><br><span class="line">    style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;svg</span><br><span class="line">      xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br><span class="line">      xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;</span><br><span class="line">      viewBox=&quot;0 0 50 50&quot;</span><br><span class="line">      style=&quot;enable-background:new 0 0 50 50&quot;</span><br><span class="line">      xml:space=&quot;preserve&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;path</span><br><span class="line">        fill=&quot;#d0d0d0&quot;</span><br><span class="line">        d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot;</span><br><span class="line">        transform=&quot;rotate(275.098 25 25)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;animateTransform</span><br><span class="line">          attributeType=&quot;xml&quot;</span><br><span class="line">          attributeName=&quot;transform&quot;</span><br><span class="line">          type=&quot;rotate&quot;</span><br><span class="line">          from=&quot;0 25 25&quot;</span><br><span class="line">          to=&quot;360 25 25&quot;</span><br><span class="line">          dur=&quot;0.6s&quot;</span><br><span class="line">          repeatCount=&quot;indefinite&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是github_containner容器，也就是纸--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;github_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>最后执行：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure><p>就可以看到效果了！</p><h2 id="统计页的效果"><a href="#统计页的效果" class="headerlink" title="统计页的效果"></a>统计页的效果</h2><p>效果如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210316205610992.png" alt="image-20210316205610992"></p><p>统计页的github贡献图只需要在统计页加上该标签，id已由上面方法描述好了。</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span>github贡献图<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;github_container&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>而gitee贡献图，再重复一遍上述操作，不过使用传统的主题修改模板的div+js挂载方法。用到<a href="https://github.com/Zfour/hexo-github-calendar中的[githubcalendar.js](https://github.com/Zfour/hexo-github-calendar/blob/master/githubcalendar.js)文件。">https://github.com/Zfour/hexo-github-calendar中的[githubcalendar.js](https://github.com/Zfour/hexo-github-calendar/blob/master/githubcalendar.js)文件。</a><br>下载后，修改用户名，将其引入到主题中。该文件改名为giteecalendar.js，全文替换github为gitee。也需要在inject中引用该js文件。</p><p>最后代码同样：</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span>gitee贡献图<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitee_container&quot;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>参考： <a href="https://segmentfault.com/a/1190000022736595">https://segmentfault.com/a/1190000022736595</a></p><p>其实Github统计的commit时间取决于Git仓库中记录的commit时间，而往Git仓库中提交的时间是可以修改的。</p><p>由于对Git命令不是太熟，一开始想到了通过修改系统时间来改变commit的时间，发现是可行的。</p><p>后来查到了commit命令有个—date参数，可以实现提交时间的自定义，格式为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --date&#x3D;&quot;月 日 时间 年 +0800&quot; -m &quot;提交&quot;</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --date&#x3D;&quot;May 7 9:05:20 2016 +0800&quot; -m &quot;提交&quot;</span><br></pre></td></tr></table></figure><p>这样就可以实现用过去的时间进行提交。不过关于Github统计时间需要注意下根据官方说法是根据UTC时间统计的，不过我实测发现貌似和Github服务器的所在地点的时区有关，我访问的服务器猜测在旧金山，与北京时间差了16小时，也就是说如果想要Github统计的时间是0点，那么你北京时间就要设置成16点才行。</p><p>自定义提交时间我们实现了，接下来的事情就好办啦，我们如果要实现在Github贡献板任意涂鸦，其实只需要知道哪一天我们需要commit多少次就好了，自定义提交时间用来决定我们想让哪些格子有颜色，而commit次数的多少决定了颜色的深浅，这样通过这两者的结合，我们就可以轻松地创造出属于自己的像素风格的涂鸦啦。</p><h2 id="可能出现的bug"><a href="#可能出现的bug" class="headerlink" title="可能出现的bug"></a>可能出现的bug</h2><p>之前可能在自己的电脑上登陆过别人的号，所以本地的git账号不是自己的，因此commit上并不能计算成自己的贡献。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308004047420.png" alt="image-20210308004047420"></p><p>于是查看了本地git账号，果然不是自己的，修改成自己的账号即可。具体可看<a href="https://www.cnblogs.com/bbldhf/p/13269577.html">如何在vscode修改git 的账号和邮箱</a> 。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308004246316.png" alt="image-20210308004246316"></p>]]></content>
    
    
    <summary type="html">本文将介绍如何修改github首页的贡献日历上的图案，以及如何在博客首页显示该图案。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="github" scheme="https://tsuiwade.github.io/tags/github/"/>
    
    <category term="gitcalendar" scheme="https://tsuiwade.github.io/tags/gitcalendar/"/>
    
  </entry>
  
  <entry>
    <title>【第12篇博客】PicGo图床工具配合Typora的便捷贴图配置</title>
    <link href="https://tsuiwade.github.io/2021/03/06/blog12-PicGo/"/>
    <id>https://tsuiwade.github.io/2021/03/06/blog12-PicGo/</id>
    <published>2021-03-06T16:57:32.000Z</published>
    <updated>2021-03-06T16:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>PicGo官网地址 <a href="https://link.zhihu.com/?target=https%3A//molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a></p><p>在GitHub项目地址 <a href="https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>PicGo文档地址 <a href="https://link.zhihu.com/?target=https%3A//picgo.github.io/PicGo-Doc/zh/guide/%23%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0">https://picgo.github.io/PicGo-Doc/zh/guide/#应用概述</a></p><hr><p>在前文介绍了Tpora写markdown博客的操作，然而在贴图方面还是不够便捷，这里介绍一种PicGo配合的方法来便捷贴图。</p><blockquote><p>所谓图床工具，就是专门用来存放图片，同时允许你把图片对外连接的网上空间，不少图床都是免费的。设置图床后，在博客中插入的图片链接就可以随时随地在线预览。网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 <code>Electron-vue</code> 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，imgur 等8种常用图床，功能强大，简单易用。</p></blockquote><h2 id="下载Picgo"><a href="#下载Picgo" class="headerlink" title="下载Picgo"></a>下载Picgo</h2><p>首先进入github下载，<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p>注意：<em>mac</em> 系统选择 <em>dmg</em> 下载，<em>windwos</em> 选择 <em>.exe</em>系统，如果不是下载安装包，想看源码的话，可以选择 <code>git clone https://github.com/Molunerfinn/PicGo.git</code> 克隆到本地</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307130020168.png" alt="image-20210307130020168"></p><p>安装成功界面：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307130215796.png" alt="image-20210307130215796"></p><h2 id="安装gitee插件"><a href="#安装gitee插件" class="headerlink" title="安装gitee插件"></a>安装gitee插件</h2><p>找到底下插件设置，使用码云需要另外安装插件，搜索gitee安装插件，下载第一个：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307130739301.png" alt="image-20210307130739301"></p><p>注意：安装<code>gitee-uploader 1.1.2</code>插件，必须要先安装<code>node.js</code>才能安装插件。</p><p>也可以采用手动安装：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307161112397.png" alt="image-20210307161112397"></p><h2 id="创建gitee仓库"><a href="#创建gitee仓库" class="headerlink" title="创建gitee仓库"></a>创建gitee仓库</h2><p>新建gitee账号这里就不赘述了。</p><p>建立gitee码云图床库，就是在码云新建一个仓库，步骤：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307131125647.png" alt="image-20210307131125647"></p><h2 id="Gitee生成私人令牌token"><a href="#Gitee生成私人令牌token" class="headerlink" title="Gitee生成私人令牌token"></a>Gitee生成私人令牌token</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307160818893.png" alt="image-20210307160818893"></p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307161009440.png" alt="image-20210307161009440"></p><h2 id="PicGo的gitee图床设置"><a href="#PicGo的gitee图床设置" class="headerlink" title="PicGo的gitee图床设置"></a>PicGo的gitee图床设置</h2><p>点击左侧图床设置——gitee图床，设置如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307162023734.png" alt="image-20210307162023734"></p><p>注意，这里的owner和repo名字，如果设置不对，后期出现问题记得查这里的问题。下图即是我第一次设置错的配置，请看我的仓库地址，此时的owner应该是xxxxxxxxxxw，repo名应该是blog-img。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307162148857.png" alt="image-20210307162148857"></p><p>而且还需要注意名称对应的问题，如下图，即使我在repo位置填写的是BlogImg，但被解析成blog-img，此处需要注意。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307162543953.png" alt="image-20210307162543953"></p><h2 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307163418777.png" alt="image-20210307163418777"></p><p>请注意此处的Server监听地址和监听端口。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307163526827.png" alt="image-20210307163526827"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20200323201738802.png" alt="img"></p><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>可在码云仓库内查看上传的图片。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210307175745968.png" alt="image-20210307175745968"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>直接复制图片，粘贴至Typora，便会自动生成链接，非常方便。</li><li>将图片文件拖进PicGo上传区，也会自动生成markdown链接。</li><li>PicGo上传区剪贴板图片，直接复制图片，点击<code>剪贴板图片</code>，即可获取markdown链接。</li></ol>]]></content>
    
    
    <summary type="html">本文将介绍如何配置PicGo图床工具+gitee码云，配合Typora来便捷贴图。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Typora" scheme="https://tsuiwade.github.io/tags/Typora/"/>
    
    <category term="PicGo" scheme="https://tsuiwade.github.io/tags/PicGo/"/>
    
    <category term="Gitee" scheme="https://tsuiwade.github.io/tags/Gitee/"/>
    
  </entry>
  
  <entry>
    <title>【第11篇博客】博客操作优化2——使用bat优化操作及bat语法学习记录</title>
    <link href="https://tsuiwade.github.io/2021/03/06/blog11-BatLearning/"/>
    <id>https://tsuiwade.github.io/2021/03/06/blog11-BatLearning/</id>
    <published>2021-03-06T12:14:04.000Z</published>
    <updated>2021-03-06T12:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客准备脚本"><a href="#博客准备脚本" class="headerlink" title="博客准备脚本"></a>博客准备脚本</h2><p>首先总结一下痛点，由于我们不再使用vscode编写markdown文章，开始使用Typora编写文章，于是当我们一开机，或者准备写博客的时候，首先打开文档文件夹，<code>C:\Users\tsui\blog\source\_posts</code>，然后再打开Typora软件和PicGo软件。于是，可以将打开文件夹、打开软件，继承为一个bat脚本。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308203047265.png" alt="image-20210308203047265"></p><p>因此在<code>C:\Users\tsui\blog\source\_posts</code>文件夹下新建文档文件，写下面代码：</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;C:\Users\tsui\blog\source\_posts&quot;</span><br><span class="line">tasklist | <span class="built_in">find</span> /i &quot;Typora.exe&quot; &amp;&amp; <span class="built_in">echo</span> &quot;Typora is running&quot; || <span class="built_in">start</span> &quot;&quot; &quot;D:\Typora\Typora.exe&quot;</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;D:\PicGo\PicGo.exe&quot;</span><br></pre></td></tr></table></figure><p>第一行为打开博客文件夹。</p><p>第二行为当运行了Typora时，则不执行；未执行Typora时，则运行Typora程序。（由于Typora可以多开，若不作此判断，则会多开；而PicGo软件则不会多开，因此无需判断。）</p><p>在批处理程序中检查指定进程是否在运行，然后根据其运行状态分别执行不同的命令。<br>语法：tasklist | find /i “程序” &amp;&amp; 程序在运行执行命令1 || 不在运行执行命令2。<br>例子：tasklist | find /i “calc.exe” &amp;&amp; taskkill /im calc.exe || echo 没有运行</p><p>第三行为运行PicGo程序。（至于为何与第二行不一样，倘若一样的情况下，PicGo若已经打开，则会报错。也欢迎大家帮我解答该问题。）</p><p>最后将该文件修改为<code>.bat</code>文件。</p><h2 id="启动文件桌面魔改"><a href="#启动文件桌面魔改" class="headerlink" title="启动文件桌面魔改"></a>启动文件桌面魔改</h2><ol><li><p>首先将刚刚的文件发送至桌面。</p></li><li><p>在桌面上可以修改该文件名，甚至把后缀去掉。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308203240590.png" alt="image-20210308203240590"></p></li><li><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210308203342929.png" alt="image-20210308203342929"></p></li></ol><p>修改结束，当点击该文件时，即可打开博客文件夹、打开Typora和PicGo随时等待你修改文章。</p><h2 id="运行hexo脚本"><a href="#运行hexo脚本" class="headerlink" title="运行hexo脚本"></a>运行hexo脚本</h2><p>同样在刚刚快接打开的博客文件夹中新建bat文件，命名为HexoRun。</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span>  http://localhost:<span class="number">4000</span>/</span><br><span class="line"><span class="built_in">start</span> &quot;&quot; &quot;D:\PicGo\PicGo.exe&quot;</span><br><span class="line">tasklist | <span class="built_in">find</span> /i &quot;Typora.exe&quot; &amp;&amp; <span class="built_in">echo</span> &quot;Typora is running&quot; || <span class="built_in">start</span> &quot;&quot; &quot;D:\Typora\Typora.exe&quot;</span><br><span class="line"><span class="built_in">cmd</span> /k &quot;<span class="built_in">cd</span> /d C:\Users\tsui\blog&amp;&amp;hexo s&quot;</span><br></pre></td></tr></table></figure><p>第一行表示运行本地文件<code>localhost:4000</code>。无需先打开浏览器，这里我默认的浏览器为Chrome。</p><p>第二行、第三行表示启动Typora和PicGo程序。</p><p>第四行表示打开cmd指向hexo根目录，并执行命令，加&amp;&amp;。通过使用CD命令，并加入参数 /d ，可以通过一个步骤，直接进入指定盘符下的任意文件夹。</p><p>该脚本文件帮我们省了不少事哈。</p><h2 id="博客提交脚本"><a href="#博客提交脚本" class="headerlink" title="博客提交脚本"></a>博客提交脚本</h2><p>主要是帮助我们git三连提交。</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> /d C:\Users\tsui\blog</span><br><span class="line">git add . </span><br><span class="line">git commit -m &quot;bat push&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文将介绍使用bat优化我们在博客准备、启动、提交时候的环境操作。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客优化" scheme="https://tsuiwade.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
    <category term="bat" scheme="https://tsuiwade.github.io/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>【第10篇博客】博客操作优化1——使用Typora编写markdown博客</title>
    <link href="https://tsuiwade.github.io/2021/03/06/blog10-Typora/"/>
    <id>https://tsuiwade.github.io/2021/03/06/blog10-Typora/</id>
    <published>2021-03-06T12:06:31.000Z</published>
    <updated>2021-03-06T12:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个markdown文本编辑器"><a href="#一个markdown文本编辑器" class="headerlink" title="一个markdown文本编辑器"></a>一个markdown文本编辑器</h2><p>「它的<strong>功能之强大、设计之冷静、体验之美妙、理念之先进</strong>，我认为值得所有笔记应用厂商学习。」</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/beta.gif" alt="beta"></p><p><a href="https://www.typora.io/">Typora</a> 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href="https://github.github.com/gfm/">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/">这篇文档</a> 中查看。</p><h2 id="适用于自己的Typora配置"><a href="#适用于自己的Typora配置" class="headerlink" title="适用于自己的Typora配置"></a>适用于自己的Typora配置</h2><ol><li><p><strong>快捷键</strong></p><p>打开自己电脑根目录下的<code>C:\Users\tsui\AppData\Roaming\Typora\conf</code>文件夹（读者自行修改该目录），如下图所示：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306195316546.png" alt="image-20210306195316546"></p><p>打开<code>conf.user.json</code>文件，主要修改画框处的代码即可，如下图所示：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306195441753.png" alt="image-20210306195441753"></p><p>至于代码中的<code>Always on Top</code>和我代码中的<code>Delete Line/Sentence</code>这些参数，该如何找呢？打开偏好设置，语言设置为英文，再从工具栏中找到对应的操作，例如我要设置删除改行（vscode中的Ctrl+D，很是方便），如下图所示：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/8EFBAA12EABA3092AE1EB1CE061298DD.png" alt="img"></p><p>找到对应的参数名<code>Delete Line/Sentence</code>，然后再设置具体的快捷键即可。</p><p>还可以参考官网的快捷键帮助<a href="https://support.typora.io/Shortcut-Keys/">https://support.typora.io/Shortcut-Keys/</a> 。</p></li><li><p><strong>侧边栏</strong></p><p><code>侧边栏</code>保持显示侧边栏，主要显示文件数和大纲，可以帮助开发。快捷键为Ctrl+Shift+L。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306194555367.png" alt=""></p></li><li><p><strong>启动选项</strong></p><p><code>启动选项</code>选择重新打开选择重新打开上次使用的文件和目录，这样直接打开Typora软件即可找到上次编写的位置，同vscode一样，无需一步步打开文件，很是方便。</p><p>在偏好设置里设置：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306194138225.png" alt="image-20210306194138225"></p></li></ol><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p><ul><li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。如：</p><p><code>![](https://gitee.com/tsuiwade/images/raw/master/20210310123322.png)</code></p><p>现在已经支持粘贴图片自动上传至图床了，使用PicGo，具体参见我的另一篇博客。</p><h2 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h2><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p><p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p><p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p><h2 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h2><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。他们把这称为 <em>Hybrid View。</em></p><p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p><h2 id="大纲-文件侧边栏配置"><a href="#大纲-文件侧边栏配置" class="headerlink" title="大纲 / 文件侧边栏配置"></a>大纲 / 文件侧边栏配置</h2><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p><p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件。     </p><h2 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h2><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。 </p><ul><li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li><li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li><li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li><li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。 </li></ul><h2 id="emoji表情"><a href="#emoji表情" class="headerlink" title="emoji表情"></a>emoji表情</h2><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。:sunny:、:cow:、:grey_question:。</p><p>emoji编码合集可参考<a href="https://blog.csdn.net/weixin_42395140/article/details/111642339">https://blog.csdn.net/weixin_42395140/article/details/111642339</a> 。</p><h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>Typora还提供了如同<strong>word</strong>快捷键的操作包括加粗、斜体等。</p><p>在vscode中写markdown的表格一直是一件比较头疼的事情。好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306211350709.png" alt="image-20210306211350709"></p><h2 id="hexo-new-post-更换模板"><a href="#hexo-new-post-更换模板" class="headerlink" title="hexo new post 更换模板"></a>hexo new post 更换模板</h2><p>除了上述介绍来的Typora使用之外，本文还将介绍如何优化 每次新建博客之后填写博客文章摘要信息的操作。</p><p>每当我们hexo n blog的时候，在未设置模板的情况下，如何才能出现以下完整的信息呢？</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">title: 【第10篇博客】博客操作优化1——使用Typora编写markdown博客</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> Typora</span><br><span class="line"><span class="bullet">  -</span> markdown</span><br><span class="line"><span class="bullet">  -</span> 博客优化</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 博客搭建记录</span><br><span class="line">date: 2021-03-06 12:06:31</span><br><span class="line">updated: 2021-03-06 12:06:31</span><br><span class="line">description: 时至今日，可以优化一下博客的操作，本文将介绍使用Typora来写markdown语言，最为方便的在于图片的粘贴。以及自己的优化操作中的Typora偏好设置。</span><br><span class="line">cover: &quot;https://gitee.com/tsuiwade/images/raw/master/20210310123446.png&quot;</span><br></pre></td></tr></table></figure><p>通过查看文档，找到模板文件的路径：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306214807156.png" alt="image-20210306214807156"></p><p>打开post填写以下信息，保存即可。</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">updated: &#123;&#123; date &#125;&#125;</span><br><span class="line">description:  </span><br><span class="line">cover: </span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">  -</span> </span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">  -</span> </span><br></pre></td></tr></table></figure><p>将来hexo n blog的时候，将会自动存在这些基础信息。</p><hr><p>本文参考：<a href="https://sspai.com/post/54912">https://sspai.com/post/54912</a></p>]]></content>
    
    
    <summary type="html">本文将介绍使用Typora来写markdown语言，方便图片粘贴，以及自己的优化博客操作中的Typora偏好设置。</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Typora" scheme="https://tsuiwade.github.io/tags/Typora/"/>
    
    <category term="markdown" scheme="https://tsuiwade.github.io/tags/markdown/"/>
    
    <category term="博客优化" scheme="https://tsuiwade.github.io/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【第9篇博客】标签外挂的配置学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/07/blog9-TagPlugins/"/>
    <id>https://tsuiwade.github.io/2021/02/07/blog9-TagPlugins/</id>
    <published>2021-02-07T22:04:18.000Z</published>
    <updated>2021-03-04T15:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>标签外挂主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入[tag].js，并针对butterfly主题修改了相应的[tag].styl。</p><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。以下的写法，只适用于butterfly主题，用在其他主题不会有效果。</p><h2 id="配置教程"><a href="#配置教程" class="headerlink" title="配置教程"></a>配置教程</h2><p>主要参考 <a href="https://akilar.top/posts/615e2dec/">https://akilar.top/posts/615e2dec/</a><br>点击下方github链接，并下载。</p><p><a style="margin-inline:5px"target="_blank" href="https://github.com/Akilarlxh/Tag_Plugins"><img src="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&amp;repo=Tag_Plugins&amp;theme=vue&amp;show_owner=true" ></p><ol><li>将下载的Tag_Plugins.zip解压得到butterfly文件夹。</li><li>将butterfly文件夹复制到[Blogroot]\themes\目录下，覆盖当前的butterfly主题文件夹，提示重复则选择替换。(如果担心覆盖自己的其他魔改内容，可以根据静态文件内容自主比对修改)</li><li>修改[Blogroot]_config.butterfly.yml的inject配置项，添加CDN依赖项。由于issues写入timeline和site-card标签要用到jquery，请务必根据注释指示的版本决定是否添加。</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure><p>如果遇到问题，请hexo <span class='p red'>clean、</span> <span class='p green'>g、</span> <span class='p blue'>s。</span></p><p>接下来将介绍外挂标签使用语法。</p><h2 id="行内文本样式"><a href="#行内文本样式" class="headerlink" title="行内文本样式"></a>行内文本样式</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#1-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#1-2">样式预览</button></li><li class="tab"><button type="button" data-href="#1-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="1-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="1-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#1-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#1-2">样式预览</button></li><li class="tab"><button type="button" data-href="#1-3">示例源码</button></li><li class="tab"><button type="button" data-href="#1-4">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="1-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="1-2"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p blue'>blue</span>,<span class='p cyan'>cyan</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#1-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#1-2">样式预览</button></li><li class="tab"><button type="button" data-href="#1-3">示例源码</button></li><li class="tab"><button type="button" data-href="#1-4">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="1-1"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="1-2"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-4"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p blue'>blue</span>,<span class='p cyan'>cyan</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><p>最新版butterfly标签支持引用fontawesome V5图标，效果上已经优于volantis的note标签。故不再额外引入volantis的note样式。</p><div class="tabs" id="1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#1-1">通用配置</button></li><li class="tab"><button type="button" data-href="#1-2">语法格式</button></li><li class="tab"><button type="button" data-href="#1-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#1-4">样式预览</button></li><li class="tab"><button type="button" data-href="#1-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="1-1"><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-2"><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-3"><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色 &lt;/br&gt;（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style &lt;/br&gt;（simple/modern/flat/disabled）</td></tr></tbody></table></div><p>或者<br>参数| 用法<br>:-|:-<br>class | 【可选】标识，不同的标识有不同的配色 &lt;/br&gt;（ default / primary / success / info / warning / danger ）<br>no-icon | 【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )<br>style | 【可选】可以覆盖配置中的 style &lt;/br&gt;（simple/modern/flat/disabled）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="1-4"><ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>本文参考：<br><a href="https://akilar.top/posts/615e2dec/">https://akilar.top/posts/615e2dec/</a><br><a href="https://github.com/Akilarlxh/Tag_Plugins">https://github.com/Akilarlxh/Tag_Plugins</a></p><p><img src="https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标签外挂主要使用了&lt;a href=&quot;https://github.com/volantis-x/hexo-theme-volantis&quot;&gt;Volantis&lt;/a&gt;的标签样式。引入[tag].js，并针对butterfly主题修改了相应的[tag].styl。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="github" scheme="https://tsuiwade.github.io/categories/github/"/>
    
    
    <category term="github" scheme="https://tsuiwade.github.io/tags/github/"/>
    
    <category term="标签外挂" scheme="https://tsuiwade.github.io/tags/%E6%A0%87%E7%AD%BE%E5%A4%96%E6%8C%82/"/>
    
  </entry>
  
  <entry>
    <title>【第8篇博客】GitHub Badge的配置学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/04/blog8-ShieldIoBadge/"/>
    <id>https://tsuiwade.github.io/2021/02/04/blog8-ShieldIoBadge/</id>
    <published>2021-02-04T22:04:18.000Z</published>
    <updated>2021-03-04T15:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>效果如下：<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123146.png" alt=""><br>大家平时在逛GitHub，Gitee，各大论坛博客的时候，都有类似很好看很漂亮的徽章，主要通过 <a href="https://shields.io/">shields.io</a> 在线生成。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123227.png" alt=""></p><p>其中，找到Your BADGE 专属定制徽章</p><ul><li>label：标签，徽标左侧内容</li><li>message：信息，徽标右侧内容</li><li>color：色值，支持支持十六进制、rgb、rgba、hsl、hsla 和 css 命名颜色。十六进制记得删除前面的 # 号</li></ul><p>输入相关信息后，点击 make badge 即可得到徽标的 URL。可以用 img 标签引用</p><p>在主题配置文件中的<code>footer</code>:  <code>copyright:</code>设置为false、<code>footer</code>:  <code>custom_text:</code>中填写<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;margin-inline:5px&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://hexo.io/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo&quot;</span> <span class="attr">title</span>=<span class="string">&quot;博客框架为 Hexo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;HEXO&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;margin-inline:5px&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://butterfly.js.org/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender&quot;</span> <span class="attr">title</span>=<span class="string">&quot;主题采用 Butterfly&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Butterfly&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;margin-inline:5px&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jsdelivr.com/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr&quot;</span> <span class="attr">title</span>=<span class="string">&quot;本站使用 Jsdelivr 为静态资源提供CDN加速&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Jsdelivr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;margin-inline:5px&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub&quot;</span> <span class="attr">title</span>=<span class="string">&quot;本站项目由 GitHub 托管&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;GitHub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;margin-inline:5px&quot;</span><span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span><span class="attr">href</span>=<span class="string">&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img&quot;</span> <span class="attr">title</span>=<span class="string">&quot;本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><br>可以发现，简单定制小牌子非常方便，最最基础的语法规则就是：<br><code>https://img.shields.io/badge/&#123;左半部分标签&#125;-&#123;右半部分标签&#125;-&#123;右半部分颜色&#125;</code><br>还可以贴在markdown文档中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;效果如下：&lt;br&gt;&lt;img src=&quot;https://gitee.com/tsuiwade/images/raw/master/20210310123146.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;大家平时在逛GitHub，Gitee，各大论坛博客的时候，都有类似很好看很漂亮的徽章</summary>
      
    
    
    
    <category term="github" scheme="https://tsuiwade.github.io/categories/github/"/>
    
    
    <category term="shield.io" scheme="https://tsuiwade.github.io/tags/shield-io/"/>
    
    <category term="GitHub Badge" scheme="https://tsuiwade.github.io/tags/GitHub-Badge/"/>
    
  </entry>
  
  <entry>
    <title>【第7篇博客】配置jsDelivr提供静态资源CDN加速学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/01/blog7-JdDelivrUse/"/>
    <id>https://tsuiwade.github.io/2021/02/01/blog7-JdDelivrUse/</id>
    <published>2021-02-01T15:40:49.000Z</published>
    <updated>2021-03-04T15:40:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前第二篇主题样式修改的学习记录里，就出现过很多引用jsdelivr的链接，一直不知道这是做什么用的，今天就来<code>学习</code>、<code>记录</code>、<code>配置</code>一下jsdelivr。</p><blockquote><p><code>CDN</code>的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p></blockquote><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><p><code>jsDelivr</code> <a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a> 是一个CDN服务提供商，优点在于全球通用。专门提供js相关的CDN，对npm,github做了加速镜像。针对npm, github提供了CDN镜像。<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310122850.png" alt=""></p><p>接下来，将介绍如何将自己的字体文件上传jsDelivr。</p><h2 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h2><p>在此，仓库名设置为CDN。<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310122920.png" alt=""></p><h2 id="克隆github仓库到本地"><a href="#克隆github仓库到本地" class="headerlink" title="克隆github仓库到本地"></a>克隆github仓库到本地</h2><pre><code>git clone git@github.com:tsuiwade/CDN.git</code></pre><p><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123017.png" alt=""><br>在vscode的cmd中输入代码，倘若出现如下的报错，是因为客户端与服务端未生成 ssh key，为解决以上问题，我们需要重新生成一次ssh key ，并重新配置一下GitHub账户即可。具体参考 <a href="https://blog.csdn.net/weixin_40922744/article/details/107576748">https://blog.csdn.net/weixin_40922744/article/details/107576748</a><br>（其中，解决方法里面的cmd窗口是Git bash。）<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123042.png" alt=""><br>如果出现ssh无效问题 参考 <a href="https://blog.csdn.net/weixin_45604257/article/details/106649576">https://blog.csdn.net/weixin_45604257/article/details/106649576</a></p><h2 id="上传资源"><a href="#上传资源" class="headerlink" title="上传资源"></a>上传资源</h2><p>将需要上传的资源放进本地CDN仓库中。<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123058.png" alt=""><br>（注：jsDelivr不支持加载超过20M的资源），在本地git仓库目录下右键 Git Bash Here，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status                    &#x2F;&#x2F;查看状态</span><br><span class="line">git add .                     &#x2F;&#x2F;添加所有文件到暂存区</span><br><span class="line">git commit -m &#39;第一次提交&#39;      &#x2F;&#x2F;把文件提交到仓库</span><br><span class="line">git push                      &#x2F;&#x2F;推送至远程仓库</span><br></pre></td></tr></table></figure></p><h2 id="发布仓库"><a href="#发布仓库" class="headerlink" title="发布仓库"></a>发布仓库</h2><p>回到github上，点击release发布，填写必要信息如下图所示。<br><img src="https://gitee.com/tsuiwade/images/raw/master/20210310123121.png" alt=""></p><p>这就设置完成了，接下来可以引用资源了。</p><h2 id="通过jsDelivr引用资源"><a href="#通过jsDelivr引用资源" class="headerlink" title="通过jsDelivr引用资源"></a>通过jsDelivr引用资源</h2><p><code>使用方法：https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code><br>例如：<br><a href="https://cdn.jsdelivr.net/gh/tsuiwade/CDN@4.0/font/yenianti.otf">https://cdn.jsdelivr.net/gh/tsuiwade/CDN@4.0/font/yenianti.otf</a></p><p>这里就大功告成了，这里引用的字体，可以参考第二篇博客的首页字体修改。</p><p>本文主要参考 <a href="https://blog.csdn.net/qq_36759224/article/details/86936453">https://blog.csdn.net/qq_36759224/article/details/86936453</a></p><p><a href="https://github.com/badges/shields">https://github.com/badges/shields</a><br><a href="https://github.com/spencerwooo/Substats">https://github.com/spencerwooo/Substats</a><br><a href="https://sspai.com/post/59593">https://sspai.com/post/59593</a><br><a href="https://www.cnblogs.com/sddai/p/13779316.html">https://www.cnblogs.com/sddai/p/13779316.html</a><br><a href="https://shields.io/">https://shields.io/</a><br><a href="https://www.baidu.com/s?wd=https%3A%2F%2Fshields.io%2F&amp;pn=10&amp;oq=https%3A%2F%2Fshields.io%2F&amp;ie=utf-8&amp;rsv_pq=bf92913f0003488b&amp;rsv_t=d46aUVHAFQ77ZmEGMpHpwQ5ncdiMRCwA4exwuw8jxTdXvT1%2BpwCVWcKKgec&amp;rsv_jmp=slow">https://www.baidu.com/s?wd=https%3A%2F%2Fshields.io%2F&amp;pn=10&amp;oq=https%3A%2F%2Fshields.io%2F&amp;ie=utf-8&amp;rsv_pq=bf92913f0003488b&amp;rsv_t=d46aUVHAFQ77ZmEGMpHpwQ5ncdiMRCwA4exwuw8jxTdXvT1%2BpwCVWcKKgec&amp;rsv_jmp=slow</a></p>]]></content>
    
    
    <summary type="html">jsDelivr提供静态资源CDN加速是个什么东西？</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="jeDelivr" scheme="https://tsuiwade.github.io/tags/jeDelivr/"/>
    
    <category term="CDN" scheme="https://tsuiwade.github.io/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>【第6篇博客】写博客的git概念和指令学习记录</title>
    <link href="https://tsuiwade.github.io/2021/01/09/blog6-BaseGit/"/>
    <id>https://tsuiwade.github.io/2021/01/09/blog6-BaseGit/</id>
    <published>2021-01-09T10:55:12.000Z</published>
    <updated>2021-01-26T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写完博客之后，一般都是通过<code>git add .</code>、<code>git commit -m &quot;message&quot;</code>、<code>git push</code>进行提交，至于这些代码的含义及相关概念是什么？本文就带着这些问题进行学习并记录。</p><h2 id="四个工作区域"><a href="#四个工作区域" class="headerlink" title="四个工作区域"></a>四个工作区域</h2><p>git本地有四个工作区域，文件在这四个区域之间的转换关系如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306232549737.png" alt="image-20210306232549737"></p><ul><li><code>workspace</code>：工作区，就是你平时存放项目代码的地方。</li><li><code>staging area</code>：又叫<code>Index / Stage</code>，暂存区/缓冲区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li><code>local repository</code>：本地仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。</li><li><code>remote repository</code>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</li></ul><p>因此，git的工作流程一般是这样的：通过<code>git add .</code>将在工作区中修改、添加后的文件从工作区移至暂存区；再通过<code>git commit</code>移至本地仓库；最后通过<code>git push</code>推到远程仓库中。</p><p>因此，git管理的文件有三种状态：已修改（modified），已暂存（staged），已提交(committed)。</p><h2 id="文件的版本控制"><a href="#文件的版本控制" class="headerlink" title="文件的版本控制"></a>文件的版本控制</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>git不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用SHA-1算法计算文件的校验和。</p><p>版本控制的文件状态有四种，如下图所示。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306232649281.png" alt="image-20210306232649281"></p><p><code>Untracked</code>： 未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制。 通过git add可将状态变为Staged。</p><p><code>Unmodify</code>： 文件已经入库，但未修改，即版本库中的文件快照内容与文件夹中完全一致。 这种类型的文件有两种去处，如果它被修改，而变为Modified。如果使用git rm移出版本库，则成为Untracked文件。</p><p><code>Modified</code>： 文件已修改，仅仅是修改，并没有进行其他的操作。 这个文件也有两个去处，通过git add可进入暂存staged状态，使用git checkout 则丢弃修改过，返回到unmodify状态，这个git checkout即从库中取出文件，覆盖当前修改。</p><p><code>Staged</code>： 暂存状态。 执行git commit则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态。 执行git reset HEAD filename取消暂存，文件状态为Modified。</p><h2 id="git-status命令"><a href="#git-status命令" class="headerlink" title="git status命令"></a>git status命令</h2><p>在命令行中输入git status命令可以得到文件在工作区、暂存区的状态，下面展示这不同的三种状态：</p><pre><code>PS C：\Users\tsui\blog&gt; git statusOn branch myblogYour branch is up to date with &#39;origin/myblog&#39;.Changes to be committed：(use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        modified：   source/_posts/blog3_DnsBlogGithubIo.md        modified：   source/_posts/blog6_hexo_commands.md        modified：   source/_posts/blog7-MarkdownLearning.md        new file：   source/_posts/blog8-BaseGit.md        new file：   source/_posts/blog8-BaseGit/0.gifChanges not staged for commit：(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified：   source/_posts/blog8-BaseGit.mdUntracked files：(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        source/_posts/te.md</code></pre><ol><li><code>Changes to be committed</code>：表示已经从工作区add到暂存区的file（文件或文件夹），可以通过 <code>git restore --staged filename</code> 命令将该file从暂存区移出，只有工作区有该文件，该文件就为Untracked files。通过 <code>git commit -m [message]</code>将暂存区内容添加到本地仓库中，此时我的vscode左侧工具栏源代码管理被挂起的文件，即一个小数字，将会消失。而在vscode底部状态栏的源代码管理处上拉数加一。</li><li><code>Changes not staged for commit</code>：表示文件还在工作区修改，没有add到暂存区。可以通过 <code>git add file</code> 命令将变更文件添加到暂存区，如此便可取消Changes not staged for commit状态。还可以通过 <code>git restore  file</code> 的命令取消在file在工作区的变更，那么暂存区的file内容还是以前的，也取消Changes not staged for commi的状态。</li><li><code>Untracked files：</code>表示只在工作区有的file（文件或文件夹），也就是在暂时区没有该file。</li></ol><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>git 每次提交代码，都要写 Commit message (提交说明)，应该清晰明了，说明本次提交的目的。git commit 命令将暂存区内容添加到本地仓库中。</p><pre><code>git commit -m [message]</code></pre><p>[message] 可以是一些备注信息。</p><p>还可以提交暂存区的指定文件到仓库区：</p><pre><code>git commit [file1] [file2] ... -m [message]</code></pre><p>目前, 社区有多种 Commit message 的写法规范, 例如<a href="https://www.jianshu.com/p/1b56cd033eea">Angular规范</a>。规范主要针对的问题如下：</p><ol><li>版本回退时无法快速定位到指定版本</li><li>无法知道项目中封版操作是哪一个commit</li><li>无法清晰的知道每次提交的记录</li></ol><h3 id="commit提交规范"><a href="#commit提交规范" class="headerlink" title="commit提交规范"></a>commit提交规范</h3><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。<br>其中，Header 是必需的，Body 和 Footer 可以省略。</p><h3 id="Commit-message-的作用"><a href="#Commit-message-的作用" class="headerlink" title="Commit message 的作用"></a>Commit message 的作用</h3><p>格式化的Commit message，有几个好处</p><ol><li>提供更多的历史信息，方便快速浏览</li><li>可以过滤某些commit（比如文档改动）, 便于快速查找信息</li><li>可以直接从commit生成Change log</li></ol><h3 id="Commit-message-的格式"><a href="#Commit-message-的格式" class="headerlink" title="Commit message 的格式"></a>Commit message 的格式</h3><p>每次提交，Commit message 都包括三个部分：<code>Header</code>，<code>Body</code> 和<code>Footer</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#x2F;&#x2F; 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><p>其中, Header 是必需的, Body 和 Footer 可以省略不管是哪一个部分, 任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观。</p><p><strong>一、Header</strong><br>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p><ol><li><p>type<br>type用于说明 commit 的类别，只允许使用下面7个标识。其中，如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中. 其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li><p>scope<br>scope用于说明commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></li><li><p>subject<br>subject 是 commit 目的的简短描述，不超过50个字符以动词开头，使用第一人称现在时，比如change , 而不是 changed 或 changes 第一个字母小写, 结尾不加句号（.）</p></li></ol><p><strong>二、Body</strong><br>Body 部分是对本次 commit 的详细描述, 可以分成多行。下面是一个范例：</p><pre><code>More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</code></pre><p>有两个注意点:</p><ol><li>使用第一人称现在时, 比如使用change, 而不是changed或changes</li><li>应该说明代码变动的动机. 以及与以前行为的对比</li></ol><p><strong>三、Footer</strong><br>Footer 部分只用于两种情况。</p><ol><li><p>不兼容变动<br>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE<br>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><pre><code> BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: &#123; myAttr: &#39;attribute&#39;, &#125; After: scope: &#123; myAttr: &#39;@&#39;, &#125; The removed inject wasn&#39;t generaly useful for directives so there should be no code using it.</code></pre></li><li><p>关闭Issure<br>如果当前 commit 针对某个issue, 那么可以在 Footer 部分关闭这个 issue。</p><pre><code> Closes #234</code></pre></li></ol><hr><h2 id="其他的一些git指令"><a href="#其他的一些git指令" class="headerlink" title="其他的一些git指令"></a>其他的一些git指令</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p><code>git add</code> 命令可将该文件添加到暂存区。<br>添加一个或多个文件到暂存区：</p><pre><code>git add [file1] [file2] ...</code></pre><p>添加指定目录到暂存区，包括子目录：</p><pre><code>git add [dir]</code></pre><p>添加当前目录下的所有文件到暂存区：</p><pre><code>git add .</code></pre><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p><code>git clone</code> 拷贝一个 git 仓库到本地，让自己能够查看该项目，或者进行修改。<br>拷贝项目命令格式如下：</p><pre><code>git clone [url]</code></pre><p>[url] 是你要拷贝的项目。<br>默认情况下，git 会按照你提供的 URL 所指向的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字，你可以在该命令后加上你想要的名称。</p><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>当你想分享你的项目时，必须将其推送到上游。 这个命令很简单：<code>git push &lt;remote&gt; &lt;branch&gt;</code>。 当你想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字）， 那么运行这个命令就可以将你所做的备份到服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;：&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>如果本地分支名与远程分支名相同，则可以省略冒号和远程分支名<br><code>git push origin master</code>将本地的 master 分支推送到 origin 主机的 master 分支。</p><p>(许久之后，确实遇到了这个问题，回来看看！)</p><ol><li><p><strong>git remote</strong> 不带参数，列出已经存在的远程分支</p></li><li><p><strong>git remote -v</strong> | —verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。</p></li><li><p><strong>git remote add url</strong>  添加一个远程仓库。</p></li></ol><hr><p>Git 里面的 origin 到底代表啥意思? <a href="https://blog.csdn.net/yexudengzhidao/article/details/102882774">参考</a>。</p><p>你的代码库(repository)可以存放在你的电脑里，同时你也可以把代码库托管到Github的服务器上。</p><p>在默认情况下，origin指向的就是你本地的代码库托管在Github上的版本。我们假设你首先在github上创建了一个Repository，叫做repository，假设你的Github ID是user1,这个时候指向你的代码库的链接是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository</span><br></pre></td></tr></table></figure><p>如果你在terminal里输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository</span><br></pre></td></tr></table></figure><p>那么git就会在本地拷贝一份托管在github上的代码库这个时候你cd到repository然后输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>你会看到控制台输出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure><p>也就是说git为你默认创建了一个指向远端代码库的origin（因为你是从这个地址clone下来的）。在这里我们要联系我们经常用到的命令<code>git remote add origin 你的GitHub上的地址</code>，其实，这是手动的为你的远程仓库的地址在本地起一个别名。</p><p>再假设现在有一个用户user2 fork了你这个repository，那么他的代码库链接就是这个样子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository</span><br></pre></td></tr></table></figure><p>如果他也照着这个clone一把，然后在他的控制台里输入git remote -v<br>他会看的的就是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure><p>可以看到<code>origin</code>指向的位置是user2的远程代码库这个地址，如果user2想加一个远程指向你的代码库，他可以在控制台输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git</span><br></pre></td></tr></table></figure><p>然后再输入一遍 git remote -v输出结果就会变为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (fetch)</span><br><span class="line">origin https:&#x2F;&#x2F;github.com&#x2F;user2&#x2F;repository.git (push)</span><br><span class="line">upstream https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (fetch)</span><br><span class="line">upstream https:&#x2F;&#x2F;github.com&#x2F;user1&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure><p>增加了指向user1代码库的upstream，也就是之前对指向位置的命名。</p><p>总结来讲，顾名思义，origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签， origin指向的是repository，master只是这个repository中默认创建的第一个branch<code>。(</code>git push origin master<code>)</code>当你git push的时候因为origin和master都是默认创建的，所以可以这样省略，但是这个是bad practice，因为当你换一个branch再git push的时候，有时候就纠结了。</p><hr><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p><code>git pull</code> 命令用于从远程获取代码并合并本地的版本。</p><pre><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;：&lt;本地分支名&gt;</code></pre><p>更新操作：</p><pre><code>git pullgit pull origin</code></pre><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p><pre><code>git pull origin master：brantest</code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><pre><code>git pull origin master</code></pre><p>上面命令表示，取回 origin/master 分支，再与本地的 brantest 分支合并。</p><p>参考：<br><a href="https://www.cnblogs.com/qdhxhz/p/9757390.html">https://www.cnblogs.com/qdhxhz/p/9757390.html</a><br><a href="https://www.jianshu.com/p/1b56cd033eea">https://www.jianshu.com/p/1b56cd033eea</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在写完博客之后，一般都是通过&lt;code&gt;git add .&lt;/code&gt;、&lt;code&gt;git commit -m &amp;quot;message&amp;quot;&lt;/code&gt;、&lt;code&gt;git push&lt;/code&gt;进行提交，至于这些代码的含义及相关概念是什么？本文就带着这些问题</summary>
      
    
    
    
    <category term="github" scheme="https://tsuiwade.github.io/categories/github/"/>
    
    
    <category term="hexo" scheme="https://tsuiwade.github.io/tags/hexo/"/>
    
    <category term="github" scheme="https://tsuiwade.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>【第5篇博客】hexo下的markdown的语法(GFM)学习记录</title>
    <link href="https://tsuiwade.github.io/2021/01/02/blog5-MarkdownLearning/"/>
    <id>https://tsuiwade.github.io/2021/01/02/blog5-MarkdownLearning/</id>
    <published>2021-01-02T11:31:14.000Z</published>
    <updated>2021-01-26T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo下使用的MarkDown为Github的GFM，<a href="https://github.github.com/gfm/">GFM（Github Flavored Markdown）</a> 是 Github 拓展的基于 Markdown 的一种纯文本的书写格式。风格很漂亮，简洁美观大方。但是GFM的MarkDown语法和标准的MarkDown稍有不同，使用过程中需要注意一些。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>Markdown 中，使用 # 或 = 来定义大纲标题，有多少个#或=，就表示是几级的大纲，相当于<h几>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">效果 </th></tr></thead><tbody><tr><td style="text-align:center"># 一级标题</td><td style="text-align:center"><h1>一级标题</h1></td></tr><tr><td style="text-align:center">## 二级标题</td><td style="text-align:center"><h2>二级标题</h2></td></tr><tr><td style="text-align:center">### 三级标题</td><td style="text-align:center"><h3>三级标题</h3></td></tr><tr><td style="text-align:center">#### 四级标题</td><td style="text-align:center"><h4>四级标题</h4></td></tr><tr><td style="text-align:center">正常文字</td><td style="text-align:center">正常文字</td></tr><tr><td style="text-align:center">##### 五级标题</td><td style="text-align:center"><h5>五级标题</h5></td></tr><tr><td style="text-align:center">###### 六级标题</td><td style="text-align:center"><h6>六级标题</h6></td></tr></tbody></table></div><h1 id="基本字体样式"><a href="#基本字体样式" class="headerlink" title="基本字体样式"></a>基本字体样式</h1><p>Markdown 使用一个星号表示斜体，两个星号表示加粗，三个星号表示加粗斜体。</p><div class="table-container"><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">效果 </th></tr></thead><tbody><tr><td style="text-align:center">*斜体*</td><td style="text-align:center"><em>斜体</em></td></tr><tr><td style="text-align:center">**粗体** 或 __粗体__</td><td style="text-align:center"><strong>粗体</strong> </td></tr><tr><td style="text-align:center">***加粗斜体<em>*</em></td><td style="text-align:center"><strong><em>加粗斜体</em></strong></td></tr><tr><td style="text-align:center">~~删除线~~</td><td style="text-align:center"><del>删除线</del></td></tr></tbody></table></div><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>使用星号或者中横线来表示无序列表，注意后面需要加个空格。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 无序列表1</span><br><span class="line">* 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line">- 无序列表4</span><br><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br></pre></td></tr></table></figure></p><ul><li>无序列表1</li><li>无序列表2</li></ul><ul><li>无序列表3</li><li>无序列表4</li></ul><ol><li>有序列表1</li><li>有序列表2</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用部分的内容只需要在行首加上 &gt; 就可以了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 沃兹基硕德说过：不要以自己的放纵来对抗平庸</span><br><span class="line"></span><br><span class="line">&gt; 动物</span><br><span class="line">&gt;&gt; 水生动物</span><br><span class="line">&gt;&gt; 陆生动物</span><br><span class="line">&gt;&gt;&gt; 猴子</span><br><span class="line">&gt;&gt;&gt; 人</span><br><span class="line">&gt;&gt;&gt;&gt; 程序猿</span><br><span class="line">&gt;&gt;&gt;&gt; 攻城狮</span><br><span class="line">&gt;&gt;产品狗 &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记</span><br><span class="line">射鸡虱   &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记</span><br></pre></td></tr></table></figure></p><blockquote><p>沃兹基硕德说过：不要以自己的放纵来对抗平庸</p><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</p></blockquote></blockquote></blockquote></blockquote><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>Markdown 使用<code>[]()</code>来表示超链接，中括号表示链接文字，小括号表示链接地址。</p><pre><code>[tsuiwade&#39;s blog](tsuiwade.github.io)</code></pre><p><a href="tsuiwade.github.io">tsuiwade’s blog</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片的样式与超链接非常相似，只需在前面加个感叹号就可以了，即用<code>![]()</code>表示图片。其中中括号表示图片未加载时的提示文字，小括号表示图片地址。<br>例如使用hexo n blog7_MarkdownLearning时创建了<code>blog7-MarkdownLearning.md</code>和<code>blog7-MarkdownLearning</code>文件夹，此时在文件夹中放入图片。再由小括号中填写文件名就可以在博客中贴图。<br>还可以使用HTML的<code>&lt;img&gt;</code>标签，还有许多例如高度、对齐、宽度标签。具体可见 <a href="https://www.w3school.com.cn/tags/tag_img.asp。">https://www.w3school.com.cn/tags/tag_img.asp。</a><br>下面展示四张图，分别是原始图1、网页链接图2、改大小图3。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![1png](1.png)</span><br><span class="line">![baidu](https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png)</span><br><span class="line">&lt;img src&#x3D;1.png width&#x3D;&quot;100&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br></pre></td></tr></table></figure><br><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306232840871.png" alt="image-20210306232840871"></p><div align="center">图1</div><p><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="baidu"></p><div align="center">图2</div><p><img src=https://gitee.com/tsuiwade/images/raw/master/image-20210306232840871.png width="100"/></p><div align="center">图3</div><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;单行文字&#96;</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line">多行文字1</span><br><span class="line">多行文字2</span><br><span class="line">多行文字3</span><br><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>单行文字</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行文字1</span><br><span class="line">多行文字2</span><br><span class="line">多行文字3</span><br></pre></td></tr></table></figure><br>还可以采用下面的代码块：在连续几行的文本开头加入1个Tab或者4个空格，代码块没有前面的序号。（代码块前需要换行）</p><pre><code>多行文字1多行文字2多行文字3</code></pre><p>也适合做一篇文章的tag。</p><pre><code>`linux` `网络编程` `socket` `epoll`</code></pre><p><code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p><h1 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h1><p>使用—-进行水平分割<br>水平分割线上方</p><hr><p>水平分割线下方</p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格 - 和 | 分割行和列 ， : 控制对其方式<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">居左   | 居右 | 居中</span><br><span class="line">:- | -: | :-:</span><br><span class="line">第1行 | 12  | 13  </span><br><span class="line">第2行 | 22  | 23  </span><br><span class="line">第3行 | 32  | 33  </span><br></pre></td></tr></table></figure><br>居左   | 居右 | 居中<br>:- | -: | :-:<br>第1行 | 12  | 13<br>第2行 | 22  | 23<br>第3行 | 32  | 33  </p><p>表格中的样式可以利用html语言进行修改，还需要配合转义字符<code>\</code><br>如第1部分标题的代码如下</p><pre><code>语法   | 效果 :-: | :-: \# 一级标题 | &lt;h1&gt;一级标题&lt;/h1&gt;\#\# 二级标题 | &lt;h2&gt;二级标题&lt;/h2&gt;\#\#\# 三级标题 | &lt;h3&gt;三级标题&lt;/h3&gt;\#\#\#\# 四级标题 | &lt;h4&gt;四级标题&lt;/h4&gt;正常文字 | 正常文字\#\#\#\#\# 五级标题 | &lt;h5&gt;五级标题&lt;/h5&gt;\#\#\#\#\#\# 六级标题 | &lt;h6&gt;六级标题&lt;/h6&gt;</code></pre><h1 id="提示块标签"><a href="#提示块标签" class="headerlink" title="提示块标签"></a>提示块标签</h1><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>可使用语法 no-icon去掉小图标</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><h1 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h1><p>版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。<br>GFM中可以显示的展示diff效果。使用蓝色表示新增，红色表示删除。<br>其语法与代码高亮类似，只是在三个反引号后面写diff，<br>并且其内容中，以 +开头表示新增，-开头表示删除。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+ 鸟宿池边树，僧敲月下门</span></span><br><span class="line"><span class="deletion">- 鸟宿池边树，僧推月下门</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;diff</span><br><span class="line">+ 鸟宿池边树，僧敲月下门</span><br><span class="line">- 鸟宿池边树，僧推月下门</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><p>其中，字母要统统小写，空格统统要替换成 ‘-‘</p><pre><code>[回到1、标题](#1、标题)[回到2、基本字体样式](#2、基本字体样式)</code></pre><p><a href="#1、标题">回到1、标题</a><br><a href="#2、基本字体样式">回到2、基本字体样式</a></p><h1 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h1><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。<br>比如<code>:blush:</code>，可以显示:blush:。<code>:smile:</code>，可以显示:smile:。<code>:grinning:</code>，可以显示:grinning:。<code>:elephant:</code>，可以显示:elephant:。<code>:v:</code>，可以显示:v:。<code>:balloon:</code>，可以显示:balloon:。<code>:triangular_flag_on_post:</code>，可以显示:triangular_flag_on_post:。<code>:fast_forward:</code>，可以显示:fast_forward:。<code>:100:</code>，可以显示:100:。<br>通过以下代码进行命令行安装配置，还需要配置hexo站点配置文件_config.yml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><br>其他有关表情的符号码和问题可查 <a href="https://hasaik.com/posts/9b280ea3.html">https://hasaik.com/posts/9b280ea3.html</a></p><p>后续跟踪：安装了markdown-it-emoji可能会造成markdown渲染问题，如果出错请注意是这里的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo下使用的MarkDown为Github的GFM，&lt;a href=&quot;https://github.github.com/gfm/&quot;&gt;GFM（Github Flavored Markdown）&lt;/a&gt; 是 Github 拓展的基于 Markdown 的一种纯文本的书写格</summary>
      
    
    
    
    <category term="github" scheme="https://tsuiwade.github.io/categories/github/"/>
    
    
    <category term="markdown" scheme="https://tsuiwade.github.io/tags/markdown/"/>
    
    <category term="GFM" scheme="https://tsuiwade.github.io/tags/GFM/"/>
    
  </entry>
  
  <entry>
    <title>【第4篇博客】hexo的常见指令及简写汇总</title>
    <link href="https://tsuiwade.github.io/2021/01/01/blog4_hexo_commands/"/>
    <id>https://tsuiwade.github.io/2021/01/01/blog4_hexo_commands/</id>
    <published>2021-01-01T10:21:44.000Z</published>
    <updated>2021-01-26T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文借鉴自<a href="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html</a></p><p>为了方便查阅,这里汇总一些常用的hexo指令。</p><h2 id="简写指令："><a href="#简写指令：" class="headerlink" title="简写指令："></a>简写指令：</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p><code>hexo init [folder]</code><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。<br>该命令是一个缩写，完成如下步骤：<br>1、Git clone hexo-starter including hexo-theme-landscape into the current directory or a target folder if specified.<br>2、Install dependencies using a package manager: Yarn 1, pnpm or npm, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with Node.js by default.</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p><code>hexo new [layout] &lt;title&gt;</code><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br><code>hexo n &quot;我的第一篇文章&quot;</code> 等价于 <code>hexo new &quot;我的第一篇文章&quot;</code> 还等价于 <code>hexo new post &quot;我的第一篇文章&quot;</code></p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p><code>hexo generate</code><br>生成静态文件。(执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)<br>该命令可以简写为<br><code>hexo g</code></p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p><code>hexo publish [layout] &lt;filename&gt;</code><br>发表草稿。<br>该命令可以简写为：<br><code>hexo p</code></p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><code>hexo server</code><br>启动服务器。Hexo 会监视文件变动并自动更新，除修改站点配置文件外，无须重启服务器，直接刷新网页即可生效。<br>默认情况下，访问网址为： <a href="http://localhost:4000/。">http://localhost:4000/。</a><br>该命令可以简写为：<br><code>hexo s</code></p><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p><code>hexo deploy</code><br>部署网站。<br>该命令可以简写为：<br><code>hexo d</code></p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>hexo clean</code><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>]]></content>
    
    
    <summary type="html">hexo的常见指令及简写汇总</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="hexo" scheme="https://tsuiwade.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【第3篇博客】如何在无外网情况下访问自己的github.io博客</title>
    <link href="https://tsuiwade.github.io/2020/10/10/blog3_DnsBlogGithubIo/"/>
    <id>https://tsuiwade.github.io/2020/10/10/blog3_DnsBlogGithubIo/</id>
    <published>2020-10-10T10:55:12.000Z</published>
    <updated>2021-01-26T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>在没有科学上网的环境下，访问不了github.io个人博客，导致自己欣赏不了自己的博客。<br>于是，记录了配置dns来解决该问题的步骤。</p><p>本文借鉴自<a href="https://blog.csdn.net/qq_32627137/article/details/108046461">https://blog.csdn.net/qq_32627137/article/details/108046461</a></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>在网络上访问网站，要首先通过DNS服务器把网络域名<code>www.XXXX.com</code> 解析成XXX.XXX.XXX.XXX的IP地址后，我们的计算机才能访问。要是对于每个域名请求我们都要等待域名服务器解析后返回IP信息，这样访问网络的效率就会降低，而Hosts文件就能提高解析效率。根据Windows系统规定，在进行DNS请求以前，Windows系统会先检查自己的Hosts文件中是否有这个地址映射关系，如果有则调用这个IP地址映射，如果没有再向已知的DNS服务器提出域名解析。也就是说Hosts的请求级别比DNS高。 </p><p>github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。<br>于是解决方案就是绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。</p><h2 id="根据环境情况选择跳转ip"><a href="#根据环境情况选择跳转ip" class="headerlink" title="根据环境情况选择跳转ip"></a>根据环境情况选择跳转ip</h2><p>由该网站进行查询<a href="https://tools.ipip.net/dns.php">https://tools.ipip.net/dns.php</a><br>如下图查看访问github.com域名时，延迟最低的ip，复制该ip</p><h4 id="该步骤的作用是选择可以访问到github-io的ip"><a href="#该步骤的作用是选择可以访问到github-io的ip" class="headerlink" title="该步骤的作用是选择可以访问到github.io的ip"></a>该步骤的作用是选择可以访问到github.io的ip</h4><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306235048605.png" alt="image-20210306235048605"><br>然后管理员权限打开记事本</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306235112811.png" alt="image-20210306235112811"></p><p>在记事本中打开C:\Windows\System32\drivers\etc路径下的hosts文件<br>该文件是域名解析文件。可以直接用记事本打开。将IP地址重定向。<br>格式为：ip地址-空格-域名<br>可以将一个域名重新定向到一个IP<br>通过它可以达到以下目的：1、加快域名解析；2、方便局域网用户；3、屏蔽网站 </p><p><img src="C:\Users\tsui\AppData\Roaming\Typora\typora-user-images\image-20210306235123450.png" alt="image-20210306235123450"></p><p>在记事本的最后补上<br><code>219.141.136.10 github.com</code><br>这时候可以打开cmd，输入<code>ping github.com</code>，可以看出ping通该网址了。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306235142600.png" alt="image-20210306235142600"></p><p>上一段是来自选中的跳转ip，下一段是来自己自己家原来的ip，可以看出用了跳转ip，速度会更快。</p><p>接下来同理，设置自己博客的tsuiwade.github.io的ip,接着补在记事本的最后。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306235155495.png" alt="image-20210306235155495"></p><p>最后就可以访问了。</p>]]></content>
    
    
    <summary type="html">在无外网情况下访问自己的博客</summary>
    
    
    
    <category term="github" scheme="https://tsuiwade.github.io/categories/github/"/>
    
    
    <category term="hexo" scheme="https://tsuiwade.github.io/tags/hexo/"/>
    
    <category term="github" scheme="https://tsuiwade.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>【第2篇博客】butterfly样式修改学习记录</title>
    <link href="https://tsuiwade.github.io/2020/10/09/blog2-BlogTheme/"/>
    <id>https://tsuiwade.github.io/2020/10/09/blog2-BlogTheme/</id>
    <published>2020-10-09T08:41:21.000Z</published>
    <updated>2021-03-04T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客首页图"><a href="#博客首页图" class="headerlink" title="博客首页图"></a>博客首页图</h2><pre><code>default_top_img: /img/me.png # 进入博客首页显示的图</code></pre><p>图片资源放进\themes\butterfly\source\img</p><h2 id="博客头部模板"><a href="#博客头部模板" class="headerlink" title="博客头部模板"></a>博客头部模板</h2><p>在此记录一下博客的头部模板。包括名称、创建日期、更新日期、首页缩略图描述、封面（首页和博客顶部）、标签（多选）、分类的模板。<br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 【第2篇博客】butterfly样式修改学习记录</span><br><span class="line">date: 2021-02-09 10:31:23</span><br><span class="line">updated: 2021-02-26 10:31:23</span><br><span class="line">description: butterfly主题样式修改学习记录</span><br><span class="line">cover: &quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/butterfly-diy-cover.png&quot;</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">  -</span> hexo</span><br><span class="line"><span class="bullet">  -</span> butterfly</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">  -</span> 博客搭建记录</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306222532700.png" alt="image-20210306222532700"></p><p>在_config.yml修改，还有子菜单的设计。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章</span> <span class="string">||</span> <span class="attr">fas fa-book:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">归档</span> <span class="string">||</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">标签</span> <span class="string">||</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">分类</span> <span class="string">||</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">便签</span> <span class="string">||</span> <span class="attr">fas fa-sticky-note:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">留言</span> <span class="string">||</span> <span class="string">/messages/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">友链</span> <span class="string">||</span> <span class="string">/blogroll/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-user-friends</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">圈子</span> <span class="string">||</span> <span class="string">/moments/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-blog</span></span><br><span class="line">  <span class="string">列表</span> <span class="string">||</span> <span class="attr">fas fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">图库</span> <span class="string">||</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">音乐</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">说说</span> <span class="string">||</span> <span class="string">/say/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">叨叨</span> <span class="string">||</span> <span class="string">/talk/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">  <span class="string">关于</span> <span class="string">||</span> <span class="attr">fas fa-desktop:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">本站</span> <span class="string">||</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-stream</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">统计</span> <span class="string">||</span> <span class="string">/charts/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-chart-bar</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">订阅</span> <span class="string">||</span> <span class="string">/sub/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-rss</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">背景</span> <span class="string">||</span> <span class="string">/background/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-adjust</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">自己</span> <span class="string">||</span> <span class="string">/me/</span> <span class="string">||</span> <span class="string">far</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure><p>必须是 /xxx/，后面||分开，然后写图标名。导航的文字可以自行修改。</p><p>首先介绍文章内的归档archive、标签tag、分类category的修改顶部图方法。</p><p>1、 在主题样式配置文件内修改各属性的img图。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># archive_img修改了归档页archives的顶部图</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/butterfly_cdn@2.1.0/top_img/archive.jpg&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#category_img修改了分类categories下的每个分类category的顶部图</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/categories.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tag_img修改了标签tags下的每个标签tag的顶部图</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="string">&quot;https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/tags.jpg&quot;</span></span><br></pre></td></tr></table></figure><br>2、 分类页categories和便签页tags的顶部图需要新建index页设置属性，具体参考 <a href="https://butterfly.js.org/posts/dc584b87/">https://butterfly.js.org/posts/dc584b87/</a></p><p>例如设置分类页，需要先hexo new page link，接着找到source/link/index.md修改文件：<br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-02-26 21:33:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">top<span class="emphasis">_img: &quot;https://cdn.jsdelivr.net/gh/jerryc127/butterfly_</span>cdn@2.1.0/top<span class="emphasis">_img/archive.jpg&quot;</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure></p><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>效果如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/4.png" alt=""></p><p>butterfly支持<code>font-awesome v5</code>图标。<br>书写格式 <code>图标名: url || 描述性文字</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/tsuiwade</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:478451541@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br><span class="line">  <span class="attr">iconfont  icon-bilibili:</span> <span class="string">https://space.bilibili.com/381957255</span> <span class="string">||</span> <span class="string">bilibili</span></span><br><span class="line">  <span class="attr">iconfont  icon-zhifubao:</span> <span class="string">https://www.bilibili.com</span> <span class="string">||</span> <span class="string">alipay</span></span><br><span class="line">  <span class="attr">iconfont  icon-wechat:</span> <span class="string">https://www.bilibili.com</span> <span class="string">||</span> <span class="string">wechat</span></span><br><span class="line">  <span class="attr">iconfont  icon-qq:</span> <span class="string">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=478451541</span> <span class="string">||</span> <span class="string">qq</span></span><br><span class="line">  <span class="attr">iconfont  icon-csdn:</span> <span class="string">https://www.bilibili.com</span> <span class="string">||</span> <span class="string">CSDN</span></span><br><span class="line">  <span class="attr">iconfont  icon-shejiao-yinle:</span> <span class="string">https://www.bilibili.com</span> <span class="string">||</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">iconfont  icon-shejiaotubiao-55:</span> <span class="string">https://www.bilibili.com</span> <span class="string">||</span> <span class="string">facebook</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u012208219/article/details/106883012">https://blog.csdn.net/u012208219/article/details/106883012</a><br>该教程描述了如何引入外部样式。</p><p>添加qq超链接 tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=478451541<br>qq在线联系超链接<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=2445408174&amp;site=qq&amp;menu=yes">http://wpa.qq.com/msgrd?v=3&amp;uin=2445408174&amp;site=qq&amp;menu=yes</a></p><h2 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h2><p>主页文章的节选有自动节选和文章页description两种，<br>在主题配置文件中定位到<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description</span></span><br><span class="line"><span class="comment"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt (default)</span></span><br><span class="line"><span class="comment"># false: do not show the article introduction</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><br>在这我们选择2，优先选择description，如果没有配置description，则自动节选内容。</p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><p><code>disable_top_img: true</code> ：不展示顶部图<br><code>index_img</code>：主页的顶部图<br><code>default_top_img</code>：默认的顶部图，当没有配置页面的顶部图的时候，将展示这个<br><code>archive_img</code>：归档页的顶部图<br><code>tag_img</code>：tag子页面的顶部图</p><p>还可尝试</p><pre><code>top_img: orangetop_img: &#39;linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)&#39;</code></pre><h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p>文章打赏设置二维码。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306222725296.png" alt="image-20210306222725296"></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="comment">#   link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信打赏</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="comment">#   link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝打赏</span></span><br></pre></td></tr></table></figure><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated block center larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated block right outline larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><h2 id="tabs"><a href="#tabs" class="headerlink" title="tabs"></a>tabs</h2><p>具体参考 <a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">https://butterfly.js.org/posts/4aa8abbe/#Tabs</a><br><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><br><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">哪個英文字母最酷？ &#123;% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">門裏站着一個人? &#123;% hideInline 閃 %&#125;</span><br></pre></td></tr></table></figure><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click  </button><span class="hide-content">閃</span></span></p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>在主题配置文件中设置<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Valine</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><br>其中，还需要配置Valine，需要用到leancloud。</p><p>它是领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务,为移动开发提供强有力的后端支持。<br>valine: 参考 <a href="https://xuqwblog.blog.csdn.net/article/details/107248047">https://xuqwblog.blog.csdn.net/article/details/107248047</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">appId:</span>  <span class="comment"># leancloud application app id</span></span><br><span class="line"><span class="attr">appKey:</span>  <span class="comment"># leancloud application app key</span></span><br><span class="line"><span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line"><span class="attr">lang:</span> <span class="string">en</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line"><span class="attr">placeholder:</span> <span class="string">記得留下你的暱稱和郵箱....可以快速收到回復</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span><br><span class="line"><span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header info (nick/mail/link)</span></span><br><span class="line"><span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line"><span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line"><span class="attr">bg:</span> <span class="string">/img/comment_bg.png</span> <span class="comment"># valine background</span></span><br><span class="line"><span class="attr">emojiCDN:</span> <span class="comment"># emoji CDN</span></span><br><span class="line"><span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line"><span class="attr">requiredFields:</span> <span class="string">nick,mail</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line"><span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>由于我们是静态博客，页面和存储是分离开的，动态博客才可以直接删除评论，因此需要用到LeanCloud，按下图进行删评。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306221852309.png" alt="image-20210306221852309"></p><h2 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h2><p>评论区打字震动效果如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/1.gif" alt=""></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖动特效)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h2><p>本文设置的特效名称为canvas_nest，样式见本博客背景空白处的鼠标跟随连接网，很漂亮。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span> <span class="comment">#color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(<span class="doctag">note:</span> use &#x27;,&#x27; to separate.)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment"># false 手機端不顯示 true 手機端顯示</span></span><br></pre></td></tr></table></figure></p><h2 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h2><p>效果可见本博客的鼠标样式。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h2 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h2><p>效果见首页背景图上的打字效果，sub中替换要展示的文字。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗號&#x27; , &#x27;,請使用轉義字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文雙引號&#x27; &quot; &#x27;,請使用轉義字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">不要以自己的放纵来对抗平庸</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Never</span> <span class="string">put</span> <span class="string">off</span> <span class="string">till</span> <span class="string">tomorrow</span> <span class="string">what</span> <span class="string">you</span> <span class="string">can</span> <span class="string">do</span> <span class="string">today</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">你要悄悄的努力，然后惊艳所有人</span></span><br></pre></td></tr></table></figure></p><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>效果见博客上方的介绍。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306222901875.png" alt="image-20210306222901875"></p><p>先<code>yarn add hexo-wordcount</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 主页侧边栏的文字统计</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span> <span class="comment"># 博客上方的文字统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p>国内最出名的莫过于iconfont,功能很强大且图标內容很丰富的矢量图标库。很多Font Awesome不支持的图标都可以在这里找到。同时，iconfont支持选择需要的图标生成css链接，減少不必要的CSS加载。</p><p>具体参考 <a href="https://butterfly.js.org/posts/4073eda/#iconfont">https://butterfly.js.org/posts/4073eda/#iconfont</a></p><h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p>这里设置的滚动条样式如本文的滚动条一样。</p><p>这里需要介绍一下JS/CSS 如何引用</p><ol><li>定位搜索 inject</li><li>其中 head 是用来引入 css 的。bottom 是用来引入 js 的。<br>具体参考 <a href="https://www.antmoe.com/posts/a811d614/#%E5%89%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">https://www.antmoe.com/posts/a811d614/#%E5%89%8D%E7%BD%AE%E8%AF%B4%E6%98%8E</a></li></ol><p>滚动条参考 <a href="https://www.antmoe.com/posts/a811d614/#%E6%BB%9A%E5%8A%A8%E6%9D%A1">https://www.antmoe.com/posts/a811d614/#%E6%BB%9A%E5%8A%A8%E6%9D%A1</a></p><h2 id="引入css-js文件"><a href="#引入css-js文件" class="headerlink" title="引入css/js文件"></a>引入css/js文件</h2><p>这里介绍常用的主题样式魔改方法，大多需要修改或新建css和js文件。<br>具体参考 <a href="https://butterfly.lete114.top/article/Butterfly-config.html">https://butterfly.lete114.top/article/Butterfly-config.html</a><br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/iconfont.min.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/20210205.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/self/Kimbiedark.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/background.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@latest/butterfly/css/macblack.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/js/hideMobileSidebar.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/myjs.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="卖萌标题"><a href="#卖萌标题" class="headerlink" title="卖萌标题"></a>卖萌标题</h2><p>当离开至其他页面标签后，再回到本博客页面，和过一小会时间后，标题显示的文字不同，效果如下：</p><p><img src="C:\Users\tsui\blog\source\_posts\blog2-BlogTheme\3.png" alt="3"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可爱的Title</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/img/favicon.ico&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(つェ⊂) 我藏好了哦~~&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&#x27;[rel=&quot;icon&quot;]&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>, <span class="string">&quot;/img/favicon.ico&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&#x27;(*´∇｀*) 被你发现啦~~&#x27;</span> + OriginTitle;</span><br><span class="line">        titleTime = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="博主昵称颜色"><a href="#博主昵称颜色" class="headerlink" title="博主昵称颜色"></a>博主昵称颜色</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.author-info__name</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7242</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果见主页的侧边栏博主信息卡片。</p><h2 id="鼠标魔改"><a href="#鼠标魔改" class="headerlink" title="鼠标魔改"></a>鼠标魔改</h2><p>效果可见本博客的鼠标样式。<br>具体参考 <a href="https://blog.csdn.net/u012208219/article/details/106883001/">https://blog.csdn.net/u012208219/article/details/106883001/</a></p><h2 id="页脚翻页时钟计时"><a href="#页脚翻页时钟计时" class="headerlink" title="页脚翻页时钟计时"></a>页脚翻页时钟计时</h2><p>样式在页脚可见，效果如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/2.png" alt=""></p><p>可设置开始计时的时间。<br>具体参考 <a href="https://akilar.top/posts/b941af/">https://akilar.top/posts/b941af/</a></p><h2 id="打赏按钮投币彩蛋效果"><a href="#打赏按钮投币彩蛋效果" class="headerlink" title="打赏按钮投币彩蛋效果"></a>打赏按钮投币彩蛋效果</h2><p>效果可见我的博客下方的打赏，点击后有硬币弹出的效果，并且点击后文本改变。<br>具体参考 <a href="https://akilar.top/posts/23fdf850/">https://akilar.top/posts/23fdf850/</a></p><h2 id="侧边栏的时钟卡片"><a href="#侧边栏的时钟卡片" class="headerlink" title="侧边栏的时钟卡片"></a>侧边栏的时钟卡片</h2><p>效果如下：</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/image-20210306222217407.png" alt="image-20210306222217407"></p><ol><li>需要访问 <a href="https://openweathermap.org/">OpenWeather</a>, 按照网站指示完成注册。</li><li>注册完成后，访问 <a href="https://home.openweathermap.org/api_keys">API Keys</a> 获取相应的 API 密钥。留待之后备用。</li><li>还需完成邮箱验证，最后通过邮箱发放API，如果还未生效，需要hexo clean。</li></ol><p>具体参考 <a href="https://akilar.top/posts/4e39cf4a/">https://akilar.top/posts/4e39cf4a/</a></p><h2 id="搜索系统"><a href="#搜索系统" class="headerlink" title="搜索系统"></a>搜索系统</h2><p>建议使用本地搜寻方法，需要安装<a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> ，按提示安装即可。</p><p>最后还需配置主题文件<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="首页字体修改"><a href="#首页字体修改" class="headerlink" title="首页字体修改"></a>首页字体修改</h2><p>效果见本人主页的字体，不同位置的字体不同，例如h1和a使用的某Italic字体，span使用的新叶恋体<br>。这里推荐一个免费字体网站——<a href="https://www.100font.com/">100font</a> 。<br>在inject引入的css文件（或自己新建）中加入下面几行代码。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">@font-face</span> &#123;</span><br><span class="line">  <span class="string">font-family:&#x27;zhongwen&#x27;;</span></span><br><span class="line">  <span class="string">src:url(&#x27;https://cdn.jsdelivr.net/gh/tsuiwade/CDN@4.0/font/yenianti.otf&#x27;);</span></span><br><span class="line">  <span class="string">font-display:swap</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">@font-face</span> &#123;</span><br><span class="line">  <span class="string">font-family:&#x27;yingwen&#x27;;</span></span><br><span class="line">  <span class="string">src:url(&#x27;https://cdn.jsdelivr.net/gh/tsuiwade/CDN@4.0/font/1Italic.ttf&#x27;);</span></span><br><span class="line">  <span class="string">font-display:swap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">h1#site-title</span> &#123;</span><br><span class="line">  <span class="string">font-family:yingwen!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">span#subtitle</span> &#123;</span><br><span class="line">  <span class="string">font-family:zhongwen!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">a#site-name</span> &#123;</span><br><span class="line">  <span class="string">font-family:yingwen!important</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>挑选您心爱的字体，并把它下载下来，可以存在本地，也可以利用 jsdelivr 的方式加速，最后替换 css 文件中的 url 即可，zhongwen/yingwen 只是别名，可以任意修改，不过引用的时候，要确保名字相同。</p><p>有关jsdelivr加速的概念和使用，可见我的第七篇博客。</p><p>也可以换其他字体，具体参考 <a href="https://blog.imzjw.cn/posts/b74f504f/">https://blog.imzjw.cn/posts/b74f504f/</a><br>这里面语法—— <code>CSS3 @font-face规则</code> 可参考 <a href="https://www.runoob.com/cssref/css3-pr-font-face-rule.html">https://www.runoob.com/cssref/css3-pr-font-face-rule.html</a></p><h2 id="WOW-js-–-让页面滚动更有趣"><a href="#WOW-js-–-让页面滚动更有趣" class="headerlink" title="WOW.js – 让页面滚动更有趣"></a>WOW.js – 让页面滚动更有趣</h2><p>本博客在向下滚动的时候，有些元素会产生细小的动画效果。产生一种模块懒加载的特效感，这里主要用到的是wowjs。如果你希望你的页面也更加有趣，那么你可以试试 WOW.js。</p><p>主要参考<br><a href="https://www.delac.io/wow/">https://www.delac.io/wow/</a><br><a href="https://akilar.top/posts/abab51cf/">https://akilar.top/posts/abab51cf/</a> 。<br>还可修改相关配置。</p>]]></content>
    
    
    <summary type="html">butterfly主题样式修改学习记录</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="hexo" scheme="https://tsuiwade.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://tsuiwade.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>【第1篇博客】hexo搭建github.io博客学习记录</title>
    <link href="https://tsuiwade.github.io/2020/07/05/blog1-MyBlog/"/>
    <id>https://tsuiwade.github.io/2020/07/05/blog1-MyBlog/</id>
    <published>2020-07-05T10:30:44.000Z</published>
    <updated>2021-02-11T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><p>本文将记录如下步骤：</p><ol><li>环境准备</li><li>hexo博客搭建</li><li>github静态网站部署</li><li>通过github的Action自动部署项目</li></ol><hr><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="github账号申请及repository仓库新建"><a href="#github账号申请及repository仓库新建" class="headerlink" title="github账号申请及repository仓库新建"></a>github账号申请及repository仓库新建</h2><p>首先需要进入官网 <a href="https://github.com">https://github.com</a> 申请一个github账号。</p><p>然后在右上角New一个repository，注意Repository name 必须为自己的<code>用户名.github.io</code>，例如 tsuiwade.github.io。（因为这样最后生成的博客网址才会足够的短，直接为<code>username.github.io</code>，否则生成的网址还有前面的用户名，网址过长而不美观。） </p><p><img src="https://gitee.com/tsuiwade/images/raw/master/1.jpg" alt=""></p><p>其他默认，最后<code>creat repository</code></p><h1 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h1><h2 id="搭建静态博客的框架-hexo"><a href="#搭建静态博客的框架-hexo" class="headerlink" title="搭建静态博客的框架-hexo"></a>搭建静态博客的框架-hexo</h2><p>hexo是一个快速、简洁且高效的博客框架，具有超快速度、支持markdown、一键部署、插件和可扩展性的特性。官网为 <a href="https://hexo.io/">https://hexo.io/</a> 。</p><p>hexo框架的主题样式比较丰富，可用插件也较多，虽然功能不够强大，但仍然能满足现阶段我们写博客的需求，比较适合新手。</p><p>在搭建博客之前，最好有HTML/JS/CSS、Node/Npm、git/github的技能，不过没有也没关系，跟着我的这篇博客走，能完成自己博客的搭建，我的其他文章可以帮助你补全知识框架。</p><h2 id="开始搭建hexo博客"><a href="#开始搭建hexo博客" class="headerlink" title="开始搭建hexo博客"></a>开始搭建hexo博客</h2><p>初始化hexo将使用以下命令。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g # 全局安装hexo提供的脚手架工具hexo-cli</span><br><span class="line">hexo init blog # 使用脚手架工具提供的hexo init来初始化一个hexo项目，后面填写项目名称</span><br><span class="line">cd blog # 项目初始化之后，进入项目文件夹，并且用vscode打开该文件夹</span><br><span class="line">npm install</span><br><span class="line">hexo server # 可简写为hexo s来运行项目，便可以在本地服务4000端口来访问</span><br></pre></td></tr></table></figure><br>在浏览器中访问 <a href="http://localhost:4000">http://localhost:4000</a> ，便可看到博客页面如下图所示，当前博客使用了hexo所提供的一个默认主题<code>landscape</code>，后续可以更换一个更好看的主题。<br><img src="https://gitee.com/tsuiwade/images/raw/master/2.jpg" alt=""></p><p>我们回到项目文件夹中，主要文件的含义如下图所示。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/3.png" alt=""></p><p>其中，根目录下的<code>_config.yml</code>文件是我们经常会修改的，可修改博客的一些默认配置。yml是一种用来表达数据序列化的格式，类似于json。</p><p>打开该文件，修改如下博客配置属性。</p><div class="table-container"><table><thead><tr><th style="text-align:left">修改前</th><th style="text-align:left">修改后 </th></tr></thead><tbody><tr><td style="text-align:left">title: Hexo&lt;/br&gt;description: ‘’&lt;/br&gt;author: John Doe&lt;/br&gt;language: en&lt;/br&gt;url: <a href="http://example.com">http://example.com</a> &lt;/br&gt;</td><td style="text-align:left">title: TsuiWade’s blog&lt;/br&gt;description: “记录技术生活的点点滴滴”&lt;/br&gt;author: tsuiwade&lt;/br&gt;language: zh-CN&lt;/br&gt;url:<a href="https://tsuiwade.github.io/">https://tsuiwade.github.io/</a></td></tr></tbody></table></div><p>修改后可以看到浏览器上的博客页面也做了相应的变化。</p><p>此时，一个基本的博客已经搭建完成。</p><h2 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h2><p>hexo官网 <a href="https://hexo.io/">https://hexo.io/</a> 里提供了300多种主题样式，可以在跟随我使用同样的主题，学会设置主题样式后可自行选择任意一款你喜欢的样式来使用。<br><img src="https://gitee.com/tsuiwade/images/raw/master/5.png" alt=""></p><p>这里我们选择<code>Butterfly</code>样式，同我的博客样式一样。</p><p>官网 <a href="https://butterfly.js.org/">https://butterfly.js.org/</a> 。 官网也做成了该主题的博客样式，使用的butterfly样式，其中有许多hexo博客优化教程，后续我也会学习整理。</p><p>还有github项目地址 <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> 。其中有配置主题的教程，我们先打开来走一遍该流程。</p><p>1、回到vscode，将该主题克隆到themes目录下。</p><p>输入</p><pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre><p>可以看到在themes文件夹下多了一个butterfly文件夹，即为主题样式文件。</p><p>2、在根目录的<code>_config.yml</code>中修改主题属性：</p><div class="table-container"><table><thead><tr><th style="text-align:left">修改前</th><th style="text-align:left">修改后 </th></tr></thead><tbody><tr><td style="text-align:left">theme: landscape</td><td style="text-align:left">theme: butterfly</td></tr></tbody></table></div><p>3、在文件夹中显示butterfly，删除<code>.git</code>文件夹，删除该主题的默认的git配置文件，是为了把该主题和我们的博客项目合并为一个项目，统一由一个git来管理。</p><p>4、更换主题后，如果输入hexo s，则会看到Hexo启动服务器页面显示报错extends includes/layout.pug block content include includes/recent-posts.pug include</p><p>此时我们在cmd中输入</p><pre><code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></pre><p>此时<code>hexo s</code>即可看到主题样式应用成功。</p><p>倘若还不能解决，则进行清除缓存<br><code>hexo clean</code><br>生成静态文件，查看效果<br><code>hexo g</code><br><code>hexo s</code><br>可看到主题样式配置生效。</p><p><img src="https://gitee.com/tsuiwade/images/raw/master/3.jpg" alt=""></p><h1 id="github静态网站部署"><a href="#github静态网站部署" class="headerlink" title="github静态网站部署"></a>github静态网站部署</h1><p>此时，我们的博客只能在本地访问。接下来我们需要把博客部署到github上的一个仓库上，然后使用github pages功能，获取到一个站点来访问我们的博客。</p><p>由前面的github账号创建的仓库。打开该github页面，正如页面提示的一样。<br><img src="https://gitee.com/tsuiwade/images/raw/master/4.jpg" alt=""></p><p>首先进行·git初始化：</p><pre><code>git init</code></pre><p>然后给当前仓库添加一个远程的git地址：</p><pre><code>git remote add origin https://github.com/miemietou/miemietou.github.io.git</code></pre><p>在使用hexo部署博客之前，我们需要先安装一个叫<code>hexo-deployer-git</code>的依赖，这个库会帮助我们将生成好的代码部署到一个具体的分支。</p><pre><code>yarn add hexo-deployer-git</code></pre><p>安装完之后，我们打开<code>_config.yml</code>文件，拉到最下面，修改deploy属性。部署类型为git，仓库地址填项目地址，分支填写master，注意我们的打包产物需要提交到master分支。<br>将</p><pre><code>deploy:  type: &#39;&#39;</code></pre><p>修改为</p><pre><code>deploy:  type: git  repo: https://github.com/miemietou/miemietou.github.io  branch: master</code></pre><p>接着输入</p><pre><code>hexo deploy</code></pre><p>来部署我们的代码，代码提交完成之后，我们打开github项目的首页，就能看到我们打包上传的产物已经提交到了master分支上。master分支里面的代码其实就是生成的public目录下的文件。然后点击仓库页面的setting，找到github pages一栏，顺利的话将显示我们的站点已成功部署，可以打开该网址检查是否被部署成功。</p><p>此时我们已经完成一个博客的基本部署功能。接下来将做一个非常有趣的自动化部署功能。</p><p>在自动化部署之前，我们需要把我们的源代码提交到github上，因为master分支已经被占用，所以我们只能把源代码提交到另一个分支上，首先我们需要commit一下本地代码。</p><pre><code>git add .git commit -m &quot;none&quot;</code></pre><p>然后我们重建一个分支myblog，然后将该分支push到github上。</p><pre><code>git push --set-upstream origin myblog</code></pre><p>接着，myblog分支已经被push到了github上。</p><h1 id="github-actions实现自动化部署"><a href="#github-actions实现自动化部署" class="headerlink" title="github actions实现自动化部署"></a>github actions实现自动化部署</h1><p>不需要自己在本地进行代码的构建打包，使仓库的action功能，点击该按钮，可以看到github actions提供的功能：帮助构建、测试、部署你的代码，还能使用github actions来做code review、分支管理和issue的追踪。我们这里将会使用它来实现项目的自动打包和代码的部署。</p><p>首先，我们需要在项目根目录下创建.github文件夹和.github目录下的workflows文件夹，然后在里面新建deploy.yml文件，复制粘贴如下代码，该代码的作用就是配置代码部署过程中的一些步骤，例如第一步需要checkout，然后需要安装和打包构建，最后触发一个代码的部署。</p><pre><code>name: Build and Deployon: [push]jobs:build-and-deploy:    runs-on: ubuntu-latest    steps:    - name: Checkout 🛎️        uses: actions/checkout@v2 # If you&#39;re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.        with:        persist-credentials: false    - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the &#39;build&#39; folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.        run: |        npm install        npm run build        env:        CI: false    - name: Deploy 🚀        uses: JamesIves/github-pages-deploy-action@releases/v3        with:        GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;        BRANCH: master # The branch the action should deploy to.        FOLDER: public # The folder the action should deploy.</code></pre><p>接下来，就输入提交代码老三行：<br>    git add .<br>    git commit -m “message”<br>    git push</p><p>提交之后，我们回到仓库首页，点击actions标签，可以看到所有的工作流，如果显示绿色打钩则代码部署成功，站点内容就会成功更新。</p><p>参考： <a href="https://www.bilibili.com/video/BV1dt4y1Q7UE?t=354">https://www.bilibili.com/video/BV1dt4y1Q7UE?t=354</a></p><p><a href="https://www.antmoe.com/posts/4b1b8c9f/">https://www.antmoe.com/posts/4b1b8c9f/</a></p>]]></content>
    
    
    <summary type="html">hexo搭建博客记录</summary>
    
    
    
    <category term="博客搭建记录" scheme="https://tsuiwade.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="hexo" scheme="https://tsuiwade.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
