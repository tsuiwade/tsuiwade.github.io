<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TsuiWade&#39;s blog</title>
  
  
  <link href="https://tsuiwade.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsuiwade.github.io/"/>
  <updated>2021-02-22T09:21:22.671Z</updated>
  <id>https://tsuiwade.github.io/</id>
  
  <author>
    <name>tsuiwade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【第6篇博客】写博客的git概念和指令学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/22/blog6-BaseGit/"/>
    <id>https://tsuiwade.github.io/2021/02/22/blog6-BaseGit/</id>
    <published>2021-02-22T09:21:22.671Z</published>
    <updated>2021-02-22T09:21:22.671Z</updated>
    
    <content type="html"><![CDATA[<p>在写完博客之后，一般都是通过<code>git add .</code>、<code>git commit -m &quot;message&quot;</code>、<code>git push</code>进行提交，至于这些代码的含义及相关概念是什么？本文就带着这些问题进行学习并记录。</p><h2 id="四个工作区域"><a class="header-anchor" href="#四个工作区域">¶</a>四个工作区域</h2><p>git本地有四个工作区域，文件在这四个区域之间的转换关系如下：<br><img src="/2021/02/22/blog6-BaseGit/1.jpg" alt="1png"></p><ul><li><code>workspace</code>：工作区，就是你平时存放项目代码的地方。</li><li><code>staging area</code>：又叫<code>Index / Stage</code>，暂存区/缓冲区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li><code>local repository</code>：本地仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。</li><li><code>remote repository</code>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。</li></ul><p>因此，git的工作流程一般是这样的：通过<code>git add .</code>将在工作区中修改、添加后的文件从工作区移至暂存区；再通过<code>git commit </code>移至本地仓库；最后通过<code>git push</code>推到远程仓库中。</p><p>因此，git管理的文件有三种状态：已修改（modified），已暂存（staged），已提交(committed)。</p><h2 id="文件的版本控制"><a class="header-anchor" href="#文件的版本控制">¶</a>文件的版本控制</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><p>git不关心文件两个版本之间的具体差别，而是关心文件的整体是否有改变，若文件被改变，在添加提交时就生成文件新版本的快照，而判断文件整体是否改变的方法就是用SHA-1算法计算文件的校验和。</p><p>版本控制的文件状态有四种，如下图所示。</p><p><img src="/2021/02/22/blog6-BaseGit/2.png" alt="2png"></p><p><code>Untracked</code>： 未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制。 通过git add可将状态变为Staged。</p><p><code>Unmodify</code>： 文件已经入库，但未修改，即版本库中的文件快照内容与文件夹中完全一致。 这种类型的文件有两种去处，如果它被修改，而变为Modified。如果使用git rm移出版本库，则成为Untracked文件。</p><p><code>Modified</code>： 文件已修改，仅仅是修改，并没有进行其他的操作。 这个文件也有两个去处，通过git add可进入暂存staged状态，使用git checkout 则丢弃修改过，返回到unmodify状态，这个git checkout即从库中取出文件，覆盖当前修改。</p><p><code>Staged</code>： 暂存状态。 执行git commit则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为Unmodify状态。 执行git reset HEAD filename取消暂存，文件状态为Modified。</p><h2 id="git-status命令"><a class="header-anchor" href="#git-status命令">¶</a>git status命令</h2><p>在命令行中输入git status命令可以得到文件在工作区、暂存区的状态，下面展示这不同的三种状态：</p><pre><code>PS C：\Users\tsui\blog&gt; git statusOn branch myblogYour branch is up to date with 'origin/myblog'.Changes to be committed：(use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        modified：   source/_posts/blog3_DnsBlogGithubIo.md        modified：   source/_posts/blog6_hexo_commands.md        modified：   source/_posts/blog7-MarkdownLearning.md        new file：   source/_posts/blog8-BaseGit.md        new file：   source/_posts/blog8-BaseGit/0.gifChanges not staged for commit：(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)(use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)        modified：   source/_posts/blog8-BaseGit.mdUntracked files：(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        source/_posts/te.md</code></pre><ol><li><code>Changes to be committed</code>：表示已经从工作区add到暂存区的file（文件或文件夹），可以通过 <code>git restore --staged filename</code> 命令将该file从暂存区移出，只有工作区有该文件，该文件就为Untracked files。通过 <code>git commit -m [message]</code>将暂存区内容添加到本地仓库中，此时我的vscode左侧工具栏源代码管理被挂起的文件，即一个小数字，将会消失。而在vscode底部状态栏的源代码管理处上拉数加一。</li><li><code>Changes not staged for commit</code>：表示文件还在工作区修改，没有add到暂存区。可以通过 <code>git add file</code> 命令将变更文件添加到暂存区，如此便可取消Changes not staged for commit状态。还可以通过 <code>git restore  file</code> 的命令取消在file在工作区的变更，那么暂存区的file内容还是以前的，也取消Changes not staged for commi的状态。</li><li><code>Untracked files：</code>表示只在工作区有的file（文件或文件夹），也就是在暂时区没有该file。</li></ol><h2 id="git-commit"><a class="header-anchor" href="#git-commit">¶</a>git commit</h2><p>git 每次提交代码，都要写 Commit message (提交说明)，应该清晰明了，说明本次提交的目的。git commit 命令将暂存区内容添加到本地仓库中。</p><pre><code>git commit -m [message]</code></pre><p>[message] 可以是一些备注信息。</p><p>还可以提交暂存区的指定文件到仓库区：</p><pre><code>git commit [file1] [file2] ... -m [message]</code></pre><p>目前, 社区有多种 Commit message 的写法规范, 例如<a href="https://www.jianshu.com/p/1b56cd033eea">Angular规范</a>。规范主要针对的问题如下：</p><ol><li>版本回退时无法快速定位到指定版本</li><li>无法知道项目中封版操作是哪一个commit</li><li>无法清晰的知道每次提交的记录</li></ol><h3 id="commit提交规范"><a class="header-anchor" href="#commit提交规范">¶</a>commit提交规范</h3><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。<br>其中，Header 是必需的，Body 和 Footer 可以省略。</p><h3 id="Commit-message-的作用"><a class="header-anchor" href="#Commit-message-的作用">¶</a>Commit message 的作用</h3><p>格式化的Commit message，有几个好处</p><ol><li>提供更多的历史信息，方便快速浏览</li><li>可以过滤某些commit（比如文档改动）, 便于快速查找信息</li><li>可以直接从commit生成Change log</li></ol><h3 id="Commit-message-的格式"><a class="header-anchor" href="#Commit-message-的格式">¶</a>Commit message 的格式</h3><p>每次提交，Commit message 都包括三个部分：<code>Header</code>，<code>Body</code> 和<code>Footer</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br>&#x2F;&#x2F; 空一行<br>&lt;body&gt;<br>&#x2F;&#x2F; 空一行<br>&lt;footer&gt;<br></code></pre></td></tr></table></figure><p>其中, Header 是必需的, Body 和 Footer 可以省略不管是哪一个部分, 任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观。</p><p><strong>一、Header</strong><br>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p><ol><li><p>type<br>type用于说明 commit 的类别，只允许使用下面7个标识。其中，如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中. 其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动</li></ul></li><li><p>scope<br>scope用于说明commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></li><li><p>subject<br>subject 是 commit 目的的简短描述，不超过50个字符以动词开头，使用第一人称现在时，比如change , 而不是 changed 或 changes 第一个字母小写, 结尾不加句号（.）</p></li></ol><p><strong>二、Body</strong><br>Body 部分是对本次 commit 的详细描述, 可以分成多行。下面是一个范例：</p><pre><code>More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</code></pre><p>有两个注意点:</p><ol><li>使用第一人称现在时, 比如使用change, 而不是changed或changes</li><li>应该说明代码变动的动机. 以及与以前行为的对比</li></ol><p><strong>三、Footer</strong><br>Footer 部分只用于两种情况。</p><ol><li><p>不兼容变动<br>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE<br>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><pre><code> BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: &#123; myAttr: 'attribute', &#125; After: scope: &#123; myAttr: '@', &#125; The removed inject wasn't generaly useful for directives so there should be no code using it.</code></pre></li><li><p>关闭Issure<br>如果当前 commit 针对某个issue, 那么可以在 Footer 部分关闭这个 issue。</p><pre><code> Closes #234</code></pre></li></ol><hr><h2 id="其他的一些git指令"><a class="header-anchor" href="#其他的一些git指令">¶</a>其他的一些git指令</h2><h3 id="git-add"><a class="header-anchor" href="#git-add">¶</a>git add</h3><p><code>git add</code> 命令可将该文件添加到暂存区。<br>添加一个或多个文件到暂存区：</p><pre><code>git add [file1] [file2] ...</code></pre><p>添加指定目录到暂存区，包括子目录：</p><pre><code>git add [dir]</code></pre><p>添加当前目录下的所有文件到暂存区：</p><pre><code>git add .</code></pre><h3 id="git-clone"><a class="header-anchor" href="#git-clone">¶</a>git clone</h3><p><code>git clone</code> 拷贝一个 git 仓库到本地，让自己能够查看该项目，或者进行修改。<br>拷贝项目命令格式如下：</p><pre><code>git clone [url]</code></pre><p>[url] 是你要拷贝的项目。<br>默认情况下，git 会按照你提供的 URL 所指向的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字，你可以在该命令后加上你想要的名称。</p><h3 id="git-push"><a class="header-anchor" href="#git-push">¶</a>git push</h3><p><code>git push</code> 用于从将本地的分支版本上传到远程并合并。<br>命令格式如下：</p><pre><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;：&lt;远程分支名&gt;</code></pre><p>如果本地分支名与远程分支名相同，则可以省略冒号和远程分支名<br><code>git push origin master</code>将本地的 master 分支推送到 origin 主机的 master 分支。</p><h3 id="git-pull"><a class="header-anchor" href="#git-pull">¶</a>git pull</h3><p><code>git pull</code> 命令用于从远程获取代码并合并本地的版本。</p><pre><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;：&lt;本地分支名&gt;</code></pre><p>更新操作：</p><pre><code>git pullgit pull origin</code></pre><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p><pre><code>git pull origin master：brantest</code></pre><p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><pre><code>git pull origin master</code></pre><p>上面命令表示，取回 origin/master 分支，再与本地的 brantest 分支合并。</p><p>参考：<br><a href="https://www.cnblogs.com/qdhxhz/p/9757390.html">https://www.cnblogs.com/qdhxhz/p/9757390.html</a><br><a href="https://www.jianshu.com/p/1b56cd033eea">https://www.jianshu.com/p/1b56cd033eea</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在写完博客之后，一般都是通过&lt;code&gt;git add .&lt;/code&gt;、&lt;code&gt;git commit -m &amp;quot;message&amp;quot;&lt;/code&gt;、&lt;code&gt;git push&lt;/code&gt;进行提交，至于这些代码的含义及相关概念是什么？本文就带着这些问题</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【第3篇博客】如何在无外网情况下访问自己的github.io博客</title>
    <link href="https://tsuiwade.github.io/2021/02/22/blog3_DnsBlogGithubIo/"/>
    <id>https://tsuiwade.github.io/2021/02/22/blog3_DnsBlogGithubIo/</id>
    <published>2021-02-22T09:21:22.647Z</published>
    <updated>2021-02-22T09:21:22.647Z</updated>
    
    <content type="html"><![CDATA[<p>在没有科学上网的环境下，访问不了github.io个人博客，导致自己欣赏不了自己的博客。<br>于是，记录了配置dns来解决该问题的步骤。</p><p>本文借鉴自https://blog.csdn.net/qq_32627137/article/details/108046461</p><h2 id="问题分析"><a class="header-anchor" href="#问题分析">¶</a>问题分析</h2><p>在网络上访问网站，要首先通过DNS服务器把网络域名<code>www.XXXX.com</code> 解析成XXX.XXX.XXX.XXX的IP地址后，我们的计算机才能访问。要是对于每个域名请求我们都要等待域名服务器解析后返回IP信息，这样访问网络的效率就会降低，而Hosts文件就能提高解析效率。根据Windows系统规定，在进行DNS请求以前，Windows系统会先检查自己的Hosts文件中是否有这个地址映射关系，如果有则调用这个IP地址映射，如果没有再向已知的DNS服务器提出域名解析。也就是说Hosts的请求级别比DNS高。</p><p>github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping <a href="http://github.com">github.com</a> 时，速度只有300多ms。<br>于是解决方案就是绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。</p><h2 id="根据环境情况选择跳转ip"><a class="header-anchor" href="#根据环境情况选择跳转ip">¶</a>根据环境情况选择跳转ip</h2><p>由该网站进行查询https://tools.ipip.net/dns.php<br>如下图查看访问github.com域名时，延迟最低的ip，复制该ip</p><h4 id="该步骤的作用是选择可以访问到github-io的ip"><a class="header-anchor" href="#该步骤的作用是选择可以访问到github-io的ip">¶</a>该步骤的作用是选择可以访问到github.io的ip</h4><p><img src="/2021/02/22/blog3_DnsBlogGithubIo/1.png" alt="picture1"><br>然后管理员权限打开记事本<br><img src="/2021/02/22/blog3_DnsBlogGithubIo/2.png" alt="picture1"><br>在记事本中打开C:\Windows\System32\drivers\etc路径下的hosts文件<br>该文件是域名解析文件。可以直接用记事本打开。将IP地址重定向。<br>格式为：ip地址-空格-域名<br>可以将一个域名重新定向到一个IP<br>通过它可以达到以下目的：1、加快域名解析；2、方便局域网用户；3、屏蔽网站</p><p><img src="/2021/02/22/blog3_DnsBlogGithubIo/3.png" alt="picture1"><br>在记事本的最后补上<br>219.141.136.10 <a href="http://github.com">github.com</a> <br>这时候可以打开cmd，输入ping <a href="http://github.com">github.com</a>，可以看出ping通该网址了。<br><img src="/2021/02/22/blog3_DnsBlogGithubIo/4.png" alt="picture1"><br>上一段是来自选中的跳转ip，下一段是来自己自己家原来的ip，可以看出用了跳转ip，速度会更快。</p><p>接下来同理，设置自己博客的tsuiwade.github.io的ip,接着补在记事本的最后。<br><img src="/2021/02/22/blog3_DnsBlogGithubIo/5.png" alt="picture1"><br>最后就可以访问了。</p>]]></content>
    
    
    <summary type="html">无</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【第2篇博客】butterfly样式修改学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/09/blog2-BlogTheme/"/>
    <id>https://tsuiwade.github.io/2021/02/09/blog2-BlogTheme/</id>
    <published>2021-02-09T10:31:23.000Z</published>
    <updated>2021-03-29T10:31:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客首页图"><a class="header-anchor" href="#博客首页图">¶</a>博客首页图</h2><p>default_top_img: /img/me.png # 进入博客首页显示的图<br>图片资源放进\themes\butterfly\source\img</p><h2 id="导航菜单"><a class="header-anchor" href="#导航菜单">¶</a>导航菜单</h2><p>在_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">menu:<br>  首页: &#x2F; || fas fa-home<br>  时间轴: &#x2F;archives&#x2F; || fas fa-archive<br>  标签: &#x2F;tags&#x2F; || fas fa-tags<br>  分类: &#x2F;categories&#x2F; || fas fa-folder-open<br>  友链: &#x2F;link&#x2F; || fas fa-link<br>  关于: &#x2F;about&#x2F; || fas fa-hear<br></code></pre></td></tr></table></figure><p>必须是 /xxx/，后面||分开，然后写图标名。导航的文字可以自行修改。</p><h2 id="社交图标"><a class="header-anchor" href="#社交图标">¶</a>社交图标</h2><p>butterfly支持<code>font-awesome v5</code>图标。<br>书写格式 <code>图标名: url || 描述性文字</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">social:<br>  fab fa-github: https:&#x2F;&#x2F;github.com&#x2F;tsuiwade || Github<br>  fas fa-envelope: mailto:478451541@gmail.com || Email<br>  iconfont  icon-bilibili: https:&#x2F;&#x2F;space.bilibili.com&#x2F;381957255 || bilibili<br>  iconfont  icon-zhifubao: https:&#x2F;&#x2F;www.bilibili.com || alipay<br>  iconfont  icon-wechat: https:&#x2F;&#x2F;www.bilibili.com || wechat<br>  iconfont  icon-qq: tencent:&#x2F;&#x2F;AddContact&#x2F;?fromId&#x3D;45&amp;fromSubId&#x3D;1&amp;subcmd&#x3D;all&amp;uin&#x3D;478451541 || qq<br>  iconfont  icon-csdn: https:&#x2F;&#x2F;www.bilibili.com || CSDN<br>  iconfont  icon-shejiao-yinle: https:&#x2F;&#x2F;www.bilibili.com || music<br>  iconfont  icon-shejiaotubiao-55: https:&#x2F;&#x2F;www.bilibili.com || facebook<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u012208219/article/details/106883012">https://blog.csdn.net/u012208219/article/details/106883012</a><br>该教程描述了如何引入外部样式。</p><p>添加qq超链接 tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=478451541<br>qq在线联系超链接http://wpa.qq.com/msgrd?v=3&amp;uin=2445408174&amp;site=qq&amp;menu=yes</p><h2 id="主页文章节选"><a class="header-anchor" href="#主页文章节选">¶</a>主页文章节选</h2><p>主页文章的节选有自动节选和文章页description两种，<br>在主题配置文件中定位到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain"># Display the article introduction on homepage<br># 1: description<br># 2: both (if the description exists, it will show description, or show the auto_excerpt)<br># 3: auto_excerpt (default)<br># false: do not show the article introduction<br>index_post_content:<br>  method: 2<br>  length: 500 # if you set method to 2 or 3, the length need to config<br></code></pre></td></tr></table></figure><p>在这我们选择2，优先选择description，如果没有配置description，则自动节选内容。</p><h2 id="顶部图"><a class="header-anchor" href="#顶部图">¶</a>顶部图</h2><p><code>disable_top_img: true</code> ：不展示顶部图<br><code>index_img</code>：主页的顶部图<br><code>default_top_img</code>：默认的顶部图，当没有配置页面的顶部图的时候，将展示这个<br><code>archive_img</code>：归档页的顶部图<br><code>tag_img</code>：tag子页面的顶部图</p><p>还可尝试</p><pre><code>top_img: orangetop_img: 'linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)'</code></pre><h2 id="文章打赏"><a class="header-anchor" href="#文章打赏">¶</a>文章打赏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">reward:<br>  enable: true<br>  QR_code:<br>    - img: &#x2F;img&#x2F;wechat.jpg<br>      #   link:<br>      text: 微信打赏<br>    - img: &#x2F;img&#x2F;alipay.jpg<br>      #   link:<br>      text: 支付宝打赏<br></code></pre></td></tr></table></figure><h2 id="button"><a class="header-anchor" href="#button">¶</a>button</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,block %&#125;<br>&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,block center larger %&#125;<br>&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;<br></code></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated block center larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><a class="btn-beautify button--animated block right outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a><h2 id="tabs"><a class="header-anchor" href="#tabs">¶</a>tabs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;% tabs test1 %&#125;<br>&lt;!-- tab --&gt;<br>**This is Tab 1.**<br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br>**This is Tab 2.**<br>&lt;!-- endtab --&gt;<br><br>&lt;!-- tab --&gt;<br>**This is Tab 3.**<br>&lt;!-- endtab --&gt;<br>&#123;% endtabs %&#125;<br></code></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="tag-hide"><a class="header-anchor" href="#tag-hide">¶</a>tag-hide</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">哪個英文字母最酷？ &#123;% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %&#125;<br><br>門裏站着一個人? &#123;% hideInline 閃 %&#125;<br></code></pre></td></tr></table></figure><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button button--animated" style>Click  </button><span class="hide-content">閃</span></span></p><h2 id="评论"><a class="header-anchor" href="#评论">¶</a>评论</h2><p>在主题配置文件中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">comments:<br>  # Up to two comments system, the first will be shown as default<br>  # Choose: Disqus&#x2F;Disqusjs&#x2F;Livere&#x2F;Gitalk&#x2F;Valine&#x2F;Waline&#x2F;Utterances&#x2F;Facebook Comments&#x2F;Twikoo<br>  use:<br>    - Valine<br>  text: true # Display the comment name next to the button<br>  # lazyload: The comment system will be load when comment element enters the browser&#39;s viewport.<br>  # If you set it to true, the comment count will be invalid<br>  lazyload: true<br>  count: true # Display comment count in top_img<br>  card_post_count: false # Display comment count in Home Page<br></code></pre></td></tr></table></figure><p>其中，还需要配置Valine，需要用到leancloud。</p><p>它是领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务,为移动开发提供强有力的后端支持。<br>valine: 参考 <a href="https://xuqwblog.blog.csdn.net/article/details/107248047">https://xuqwblog.blog.csdn.net/article/details/107248047</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">appId:  # leancloud application app id<br>appKey:  # leancloud application app key<br>pageSize: 10 # comment list page size<br>avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar<br>lang: en # i18n: zh-CN&#x2F;zh-TW&#x2F;en&#x2F;ja<br>placeholder: 記得留下你的暱稱和郵箱....可以快速收到回復 # valine comment input placeholder(like: Please leave your footprints )<br>guest_info: nick,mail,link #valine comment header info (nick&#x2F;mail&#x2F;link)<br>recordIP: false # Record reviewer IP<br>serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)<br>bg: &#x2F;img&#x2F;comment_bg.png # valine background<br>emojiCDN: # emoji CDN<br>enableQQ: false # enable the Nickname box to automatically get QQ Nickname and QQ Avatar<br>requiredFields: nick,mail # required fields (nick&#x2F;mail)<br>option:<br></code></pre></td></tr></table></figure><p>由于我们是静态博客，页面和存储是分离开的，动态博客才可以直接删除评论，因此需要用到LeanCloud，按下图进行删评。<br><img src="/2021/02/09/blog2-BlogTheme/1.jpg" alt="1jpg"></p><h2 id="打字效果"><a class="header-anchor" href="#打字效果">¶</a>打字效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">activate_power_mode:<br>  enable: true<br>  colorful: true # open particle animation (冒光特效)<br>  shake: true #  open shake (抖动特效)<br>  mobile: false<br></code></pre></td></tr></table></figure><h2 id="背景特效"><a class="header-anchor" href="#背景特效">¶</a>背景特效</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">canvas_nest:<br>  enable: true<br>  color: &#39;0,0,255&#39; #color of lines, default: &#39;0,0,0&#39;; RGB values: (R,G,B).(note: use &#39;,&#39; to separate.)<br>  opacity: 0.7 # the opacity of line (0~1), default: 0.5.<br>  zIndex: -1 # z-index property of the background, default: -1.<br>  count: 99 # the number of lines, default: 99.<br>  mobile: false # false 手機端不顯示 true 手機端顯示<br></code></pre></td></tr></table></figure><h2 id="鼠标点击效果"><a class="header-anchor" href="#鼠标点击效果">¶</a>鼠标点击效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)<br>click_heart:<br>  enable: true<br>  mobile: false<br></code></pre></td></tr></table></figure><h2 id="网站副标题"><a class="header-anchor" href="#网站副标题">¶</a>网站副标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plain"># the subtitle on homepage (主頁subtitle)<br>subtitle:<br>  enable: true<br>  # Typewriter Effect (打字效果)<br>  effect: true<br>  # loop (循環打字)<br>  loop: true<br>  # source調用第三方服務<br>  # source: false 關閉調用<br>  # source: 1  調用搏天api的隨機語錄（簡體）<br>  # source: 2  調用一言網的一句話（簡體）<br>  # source: 3  調用一句網（簡體）<br>  # source: 4  調用今日詩詞（簡體）<br>  # subtitle 會先顯示 source , 再顯示 sub 的內容<br>  source: false<br>  # 如果有英文逗號&#39; , &#39;,請使用轉義字元 &amp;#44;<br>  # 如果有英文雙引號&#39; &quot; &#39;,請使用轉義字元 &quot;<br>  # 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住<br>  # 如果關閉打字效果，subtitle只會顯示sub的第一行文字<br>  sub:<br>    - 不要以自己的放纵来对抗平庸<br>    - Never put off till tomorrow what you can do today<br>    - 你要悄悄的努力，然后惊艳所有人<br></code></pre></td></tr></table></figure><h2 id="字数统计"><a class="header-anchor" href="#字数统计">¶</a>字数统计</h2><p>先<code>yarn add hexo-wordcount</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain"># wordcount (字數統計)<br>wordcount:<br>  enable: true<br>  post_wordcount: true<br>  min2read: true<br>  total_wordcount: true<br></code></pre></td></tr></table></figure><h2 id="自定义代码配色"><a class="header-anchor" href="#自定义代码配色">¶</a>自定义代码配色</h2><p>修改Hexo根目錄下的_config.yml<br>配置hljs為true</p><p>修改主题配置文件<br>配置highlight_theme為false</p><p>具体参考 <a href="https://butterfly.js.org/posts/b37b5fe3/">https://butterfly.js.org/posts/b37b5fe3/</a></p>]]></content>
    
    
    <summary type="html">butterfly主题样式修改学习记录</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【第5篇博客】hexo下的markdown的语法(GFM)学习记录</title>
    <link href="https://tsuiwade.github.io/2021/02/06/blog5-MarkdownLearning/"/>
    <id>https://tsuiwade.github.io/2021/02/06/blog5-MarkdownLearning/</id>
    <published>2021-02-06T11:31:14.000Z</published>
    <updated>2021-02-22T09:21:22.651Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo下使用的MarkDown为Github的GFM，GFM（Github Flavored Markdown）是 Github 拓展的基于 Markdown 的一种纯文本的书写格式。风格很漂亮，简洁美观大方。但是GFM的MarkDown语法和标准的MarkDown稍有不同，使用过程中需要注意一些。</p><h1>1、标题</h1><p>Markdown 中，使用 # 或 = 来定义大纲标题，有多少个#或=，就表示是几级的大纲，相当于&lt;h几&gt;。</p><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center"># 一级标题</td><td style="text-align:center"><h1>一级标题</h1></td></tr><tr><td style="text-align:center">## 二级标题</td><td style="text-align:center"><h2>二级标题</h2></td></tr><tr><td style="text-align:center">### 三级标题</td><td style="text-align:center"><h3>三级标题</h3></td></tr><tr><td style="text-align:center">#### 四级标题</td><td style="text-align:center"><h4>四级标题</h4></td></tr><tr><td style="text-align:center">正常文字</td><td style="text-align:center">正常文字</td></tr><tr><td style="text-align:center">##### 五级标题</td><td style="text-align:center"><h5>五级标题</h5></td></tr><tr><td style="text-align:center">###### 六级标题</td><td style="text-align:center"><h6>六级标题</h6></td></tr></tbody></table><h1>2、基本字体样式</h1><p>Markdown 使用一个星号表示斜体，两个星号表示加粗，三个星号表示加粗斜体。</p><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">*斜体*</td><td style="text-align:center"><em>斜体</em></td></tr><tr><td style="text-align:center">**粗体** 或 __粗体__</td><td style="text-align:center"><strong>粗体</strong></td></tr><tr><td style="text-align:center">***加粗斜体***</td><td style="text-align:center"><em><strong>加粗斜体</strong></em></td></tr><tr><td style="text-align:center">~~删除线~~</td><td style="text-align:center"><s>删除线</s></td></tr></tbody></table><h1>3、列表</h1><p>使用星号或者中横线来表示无序列表，注意后面需要加个空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">* 无序列表1<br>* 无序列表2<br>- 无序列表3<br>- 无序列表4<br>1. 有序列表1<br>2. 有序列表2<br></code></pre></td></tr></table></figure><ul><li>无序列表1</li><li>无序列表2</li></ul><ul><li>无序列表3</li><li>无序列表4</li></ul><ol><li>有序列表1</li><li>有序列表2</li></ol><h1>4、引用</h1><p>引用部分的内容只需要在行首加上 &gt; 就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; 沃兹基硕德说过：不要以自己的放纵来对抗平庸<br><br>&gt; 动物<br>&gt;&gt; 水生动物<br>&gt;&gt; 陆生动物<br>&gt;&gt;&gt; 猴子<br>&gt;&gt;&gt; 人<br>&gt;&gt;&gt;&gt; 程序猿<br>&gt;&gt;&gt;&gt; 攻城狮<br>&gt;&gt;产品狗 &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   &#x2F;&#x2F;这里需要注意，没有空行间隔，忽略降级引用标记<br></code></pre></td></tr></table></figure><blockquote><p>沃兹基硕德说过：不要以自己的放纵来对抗平庸</p></blockquote><blockquote><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</p></blockquote></blockquote></blockquote></blockquote><h1>5、超链接</h1><p>Markdown 使用<code>[]()</code>来表示超链接，中括号表示链接文字，小括号表示链接地址。</p><pre><code>[tsuiwade's blog](tsuiwade.github.io)</code></pre><p><a href="tsuiwade.github.io">tsuiwade’s blog</a></p><h1>6、图片</h1><p>图片的样式与超链接非常相似，只需在前面加个感叹号就可以了，即用<code>![]()</code>表示图片。其中中括号表示图片未加载时的提示文字，小括号表示图片地址。<br>例如使用hexo n blog7_MarkdownLearning时创建了<code>blog7-MarkdownLearning.md</code>和<code>blog7-MarkdownLearning</code>文件夹，此时在文件夹中放入图片。再由小括号中填写文件名就可以在博客中贴图。<br>还可以使用HTML的<code>&lt;img&gt;</code>标签，还有许多例如高度、对齐、宽度标签。具体可见 <a href="https://www.w3school.com.cn/tags/tag_img.asp%E3%80%82">https://www.w3school.com.cn/tags/tag_img.asp。</a><br>下面展示四张图，分别是原始图1、gif图2、网页链接图3、改大小图4。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">![1png](1.png)<br>![2gif](2.gif)<br>![baidu](https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png)<br>&lt;img src&#x3D;1.png width&#x3D;&quot;100&quot;&#x2F;&gt;&lt;br&#x2F;&gt;<br></code></pre></td></tr></table></figure><p><img src="/2021/02/06/blog5-MarkdownLearning/1.png" alt="1png"></p><div align="center">图1</div><p><img src="/2021/02/06/blog5-MarkdownLearning/2.gif" alt="2gif"></p><div align="center">图2</div><p><img src="https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png" alt="baidu"></p><div align="center">图3</div><p><img src="/2021/02/06/blog5-MarkdownLearning/1.png" width="100"><br></p><div align="center">图4</div><h1>7、代码块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#96;单行文字&#96;<br>&#96;&#96;&#96;<br>多行文字1<br>多行文字2<br>多行文字3<br>&#96;&#96;&#96;<br></code></pre></td></tr></table></figure><p><code>单行文字</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">多行文字1<br>多行文字2<br>多行文字3<br></code></pre></td></tr></table></figure><p>还可以采用下面的代码块：在连续几行的文本开头加入1个Tab或者4个空格，代码块没有前面的序号。（代码块前需要换行）</p><pre><code>多行文字1多行文字2多行文字3</code></pre><p>也适合做一篇文章的tag。</p><pre><code>`linux` `网络编程` `socket` `epoll`</code></pre><p><code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p><h1>8、水平分割线</h1><p>使用—进行水平分割<br>水平分割线上方</p><hr><p>水平分割线下方</p><h1>9、表格</h1><p>表格 - 和 | 分割行和列 ， : 控制对其方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">居左   | 居右 | 居中<br>:- | -: | :-:<br>第1行 | 12  | 13  <br>第2行 | 22  | 23  <br>第3行 | 32  | 33  <br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">居左</th><th style="text-align:right">居右</th><th style="text-align:center">居中</th></tr></thead><tbody><tr><td style="text-align:left">第1行</td><td style="text-align:right">12</td><td style="text-align:center">13</td></tr><tr><td style="text-align:left">第2行</td><td style="text-align:right">22</td><td style="text-align:center">23</td></tr><tr><td style="text-align:left">第3行</td><td style="text-align:right">32</td><td style="text-align:center">33</td></tr></tbody></table><p>表格中的样式可以利用html语言进行修改，还需要配合转义字符<code>\</code><br>如第1部分标题的代码如下</p><pre><code>语法   | 效果 :-: | :-: \# 一级标题 | &lt;h1&gt;一级标题&lt;/h1&gt;\#\# 二级标题 | &lt;h2&gt;二级标题&lt;/h2&gt;\#\#\# 三级标题 | &lt;h3&gt;三级标题&lt;/h3&gt;\#\#\#\# 四级标题 | &lt;h4&gt;四级标题&lt;/h4&gt;正常文字 | 正常文字\#\#\#\#\# 五级标题 | &lt;h5&gt;五级标题&lt;/h5&gt;\#\#\#\#\#\# 六级标题 | &lt;h6&gt;六级标题&lt;/h6&gt;</code></pre><h1>10、提示块标签</h1><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>可使用语法 no-icon去掉小图标</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><h1>11、diff语法</h1><p>版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。<br>GFM中可以显示的展示diff效果。使用蓝色表示新增，红色表示删除。<br>其语法与代码高亮类似，只是在三个反引号后面写diff，<br>并且其内容中，以 +开头表示新增，-开头表示删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#96;&#96;&#96;diff<br>+ 鸟宿池边树，僧敲月下门<br>- 鸟宿池边树，僧推月下门<br>&#96;&#96;&#96;<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ 鸟宿池边树，僧敲月下门</span><br><span class="hljs-deletion">- 鸟宿池边树，僧推月下门</span><br></code></pre></td></tr></table></figure><h1>12、锚点</h1><p>其中，字母要统统小写，空格统统要替换成 ‘-’</p><pre><code>[回到1、标题](#1、标题)[回到2、基本字体样式](#2、基本字体样式)</code></pre><p><a href="#1%E3%80%81%E6%A0%87%E9%A2%98">回到1、标题</a><br><a href="#2%E3%80%81%E5%9F%BA%E6%9C%AC%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F">回到2、基本字体样式</a></p><h1>13、表情</h1><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。<br>比如<code>:blush:</code>，可以显示😊。<code>:smile:</code>，可以显示😄。<code>:grinning:</code>，可以显示😀。<code>:elephant:</code>，可以显示🐘。<code>:v:</code>，可以显示✌️。<code>:balloon:</code>，可以显示🎈。<code>:triangular_flag_on_post:</code>，可以显示🚩。<code>:fast_forward:</code>，可以显示⏩。<code>:100:</code>，可以显示💯。<br>通过以下代码进行命令行安装配置，还需要配置hexo站点配置文件_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm un hexo-renderer-marked --save<br>npm i hexo-renderer-markdown-it --save<br>npm install markdown-it-emoji --save<br></code></pre></td></tr></table></figure><p>其他有关表情的符号码和问题可查 <a href="https://hasaik.com/posts/9b280ea3.html">https://hasaik.com/posts/9b280ea3.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo下使用的MarkDown为Github的GFM，GFM（Github Flavored Markdown）是 Github 拓展的基于 Markdown 的一种纯文本的书写格式。风格很漂亮，简洁美观大方。但是GFM的MarkDown语法和标准的MarkDown稍有不</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【第4篇博客】hexo的常见指令及简写汇总</title>
    <link href="https://tsuiwade.github.io/2021/02/06/blog4_hexo_commands/"/>
    <id>https://tsuiwade.github.io/2021/02/06/blog4_hexo_commands/</id>
    <published>2021-02-06T10:21:44.000Z</published>
    <updated>2021-02-22T09:21:22.647Z</updated>
    
    <content type="html"><![CDATA[<p>本文借鉴自https://hexo.io/zh-cn/docs/commands.html</p><p>为了方便查阅,这里汇总一些常用的hexo指令。</p><h2 id="简写指令："><a class="header-anchor" href="#简写指令：">¶</a>简写指令：</h2><h3 id="init"><a class="header-anchor" href="#init">¶</a>init</h3><p><code>hexo init [folder]</code><br>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。<br>该命令是一个缩写，完成如下步骤：<br>1、Git clone hexo-starter including hexo-theme-landscape into the current directory or a target folder if specified.<br>2、Install dependencies using a package manager: Yarn 1, pnpm or npm, whichever is installed; if there are more than one installed, the priority is as listed. npm is bundled with Node.js by default.</p><h3 id="new"><a class="header-anchor" href="#new">¶</a>new</h3><p><code>hexo new [layout] &lt;title&gt;</code><br>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br><code>hexo n &quot;我的第一篇文章&quot;</code> 等价于 <code>hexo new &quot;我的第一篇文章&quot;</code> 还等价于 <code>hexo new post &quot;我的第一篇文章&quot;</code></p><h3 id="generate"><a class="header-anchor" href="#generate">¶</a>generate</h3><p><code>hexo generate</code><br>生成静态文件。(执行 $ hexo g后会在站点根目录下生成public文件夹, hexo会将&quot;/blog/source/&quot; 下面的.md后缀的文件编译为.html后缀的文件,存放在&quot;/blog/public/ &quot; 路径下)<br>该命令可以简写为<br><code>hexo g</code></p><h3 id="publish"><a class="header-anchor" href="#publish">¶</a>publish</h3><p><code>hexo publish [layout] &lt;filename&gt;</code><br>发表草稿。<br>该命令可以简写为：<br><code>hexo p</code></p><h3 id="server"><a class="header-anchor" href="#server">¶</a>server</h3><p><code>hexo server</code><br>启动服务器。Hexo 会监视文件变动并自动更新，除修改站点配置文件外，无须重启服务器，直接刷新网页即可生效。<br>默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a><br>该命令可以简写为：<br><code>hexo s</code></p><h3 id="deploy"><a class="header-anchor" href="#deploy">¶</a>deploy</h3><p><code>hexo deploy</code><br>部署网站。<br>该命令可以简写为：<br><code>hexo d</code></p><h3 id="clean"><a class="header-anchor" href="#clean">¶</a>clean</h3><p><code>hexo clean</code><br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文借鉴自https://hexo.io/zh-cn/docs/commands.html&lt;/p&gt;
&lt;p&gt;为了方便查阅,这里汇总一些常用的hexo指令。&lt;/p&gt;
&lt;h2 id=&quot;简写指令：&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#简写指令：&quot;&gt;¶&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【第1篇博客】hexo搭建github.io博客学习记录</title>
    <link href="https://tsuiwade.github.io/2020/07/05/blog1-MyBlog/"/>
    <id>https://tsuiwade.github.io/2020/07/05/blog1-MyBlog/</id>
    <published>2020-07-05T10:30:44.000Z</published>
    <updated>2021-02-22T09:21:22.639Z</updated>
    
    <content type="html"><![CDATA[<p>github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><p>本文将记录如下步骤：</p><ol><li>环境准备</li><li>hexo博客搭建</li><li>github静态网站部署</li><li>通过github的Action自动部署项目</li></ol><hr><h1>环境准备</h1><h2 id="github账号申请及repository仓库新建"><a class="header-anchor" href="#github账号申请及repository仓库新建">¶</a>github账号申请及repository仓库新建</h2><p>首先需要进入官网 <a href="https://github.com">https://github.com</a> 申请一个github账号。</p><p>然后在右上角New一个repository，注意Repository name 必须为自己的<code>用户名.github.io</code>，例如 <a href="http://tsuiwade.github.io">tsuiwade.github.io</a>。（因为这样最后生成的博客网址才会足够的短，直接为<code>username.github.io</code>，否则生成的网址还有前面的用户名，网址过长而不美观。）<br><img src="/2020/07/05/blog1-MyBlog/1.jpg" alt="1jpg"><br>其他默认，最后<code>creat repository</code></p><h1>hexo博客搭建</h1><h2 id="搭建静态博客的框架-hexo"><a class="header-anchor" href="#搭建静态博客的框架-hexo">¶</a>搭建静态博客的框架-hexo</h2><p>hexo是一个快速、简洁且高效的博客框架，具有超快速度、支持markdown、一键部署、插件和可扩展性的特性。官网为 <a href="https://hexo.io/">https://hexo.io/</a> 。</p><p>hexo框架的主题样式比较丰富，可用插件也较多，虽然功能不够强大，但仍然能满足现阶段我们写博客的需求，比较适合新手。</p><p>在搭建博客之前，最好有HTML/JS/CSS、Node/Npm、git/github的技能，不过没有也没关系，跟着我的这篇博客走，能完成自己博客的搭建，我的其他文章可以帮助你补全知识框架。</p><h2 id="开始搭建hexo博客"><a class="header-anchor" href="#开始搭建hexo博客">¶</a>开始搭建hexo博客</h2><p>初始化hexo将使用以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">npm install hexo-cli -g # 全局安装hexo提供的脚手架工具hexo-cli<br>hexo init blog # 使用脚手架工具提供的hexo init来初始化一个hexo项目，后面填写项目名称<br>cd blog # 项目初始化之后，进入项目文件夹，并且用vscode打开该文件夹<br>npm install<br>hexo server # 可简写为hexo s来运行项目，便可以在本地服务4000端口来访问<br></code></pre></td></tr></table></figure><p>在浏览器中访问 <a href="http://localhost:4000">http://localhost:4000</a> ，便可看到博客页面如下图所示，当前博客使用了hexo所提供的一个默认主题<code>landscape</code>，后续可以更换一个更好看的主题。<br><img src="/2020/07/05/blog1-MyBlog/2.jpg" alt="2jpg"></p><p>我们回到项目文件夹中，主要文件的含义如下图所示。<br><img src="/2020/07/05/blog1-MyBlog/3.png" alt="3png"></p><p>其中，根目录下的<code>_config.yml</code>文件是我们经常会修改的，可修改博客的一些默认配置。yml是一种用来表达数据序列化的格式，类似于json。</p><p>打开该文件，修改如下博客配置属性。</p><table><thead><tr><th style="text-align:left">修改前</th><th style="text-align:left">修改后</th></tr></thead><tbody><tr><td style="text-align:left">title: Hexo<br>description: ‘’<br>author: John Doe<br>language: en<br>url: <a href="http://example.com">http://example.com</a> <br></td><td style="text-align:left">title: TsuiWade’s blog<br>description: “记录技术生活的点点滴滴”<br>author: tsuiwade<br>language: zh-CN<br>url:<a href="https://tsuiwade.github.io/">https://tsuiwade.github.io/</a></td></tr></tbody></table><p>修改后可以看到浏览器上的博客页面也做了相应的变化。</p><p>此时，一个基本的博客已经搭建完成。</p><h2 id="修改主题样式"><a class="header-anchor" href="#修改主题样式">¶</a>修改主题样式</h2><p>hexo官网 <a href="https://hexo.io/">https://hexo.io/</a> 里提供了300多种主题样式，可以在跟随我使用同样的主题，学会设置主题样式后可自行选择任意一款你喜欢的样式来使用。<br><img src="/2020/07/05/blog1-MyBlog/5.png" alt="5png"></p><p>这里我们选择<code>Butterfly</code>样式，同我的博客样式一样。</p><p>官网 <a href="https://butterfly.js.org/">https://butterfly.js.org/</a> 。 官网也做成了该主题的博客样式，使用的butterfly样式，其中有许多hexo博客优化教程，后续我也会学习整理。</p><p>还有github项目地址 <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> 。其中有配置主题的教程，我们先打开来走一遍该流程。</p><p>1、回到vscode，将该主题克隆到themes目录下。</p><p>输入</p><pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre><p>可以看到在themes文件夹下多了一个butterfly文件夹，即为主题样式文件。</p><p>2、在根目录的<code>_config.yml</code>中修改主题属性：</p><table><thead><tr><th style="text-align:left">修改前</th><th style="text-align:left">修改后</th></tr></thead><tbody><tr><td style="text-align:left">theme: landscape</td><td style="text-align:left">theme: butterfly</td></tr></tbody></table><p>3、在文件夹中显示butterfly，删除<code>.git</code>文件夹，删除该主题的默认的git配置文件，是为了把该主题和我们的博客项目合并为一个项目，统一由一个git来管理。</p><p>4、更换主题后，如果输入hexo s，则会看到Hexo启动服务器页面显示报错extends includes/layout.pug block content include includes/recent-posts.pug include</p><p>此时我们在cmd中输入</p><pre><code>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</code></pre><p>此时<code>hexo s</code>即可看到主题样式应用成功。</p><p>倘若还不能解决，则进行清除缓存<br><code>hexo clean</code><br>生成静态文件，查看效果<br><code>hexo g</code><br><code>hexo s</code><br>可看到主题样式配置生效。</p><p><img src="/2020/07/05/blog1-MyBlog/3.jpg" alt="3jpg"></p><h1>github静态网站部署</h1><p>此时，我们的博客只能在本地访问。接下来我们需要把博客部署到github上的一个仓库上，然后使用github pages功能，获取到一个站点来访问我们的博客。</p><p>由前面的github账号创建的仓库。打开该github页面，正如页面提示的一样。<br><img src="/2020/07/05/blog1-MyBlog/4.jpg" alt="4jpg"></p><p>首先进行·git初始化：</p><pre><code>git init</code></pre><p>然后给当前仓库添加一个远程的git地址：</p><pre><code>git remote add origin https://github.com/miemietou/miemietou.github.io.git</code></pre><p>在使用hexo部署博客之前，我们需要先安装一个叫<code>hexo-deployer-git</code>的依赖，这个库会帮助我们将生成好的代码部署到一个具体的分支。</p><pre><code>yarn add hexo-deployer-git</code></pre><p>安装完之后，我们打开<code>_config.yml</code>文件，拉到最下面，修改deploy属性。部署类型为git，仓库地址填项目地址，分支填写master，注意我们的打包产物需要提交到master分支。<br>将</p><pre><code>deploy:  type: ''</code></pre><p>修改为</p><pre><code>deploy:  type: git  repo: https://github.com/miemietou/miemietou.github.io  branch: master</code></pre><p>接着输入</p><pre><code>hexo deploy</code></pre><p>来部署我们的代码，代码提交完成之后，我们打开github项目的首页，就能看到我们打包上传的产物已经提交到了master分支上。master分支里面的代码其实就是生成的public目录下的文件。然后点击仓库页面的setting，找到github pages一栏，顺利的话将显示我们的站点已成功部署，可以打开该网址检查是否被部署成功。</p><p>此时我们已经完成一个博客的基本部署功能。接下来将做一个非常有趣的自动化部署功能。</p><p>在自动化部署之前，我们需要把我们的源代码提交到github上，因为master分支已经被占用，所以我们只能把源代码提交到另一个分支上，首先我们需要commit一下本地代码。</p><pre><code>git add .git commit -m &quot;none&quot;</code></pre><p>然后我们重建一个分支myblog，然后将该分支push到github上。</p><pre><code>git push --set-upstream origin myblog</code></pre><p>接着，myblog分支已经被push到了github上。</p><h1>github actions实现自动化部署</h1><p>不需要自己在本地进行代码的构建打包，使仓库的action功能，点击该按钮，可以看到github actions提供的功能：帮助构建、测试、部署你的代码，还能使用github actions来做code review、分支管理和issue的追踪。我们这里将会使用它来实现项目的自动打包和代码的部署。</p><p>首先，我们需要在项目根目录下创建.github文件夹和.github目录下的workflows文件夹，然后在里面新建deploy.yml文件，复制粘贴如下代码，该代码的作用就是配置代码部署过程中的一些步骤，例如第一步需要checkout，然后需要安装和打包构建，最后触发一个代码的部署。</p><pre><code>name: Build and Deployon: [push]jobs:build-and-deploy:    runs-on: ubuntu-latest    steps:    - name: Checkout 🛎️        uses: actions/checkout@v2 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.        with:        persist-credentials: false    - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.        run: |        npm install        npm run build        env:        CI: false    - name: Deploy 🚀        uses: JamesIves/github-pages-deploy-action@releases/v3        with:        GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;        BRANCH: master # The branch the action should deploy to.        FOLDER: public # The folder the action should deploy.</code></pre><p>接下来，就输入提交代码老三行：<br>git add .<br>git commit -m “message”<br>git push</p><p>提交之后，我们回到仓库首页，点击actions标签，可以看到所有的工作流，如果显示绿色打钩则代码部署成功，站点内容就会成功更新。</p><p>参考： <a href="https://www.bilibili.com/video/BV1dt4y1Q7UE?t=354">https://www.bilibili.com/video/BV1dt4y1Q7UE?t=354</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;github Pages可以被认为是用户编写的、托管在github上的静态网页。&lt;/p&gt;
&lt;p&gt;本文将记录如下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;li&gt;hexo博客搭建&lt;/li&gt;
&lt;li&gt;github静态网站部署&lt;/li&gt;
&lt;li&gt;通过github的Ac</summary>
      
    
    
    
    
  </entry>
  
</feed>
