<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TsuiWade&#39;s blog</title>
  
  
  <link href="https://tsuiwade.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsuiwade.github.io/"/>
  <updated>2023-04-24T20:08:32.000Z</updated>
  <id>https://tsuiwade.github.io/</id>
  
  <author>
    <name>tsuiwade</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>冲毕业结束</title>
    <link href="https://tsuiwade.github.io/2023/04/24/blog71-studyover/"/>
    <id>https://tsuiwade.github.io/2023/04/24/blog71-studyover/</id>
    <published>2023-04-24T20:08:32.000Z</published>
    <updated>2023-04-24T20:08:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>还有部署的bug 同步gitee的bug </p><p>在根目录_config.yml</p><p># Deployment</p><p>## Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p><p>deploy:</p><p> type: git</p><p> # repo: <a href="https://github.com/tsuiwade/tsuiwade.github.io">https://github.com/tsuiwade/tsuiwade.github.io</a></p><p> repo:</p><p>  # gitee: <a href="https://gitee.com/tsuiwade/tsuiwade">https://gitee.com/tsuiwade/tsuiwade</a></p><p>  # github: <a href="https://github.com/tsuiwade/tsuiwade.github.io">https://github.com/tsuiwade/tsuiwade.github.io</a></p><p>  gitee: <a href="https://tsuiwade:私人令牌@gitee.com/tsuiwade/tsuiwade.git">https://tsuiwade:私人令牌@gitee.com/tsuiwade/tsuiwade.git</a></p><p>  github: <a href="https://tsuiwade:私人令牌@github.com/tsuiwade/tsuiwade.github.io.git">https://tsuiwade:私人令牌@github.com/tsuiwade/tsuiwade.github.io.git</a></p><p> branch: master</p><p>设置aactions -》settings -》 Actions secrets and variables  -》 GITEE_RSA_PRIVATE_KEY  -》为私钥.ssh  id_rsa</p><p>搞了很久！</p><hr><p>还是非常感谢 <a href="https://www.zhihu.com/question/373117145">https://www.zhihu.com/question/373117145</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106213047672.png" alt="image-20230106213047672"></p><hr><p>接下来需要考虑二维的问题了。</p><p>突然发现一个这个算法</p><p><a href="https://stackoverflow.com/questions/18227014/selecting-evenly-distributed-points-algorithm">https://stackoverflow.com/questions/18227014/selecting-evenly-distributed-points-algorithm</a></p><p>算法是遍历前面的最小cost</p><p>double tempcost = solutions[j].cost + std::abs(dis[i] - dis[j] - 0.1);</p><p>0.1为1/10 但问题是凑不到10个点</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230110193501924.png" alt="image-20230110193501924"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230110193718928.png" alt="image-20230110193718928"></p><p>在下面的回答中看到了</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230110202736178.png" alt="image-20230110202736178"></p><p>提到了ANMS算法<em>自适应非</em>极大值<em>抑制算法</em></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230110202840779.png" alt="image-20230110202840779"></p><p>有点像那么回事</p><hr><p>应该会有一些对比实验： 非极大值抑制算法ANMS、bucketing算法 <a href="https://blog.csdn.net/frozenspring/article/details/117174032">https://blog.csdn.net/frozenspring/article/details/117174032</a> </p><p><a href="https://blog.csdn.net/u013453604/article/details/45350653">https://blog.csdn.net/u013453604/article/details/45350653</a>  ANMS</p><p>对比实验</p><p>EFFICIENTLY SELECTING SPATIALLY DISTRIBUTED KEYPOINTS FOR VISUAL TRACKING 2011</p><p>2005年 Matthew Brown在论文Multi-Image Matching using Multi-<a href="https://so.csdn.net/so/search?q=Scale&amp;spm=1001.2101.3001.7020">Scale</a> Oriented Patches提出了自适应非极大值抑制算法（Adaptive Non-Maximum Suppression，ANMS</p><p>最近有一篇论文讨论了图像上均匀关键点分布的问题。这个资源库提供了 C + + 、 Python 和 Matlab 接口</p><p>There is a recent <a href="https://www.researchgate.net/publication/323388062_Efficient_adaptive_non-maximal_suppression_algorithms_for_homogeneous_spatial_keypoint_distribution">paper</a> that tackles the problem of homogeneous keypoint distribution on the image. C++, Python, and Matlab interfaces are provided in this <a href="https://github.com/BAILOOL/ANMS-Codes">repository</a> </p><hr><p>L. F. Kozachenko and N. N. Leonenko. Sample estimate of entropy of a random vector. Problems of Information Transmission, 23:95–101, 1987.</p><p><a href="https://kaba.hilvi.org/tim-1.3.0/tim/core/differential_entropy_kl_details.htm">https://kaba.hilvi.org/tim-1.3.0/tim/core/differential_entropy_kl_details.htm</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230113120228341.png" alt="image-20230113120228341"></p><hr><p>学习b站kd树</p><p><a href="https://www.bilibili.com/video/BV1d5411w7f5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8">https://www.bilibili.com/video/BV1d5411w7f5/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230113203850687.png" alt="image-20230113203850687"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230113144914106.png" alt="image-20230113144914106"></p><p>后来在思考我的矩形是首尾相连的，该怎么办呢。</p><p>学习kd树的搜索原理，自己画了个图就能理解了，当点的最小半径 &lt; 该点的x，说明会和x=0相交，那么将该点的x轴加360，再进行搜索，最终比较两个半径，取最小的半径作为distance。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> gamma, digamma</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> entropy_estimators <span class="keyword">import</span> continuous</span><br><span class="line">X = np.loadtxt(<span class="built_in">open</span>(<span class="string">&quot;J2000_5_hor2.csv&quot;</span>, <span class="string">&quot;rb&quot;</span>), delimiter=<span class="string">&quot;,&quot;</span>, skiprows=<span class="number">0</span>)</span><br><span class="line">print(X.shape)</span><br><span class="line">kozachenko = continuous.get_h(X, k=<span class="number">1</span>, norm=<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;K-L estimator: <span class="subst">&#123;kozachenko:<span class="number">.5</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所有点的 K-L estimator: 11.33121（魔改distance前）</p><p>魔改效果为 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230113164347580.png" alt="image-20230113164347580"></p><p>改善第51个点，魔改算法为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, d = x.shape</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> norm == <span class="string">&#x27;max&#x27;</span>:  <span class="comment"># max norm:</span></span><br><span class="line">    p = np.inf</span><br><span class="line">    log_c_d = <span class="number">0</span>  <span class="comment"># volume of the d-dimensional unit ball</span></span><br><span class="line"><span class="keyword">elif</span> norm == <span class="string">&#x27;euclidean&#x27;</span>:  <span class="comment"># euclidean norm</span></span><br><span class="line">    p = <span class="number">2</span></span><br><span class="line">    log_c_d = (d/<span class="number">2.</span>) * log(np.pi) - log(gamma(d/<span class="number">2.</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(</span><br><span class="line">        <span class="string">&quot;Variable &#x27;norm&#x27; either &#x27;max&#x27; or &#x27;euclidean&#x27;&quot;</span>)</span><br><span class="line">kdtree = cKDTree(x)</span><br><span class="line"><span class="comment"># query all points -- k+1 as query point also in initial set</span></span><br><span class="line"><span class="comment"># distances, _ = kdtree.query(x, k + 1, eps=0, p=norm)</span></span><br><span class="line">distances, _ = kdtree.query(x, k + <span class="number">1</span>, eps=<span class="number">0</span>, p=p)</span><br><span class="line">distances = distances[:, -<span class="number">1</span>]</span><br><span class="line">print(<span class="string">&quot;distances11 &quot;</span>, <span class="built_in">len</span>(distances))</span><br><span class="line">print(<span class="string">&quot;x11 &quot;</span>, x[<span class="number">0</span>, <span class="number">1</span>], <span class="string">&quot; distances &quot;</span>, distances[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> cur <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    <span class="keyword">if</span> (x[cur, <span class="number">0</span>] &lt; distances[cur]):</span><br><span class="line">        value = x[cur, <span class="number">0</span>] + <span class="number">360.0</span></span><br><span class="line">        distances1, _ = kdtree.query([value, x[cur, <span class="number">1</span>]], k, eps=<span class="number">0</span>, p=p)</span><br><span class="line">        print(<span class="string">&quot; cur &quot;</span>, cur, <span class="string">&quot; va &quot;</span>, value, <span class="string">&quot; distances1 &quot;</span>,</span><br><span class="line">              distances1, <span class="string">&quot; qian &quot;</span>, distances[cur])</span><br><span class="line">        <span class="comment"># print(&quot; distances1 &quot;, distances[cur])</span></span><br><span class="line">        distances[cur] = <span class="built_in">min</span>(distances[cur], distances1)</span><br><span class="line">    <span class="keyword">elif</span> (x[cur, <span class="number">0</span>] &gt; <span class="number">360.0</span>-distances[cur]):</span><br><span class="line">        value = x[cur, <span class="number">0</span>] - <span class="number">360.0</span></span><br><span class="line">        print(<span class="string">&quot; va &quot;</span>, value)</span><br><span class="line">        distances1, _ = kdtree.query([value,  x[cur, <span class="number">1</span>]], k, eps=<span class="number">0</span>, p=p)</span><br><span class="line">        distances[cur] = <span class="built_in">min</span>(distances[cur], distances1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;distances &quot;, distances)</span></span><br><span class="line"><span class="comment"># enforce non-zero distances</span></span><br><span class="line">distances[distances &lt; min_dist] = min_dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># where did the 2 come from? radius -&gt; diameter</span></span><br><span class="line">sum_log_dist = np.<span class="built_in">sum</span>(log(<span class="number">2</span>*distances))</span><br><span class="line">h = -digamma(k) + digamma(n) + log_c_d + (d / <span class="built_in">float</span>(n)) * sum_log_dist</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>h值为11.33087（魔改后，虽然变小 ，考虑到左右宽度）</p><hr><p>接下来改为matlab</p><p>网上找的代码</p><p><a href="https://blog.csdn.net/john_xia/article/details/107563005">https://blog.csdn.net/john_xia/article/details/107563005</a> 不好用 直接用内置函数</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">2</span> <span class="number">3</span>;</span><br><span class="line">    <span class="number">5</span> <span class="number">4</span>;</span><br><span class="line">    <span class="number">9</span> <span class="number">6</span>;</span><br><span class="line">    <span class="number">4</span> <span class="number">7</span>;</span><br><span class="line">    <span class="number">8</span> <span class="number">1</span>;</span><br><span class="line">    <span class="number">7</span> <span class="number">2</span>];</span><br><span class="line">Mdl = KDTreeSearcher(data)</span><br><span class="line">[n,d] = knnsearch(Mdl,[<span class="number">6</span>,<span class="number">3.1</span>],<span class="string">&#x27;k&#x27;</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>n =</p><pre><code> 2     6     5     1     3     4</code></pre><p>d =</p><pre><code>1.3454    1.4866    2.9000    4.0012    4.1725    4.3829</code></pre><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;close all;clc;</span><br><span class="line">tic;</span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">3</span>);</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line">Mdl = KDTreeSearcher(points);</span><br><span class="line">[n,d] = knnsearch(Mdl,points,<span class="string">&#x27;k&#x27;</span>,k+<span class="number">1</span>);</span><br><span class="line">distances = d(:,<span class="keyword">end</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">    <span class="keyword">if</span> ( points(<span class="built_in">i</span>,<span class="number">1</span>) &lt; distances(<span class="built_in">i</span>) ) </span><br><span class="line">        value = points(<span class="built_in">i</span>,<span class="number">1</span>) + <span class="number">360.0</span>;</span><br><span class="line">        [~, dd] = knnsearch(Mdl,[value, points(<span class="built_in">i</span>, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        distances(<span class="built_in">i</span>) = <span class="built_in">min</span>(distances(<span class="built_in">i</span>), dd);</span><br><span class="line">    <span class="keyword">elseif</span> (points(<span class="built_in">i</span>, <span class="number">1</span>) &gt; <span class="number">360.0</span>-distances(<span class="built_in">i</span>) ) </span><br><span class="line">        value = points(<span class="built_in">i</span>,<span class="number">1</span>) - <span class="number">360.0</span>;</span><br><span class="line">        [~, dd] = knnsearch(Mdl,[value, points(<span class="built_in">i</span>, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        distances(<span class="built_in">i</span>) = <span class="built_in">min</span>(distances(<span class="built_in">i</span>), dd);        </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Copy_2_of_totalH(distances,<span class="built_in">length</span>(points))</span><br><span class="line">toc;</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">h</span> =  <span class="title">Copy_2_of_totalH</span><span class="params">(distances, len)</span></span></span><br><span class="line">    d = <span class="number">2</span>;</span><br><span class="line">    log_c_d = (d/<span class="number">2.</span>) * <span class="built_in">log</span>(<span class="built_in">pi</span>) - <span class="built_in">log</span>(<span class="built_in">gamma</span>(d/<span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    sum_log_dist = sum(<span class="built_in">log</span>(<span class="number">2</span>*distances));</span><br><span class="line">    h = - <span class="built_in">psi</span>(<span class="number">1</span>) + <span class="built_in">psi</span>(len) + log_c_d + (d/len) * sum_log_dist;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>验证是对的</p><p>接着</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 模拟退火求解选点问题 直接计算h 更慢  % 466</span></span><br><span class="line">clear all; clc; close all;</span><br><span class="line">tic</span><br><span class="line"><span class="comment">% load points;</span></span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">3</span>);</span><br><span class="line"><span class="comment">% points = sort(points);</span></span><br><span class="line">rng(<span class="string">&#x27;shuffle&#x27;</span>)  <span class="comment">% 控制随机数的生成，否则每次打开matlab得到的结果都一样</span></span><br><span class="line">len = <span class="number">50</span>;</span><br><span class="line">map = [<span class="number">1</span>:len,<span class="number">1</span>:len];</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 参数初始化</span></span><br><span class="line">T0 = <span class="number">1000</span>;   <span class="comment">% 初始温度</span></span><br><span class="line">T = T0; <span class="comment">% 迭代中温度会发生改变，第一次迭代时温度就是T0</span></span><br><span class="line">maxgen = <span class="number">800</span>;  <span class="comment">% 最大迭代次数</span></span><br><span class="line">Lk = <span class="number">200</span>;  <span class="comment">% 每个温度下的迭代次数</span></span><br><span class="line">alfa = <span class="number">0.95</span>;  <span class="comment">% 温度衰减系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  随机生成一个初始解</span></span><br><span class="line">A = int32(<span class="number">1</span>:<span class="built_in">length</span>(points));</span><br><span class="line">random_num = A(randperm(<span class="built_in">numel</span>(A),len));</span><br><span class="line">index0 = <span class="built_in">sort</span>(random_num);</span><br><span class="line">h0 = Copy_2_of_totalH(points, index0);</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;初始方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(index0))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(h0)</span><br><span class="line">min_money = h0;     <span class="comment">% 初始化找到的最佳的解对应的花费为money0</span></span><br><span class="line">MONEY = <span class="built_in">zeros</span>(maxgen,<span class="number">1</span>); <span class="comment">% 记录每一次外层循环结束后找到的min_money (方便画图）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 模拟退火过程</span></span><br><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span> : maxgen  <span class="comment">% 外循环, 我这里采用的是指定最大迭代次数</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Lk  <span class="comment">%  内循环，在每个温度下开始迭代</span></span><br><span class="line">        index = index0;</span><br><span class="line">        x_num = index(randperm(<span class="built_in">numel</span>(index),<span class="number">1</span>));</span><br><span class="line">        x = <span class="built_in">find</span>(index == x_num);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        shengxia = setxor(A, index);</span><br><span class="line">        y_num = shengxia(randperm(<span class="built_in">numel</span>(shengxia),<span class="number">1</span>));</span><br><span class="line">        index(x) = y_num;</span><br><span class="line">        index = <span class="built_in">sort</span>(index);</span><br><span class="line"></span><br><span class="line">        index1 = index;  <span class="comment">% 调用我们自己写的gen_new_way函数生成新的方案</span></span><br><span class="line"></span><br><span class="line">        h1 = Copy_2_of_totalH(points, index1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> h1 &gt; h0    <span class="comment">% 如果新方案的花费小于当前方案的花费</span></span><br><span class="line">            index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">            h0 = h1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = <span class="built_in">exp</span>((h1 - h0)/T); <span class="comment">% 根据Metropolis准则计算一个概率</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">rand</span>(<span class="number">1</span>) &lt; p   <span class="comment">% 生成一个随机数和这个概率比较，如果该随机数小于这个概率</span></span><br><span class="line">                index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">                h0 = h1;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% 判断是否要更新找到的最佳的解</span></span><br><span class="line">        <span class="keyword">if</span> h0 &gt; min_money  <span class="comment">% 如果当前解更好，则对其进行更新</span></span><br><span class="line">            min_money = h0;  <span class="comment">% 更新最大的花费</span></span><br><span class="line">            best_way = index1;  <span class="comment">% 更新找到的最佳方案</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    MONEY(iter) = min_money; <span class="comment">% 保存本轮外循环结束后找到的最小花费</span></span><br><span class="line">    T = alfa*T;   <span class="comment">% 温度下降</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最佳的方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(best_way))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(min_money)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画出每次迭代后找到的最佳方案的图形</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:maxgen,MONEY,<span class="string">&#x27;b-&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;迭代次数&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;最小花费&#x27;</span>);</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">h</span> =  <span class="title">Copy_2_of_totalH</span><span class="params">(points,index)</span></span></span><br><span class="line">    len = <span class="built_in">length</span>(index);</span><br><span class="line">    point = points(index, :);</span><br><span class="line">    k = <span class="number">1</span>;</span><br><span class="line">    Mdl = KDTreeSearcher(point);</span><br><span class="line">    [n,d] = knnsearch(Mdl,point,<span class="string">&#x27;k&#x27;</span>,k+<span class="number">1</span>);</span><br><span class="line">    distances = d(:,<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>(point)</span><br><span class="line">        <span class="keyword">if</span> ( point(<span class="built_in">i</span>,<span class="number">1</span>) &lt; distances(<span class="built_in">i</span>) ) </span><br><span class="line">            value = point(<span class="built_in">i</span>,<span class="number">1</span>) + <span class="number">360.0</span>;</span><br><span class="line">            [~, dd] = knnsearch(Mdl,[value, point(<span class="built_in">i</span>, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">            distances(<span class="built_in">i</span>) = <span class="built_in">min</span>(distances(<span class="built_in">i</span>), dd);</span><br><span class="line">        <span class="keyword">elseif</span> (point(<span class="built_in">i</span>, <span class="number">1</span>) &gt; <span class="number">360.0</span>-distances(<span class="built_in">i</span>) ) </span><br><span class="line">            value = point(<span class="built_in">i</span>,<span class="number">1</span>) - <span class="number">360.0</span>;</span><br><span class="line">            [~, dd] = knnsearch(Mdl,[value, point(<span class="built_in">i</span>, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">            distances(<span class="built_in">i</span>) = <span class="built_in">min</span>(distances(<span class="built_in">i</span>), dd);        </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    d = <span class="number">2</span>;</span><br><span class="line">    log_c_d = (d/<span class="number">2.</span>) * <span class="built_in">log</span>(<span class="built_in">pi</span>) - <span class="built_in">log</span>(<span class="built_in">gamma</span>(d/<span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line">    sum_log_dist = sum(<span class="built_in">log</span>(<span class="number">2</span>*distances));</span><br><span class="line">    h = - <span class="built_in">psi</span>(<span class="number">1</span>) + <span class="built_in">psi</span>(len) + log_c_d + (d/len) * sum_log_dist;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>初始方案是：<br>[34 38 53 80 81 111 121 134 140 143 194 203 217 230 233 242 246 253 260 271 272 273 287 288 364 370 371 373 411 413 420 472 479 488 500 508 527 571 593 603 615 624 628 632 641 642 647 651 673 684]<br>此时最优值是：<br>   11.6156</p><p>最佳的方案是：<br>[16 20 22 31 36 40 41 50 52 53 66 68 75 77 85 93 131 149 150 156 164 194 213 244 274 323 345 351 355 388 394 403 415 426 447 490 493 504 510 557 565 566 616 637 645 658 660 664 665 703]<br>此时最优值是：<br>   13.4517</p><p><code>历时 57.334977 秒。</code></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230114090732190.png" alt="image-20230114090732190"></p><p>vscode python 验证</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230114091618050.png" alt="image-20230114091618050"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230114093427744.png" alt="image-20230114093427744"></p><p>选择了这些点</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230114093457076.png" alt="image-20230114093457076"></p><hr><p>2023/2/3 续</p><p>但是耗时过长</p><p>由于每次只替换一个点，因此可以快速计算，函数(一堆点集，要替换的点，新点)</p><p>现在还需要增加一个功能，就是记录那50个点中最近的点的序号</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230203213229514.png" alt="image-20230203213229514"></p><p>找最近的点，如果是要被删的，那么就重新计算这些点，但是要增加的点呢</p><p>还是需要全部进行查询最近点 </p><p>所以该改进点只得作罢</p><hr><p>开始写文章吧</p><hr><p>画圆</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230208160758706.png" alt="image-20230208160758706"></p><p><a href="https://ww2.mathworks.cn/help/matlab/ref/cylinder.html">https://ww2.mathworks.cn/help/matlab/ref/cylinder.html</a></p><p><a href="https://blog.csdn.net/weixin_40525909/article/details/106636093">https://blog.csdn.net/weixin_40525909/article/details/106636093</a></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear all;</span><br><span class="line">t = <span class="built_in">linspace</span>(<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">pi</span>,<span class="number">1</span>);</span><br><span class="line">a = <span class="built_in">size</span>(t); </span><br><span class="line">r = <span class="number">1</span> * <span class="built_in">ones</span>(a);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">% polar(t,r,&#x27;w&#x27;);</span></span><br><span class="line">polar([<span class="number">0</span>],[<span class="number">0</span>],<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="comment">% cylinder()</span></span><br><span class="line">[X,Y,Z] = cylinder(<span class="number">1</span>,<span class="number">400</span>);</span><br><span class="line">Z = Z+<span class="number">0.3</span>;</span><br><span class="line">surf(X,Y,Z);</span><br><span class="line">view(<span class="number">90</span>,<span class="number">30</span>)</span><br><span class="line">shading flat </span><br><span class="line">colorbar</span><br><span class="line">opengl(<span class="string">&#x27;save&#x27;</span>,<span class="string">&#x27;hardwarebasic&#x27;</span>)</span><br></pre></td></tr></table></figure><p>画好红 插入灯光，修改颜色，去除坐标点，加上°，加上colorbar,右击打开颜色图编辑器，指定颜色，删除颜色 设置两头黑，P图。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230209143812223.png" alt="image-20230209143812223"></p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clf;</span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">100</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">scatter</span>([<span class="number">10</span>,<span class="number">20</span>,<span class="number">350</span>,<span class="number">370</span>],[<span class="number">45</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">45</span>],<span class="number">12</span>);</span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">% xlabel(&#x27;\bf 方位轴&#x27;);</span></span><br><span class="line"><span class="comment">% ylabel(&#x27;\bf 高度轴&#x27;);</span></span><br><span class="line">r = pdist([[<span class="number">10</span>,<span class="number">45</span>];[<span class="number">20</span>,<span class="number">20</span>]],<span class="string">&#x27;euclidean&#x27;</span>);</span><br><span class="line">rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">10</span>-r,<span class="number">45</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">370</span>-r,<span class="number">45</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">theta=<span class="number">0</span>:<span class="number">0.001</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">Circle1=<span class="number">10</span>+r*<span class="built_in">cos</span>(theta);</span><br><span class="line">Circle2=<span class="number">45</span>+r*<span class="built_in">sin</span>(theta);</span><br><span class="line">Circle1(Circle1 &lt; <span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">plot</span>(Circle1,Circle2,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">Circle1=<span class="number">370</span>+r*<span class="built_in">cos</span>(theta);</span><br><span class="line">Circle2=<span class="number">45</span>+r*<span class="built_in">sin</span>(theta);</span><br><span class="line">Circle1(Circle1 &gt; <span class="number">360</span>) = <span class="number">360</span>;</span><br><span class="line"><span class="built_in">plot</span>(Circle1,Circle2,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">0.5</span>);</span><br><span class="line">txt = <span class="string">&#x27; M&#x27;</span>;</span><br><span class="line">text(<span class="number">10</span>,<span class="number">45</span>,txt);</span><br><span class="line">txt = <span class="string">&#x27; N&#x27;</span>;</span><br><span class="line">text(<span class="number">20</span>,<span class="number">20</span>,txt)</span><br><span class="line">txt = <span class="string">&#x27; M^&#123;&#x27;&#x27;&#125;&#x27;</span>;</span><br><span class="line">text(<span class="number">360</span>,<span class="number">45</span>,txt);</span><br><span class="line">txt = <span class="string">&#x27; P&#x27;</span>;</span><br><span class="line">text(<span class="number">350</span>,<span class="number">50</span>,txt)</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230209164542299.png" alt="image-20230209164542299"></p><p><a href="https://blog.csdn.net/luochao5862426/article/details/89219311">https://blog.csdn.net/luochao5862426/article/details/89219311</a></p><p>Matlab图形高清插入word文档的几种方法。</p><hr><p>在选取恒星点的k近邻时，需要考虑的问题是如何对星点进行快速k近邻搜索。k近邻最简单的实现是枚举搜索，即对选取星点与其他星点计算距离，时间复杂度为                                。当恒星点集很大时，计算非常耗时。可以使用特殊的数据结构存储星点位置，减小计算次数，以提高k近邻搜索效率。</p><p>​    KD树是一种对K维空间中的数据进行组织和存储以便进行快速搜索查找的二叉树形数据结构，用垂直于坐标轴的超平面将K维空间划分成一系列的K维超矩形区域。在本文中，KD树的每个节点对应于一个由方位轴和高度轴组成的二维矩形区域，构造得到的KD树是平衡二叉树，搜索查找的时间复杂度为  。</p><p>​    </p><p>对于输入的恒星坐标点集  ，其中  ，  ，  ，<strong>构造**</strong>KD<strong>**树</strong>的方法如下：</p><div class="table-container"><table><thead><tr><th>BuildKDTree(star pointsT, tree_depth)</th></tr></thead><tbody><tr><td>1)     //  根据树深度的奇偶性来选择AE维度</td></tr><tr><td>2)     axis  = tree_depth &amp; 1</td></tr><tr><td>3)     //  选择第axis维度的中间值为根节点进行KD树的构造  4)     Select  median by axis from points  5)     //  构造节点和子树  6)     node  = median  7)     node.left  = KDTree(points in subList(0, median), axis, tree_depth + 1)  8)     node.right  = KDTree(points in subList(median+1, points.end()), axis, tree_depth + 1)  9)     return  node</td></tr><tr><td></td></tr><tr><td></td></tr></tbody></table></div><p>（1）构造根节点：根节点的深度为0，对应于望远镜两轴指向上半天区所组成的二维空间，其中方位轴范围为0°至360°，高度轴范围为0°至90°。接着，重复通过下面（2）的递归方法，不断地对二维空间进行切分，生成子节点。</p><p>（2）重复：对深度为奇数/偶数j的节点重复E/A轴切分：选择E/A轴为坐标轴，以该节点的区域中所有恒星的E/A坐标中位数为切分点，将该节点对应的二维区域切分为两个子区域。由该节点生成深度为j+1的左右子节点，左子节点对应坐标E/A小于切分点的子区域，右子节点对应坐标E/A大于切分点的子区域。并将落在该二维平面上的恒星点保存在该节点。</p><p>（3）直到两个子区域内没有恒星时，构造KD树停止，完成划分。</p><hr><p>​    利用KD树可以减少搜索的计算量。在望远镜两轴指向形成的圆柱面上，为一个恒星点搜索其k近邻与传统的KD树搜索策略有所差异，本文提出改进的KD树搜索策略IKDS，首先找到包含选取点的叶子节点，然后由该节点出发，依次回退到父节点；不断查找所选星点的最近邻，当不存在更近的节点时中止。具体方法如下：</p><hr><p>利用KD树可以省去对大部分数据点的搜索，从而减少搜索的计算量。给定一个恒星点，搜索其最近邻，首先找到包含选取点的叶子节点，然后由该节点出发，依次回退到父节点；不断查找所选星点的最近邻，当不存在更近的节点时中止。具体方法如下</p><hr><p><strong>适应于圆柱面上的**</strong>KD<strong>**树搜索策略</strong></p><p>​    利用KD树可以省去对大部分数据点的搜索，从而减少搜索的计算量。给定一个恒星点，搜索其最近邻，首先找到包含选取点的叶子节点，然后由该节点出发，依次回退到父节点；不断查找所选星点的最近邻，当不存在更近的节点时中止。由于恒星位于高度轴和方位轴两个垂直轴所组成的圆柱面上，KD树的搜索策略有所不同，具体方法如下：</p><p>​    （1）在KD树种找到包含选取点的叶子节点，并以此叶子节点为“当前最近点”。递归地向上回退，在每个节点进行以下（2）（3）操作：</p><p>​    （2）如果该节点保存的恒星点比当前最近点更接近选取点，则该节点为当前最近点。</p><p>（3）当前最近点一定存在于该节点的一个子节点所对应的区域。检查该子节点的父节点的另一个子节点所对应的区域是否有更近的点。具体的，检查另一个子节点对应的区域是否与目标点为圆心，与目标点与当前最近点间的距离为半径的圆相交。如果相交，可能在另一个子节点对应的区域内存在距离目标更近的点，移动到另一个子节点。接着，递归地进行最近邻搜索。如果不相交，往上回退。</p><p>（4）当回退到根节点时，搜索结束。搜索得到的“当前最近点”即为选取点的最近邻。当选取点的方位轴                                坐标减去最近邻距离小于0°时，以选取点为中心，最近邻距离为半径的最近邻圆与0°方位轴相切，可能存在方位轴为  （  为一个较小的数）的星点距离选取星点更近。如上图所示，使用原始KD树搜索找到目标星点M的最近邻N，但方位轴尾端可能存在星点P，距离选取星点M更近。因此需要重新计算选取虚拟星点  的最近邻距离，与  的最近邻距离相比取较小值；同样的，当方位轴  坐标加上最近邻距离大于360°时，还需要计算选取虚拟星点  的最近邻距离。</p><hr><p>正交网格法</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line"><span class="comment">% tic</span></span><br><span class="line"><span class="comment">% load points;</span></span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">3</span>);</span><br><span class="line"><span class="comment">% points = sortrows(points,1);</span></span><br><span class="line">rng(<span class="string">&#x27;shuffle&#x27;</span>)  <span class="comment">% 控制随机数的生成，否则每次打开matlab得到的结果都一样</span></span><br><span class="line">len = <span class="number">50</span>;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">jiange = <span class="number">5</span>;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line">ret = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt; <span class="number">90</span></span><br><span class="line">    tmp = <span class="built_in">find</span>( (points(:,<span class="number">1</span>)&gt; x) &amp; (points(:,<span class="number">2</span>) &gt;y) &amp; (points(:,<span class="number">1</span>)&lt;= x+ jiange) &amp; (points(:,<span class="number">2</span>)&lt;= y+ jiange) );</span><br><span class="line">    <span class="keyword">if</span> ( ~<span class="built_in">isempty</span>(tmp) )</span><br><span class="line">        ret = [ret; points(tmp(<span class="number">1</span>),:)];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt;= <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% scatter(points(:,1), points(:,2));</span></span><br><span class="line"><span class="built_in">scatter</span>(ret(:,<span class="number">1</span>), ret(:,<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选自 Vedder, J. D., STAR TRACKERS, STAR CATALOGS, AND ATTITUDE DETERMINATION - PROBABILISTIC ASPECTS OF SYSTEM-DESIGN. <em>J. Guid. Control Dyn.</em> <strong>1993,</strong> 16, (3), 498-504.</p><p>例如间隔为5°，选择了487个点</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230215113153528.png" alt="image-20230215113153528"></p><p>间隔26.6°可以选择50个星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230215113339772.png" alt="image-20230215113339772"></p><p>选择索引 ret = [ret; tmp(1)];</p><p>计算Copy_2_of_totalH(points,ret)熵值，12.5235，所有星是11.3309</p><p>找寻最近点 确实很快 0.05秒但存在问题 就是找寻50个点需要的jiange</p><p>用二分法试试</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">tic</span><br><span class="line"><span class="comment">% load points;</span></span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">3</span>);</span><br><span class="line"><span class="comment">% points = sortrows(points,1);</span></span><br><span class="line">rng(<span class="string">&#x27;shuffle&#x27;</span>)  <span class="comment">% 控制随机数的生成，否则每次打开matlab得到的结果都一样</span></span><br><span class="line">len = <span class="number">50</span>;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">% jiange = 26.6;</span></span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> left &lt; right</span><br><span class="line">    ret = [];</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">    jiange = double( left + right ) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt; <span class="number">90</span></span><br><span class="line">        tmp = <span class="built_in">find</span>( (points(:,<span class="number">1</span>)&gt; x) &amp; (points(:,<span class="number">2</span>) &gt;y) &amp; (points(:,<span class="number">1</span>)&lt;= x+ jiange) &amp; (points(:,<span class="number">2</span>)&lt;= y+ jiange) );</span><br><span class="line">        <span class="keyword">if</span> ( ~<span class="built_in">isempty</span>(tmp) )</span><br><span class="line">    <span class="comment">%         ret = [ret; points(tmp(1),:)];</span></span><br><span class="line">                ret = [ret; tmp(<span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        y = y + jiange;</span><br><span class="line">        <span class="keyword">if</span> ( y &gt;= <span class="number">90</span> ) </span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            x = x + jiange;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">length</span>(ret)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">length</span>(ret) == <span class="number">50</span> ) </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">elseif</span> ( <span class="built_in">length</span>(ret) &gt; <span class="number">50</span> ) </span><br><span class="line">        left = jiange;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        right = jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc;</span><br><span class="line"><span class="comment">% scatter(points(:,1), points(:,2));</span></span><br><span class="line"><span class="comment">% scatter(ret(:,1), ret(:,2));</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jiange =</p><p>   26.3672</p><p>ans =50</p><p>历时 0.044573 秒。 很快</p><hr><p>画结果图</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>([<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>],[<span class="number">11.4426</span><span class="number">11.5679</span><span class="number">11.5762</span><span class="number">11.6659</span>],<span class="string">&#x27;-bo&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>],[<span class="number">12.5960</span><span class="number">12.5311</span><span class="number">12.6415</span><span class="number">12.6410</span>],<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>]);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>],[<span class="number">12.8165</span><span class="number">12.7812</span><span class="number">12.8322</span><span class="number">12.8459</span>],<span class="string">&#x27;-^&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>]);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>],[<span class="number">13.5425</span>,<span class="number">13.4567</span>,<span class="number">13.4374</span>,<span class="number">13.3992</span>],<span class="string">&#x27;-rsquare&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">30</span>,<span class="number">60</span>],[<span class="number">11.3309</span>,<span class="number">11.3309</span>],<span class="string">&#x27;--k&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line">xticks([<span class="number">30</span> <span class="number">40</span> <span class="number">50</span> <span class="number">60</span>])</span><br><span class="line">yticks([<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>])</span><br><span class="line">xlim([<span class="number">27</span> <span class="number">63</span>]);</span><br><span class="line">ylim([<span class="number">11</span> <span class="number">14.5</span>]);</span><br><span class="line"><span class="built_in">legend</span>( <span class="string">&#x27;1:Random&#x27;</span>,<span class="string">&#x27;2:RGM&#x27;</span>, <span class="string">&#x27;3:SO&#x27;</span>, <span class="string">&#x27;4:MKLE&#x27;</span>,<span class="string">&#x27;5:All&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;KL 熵&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>([<span class="number">27</span>,<span class="number">30</span>,<span class="number">44</span>,<span class="number">48</span>, <span class="number">52</span>],[<span class="number">11.0260</span><span class="number">11.5331</span><span class="number">11.4096</span><span class="number">11.0756</span><span class="number">11.8410</span>],<span class="string">&#x27;-bo&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">27</span>,<span class="number">30</span>,<span class="number">44</span>,<span class="number">48</span>, <span class="number">52</span>],[<span class="number">12.2689</span><span class="number">12.5960</span><span class="number">12.5225</span><span class="number">12.5195</span><span class="number">12.6379</span>],<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>]);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">27</span>,<span class="number">30</span>,<span class="number">44</span>,<span class="number">48</span>, <span class="number">52</span>],[<span class="number">13.5609</span><span class="number">13.5329</span><span class="number">13.4409</span><span class="number">13.4240</span><span class="number">13.3890</span>],<span class="string">&#x27;-^&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>]);<span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">27</span>,<span class="number">30</span>,<span class="number">44</span>,<span class="number">48</span>, <span class="number">52</span>],[<span class="number">13.5537</span><span class="number">13.3811</span><span class="number">13.3753</span><span class="number">13.4138</span><span class="number">13.2940</span>],<span class="string">&#x27;-rsquare&#x27;</span>);<span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xticks([<span class="number">27</span> <span class="number">30</span> <span class="number">44</span> <span class="number">48</span> <span class="number">52</span>])</span><br><span class="line">yticks([<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>])</span><br><span class="line">xlim([<span class="number">25</span> <span class="number">55</span>]);</span><br><span class="line">ylim([<span class="number">11</span> <span class="number">14.5</span>]);</span><br><span class="line"><span class="built_in">legend</span>( <span class="string">&#x27;Random&#x27;</span>,<span class="string">&#x27;RGM&#x27;</span>, <span class="string">&#x27;MKLE&#x27;</span>, <span class="string">&#x27;ETRP&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;KL 熵&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>仿真平台为Windows11操作系统下的Matlab，计算机配置为Intel(R) Core i5-11400F@ 2.6GHz，16GB内存。</p><p>没敢写时间</p><hr><p>初始方案是：<br>[30 43 86 126 134 146 152 183 214 216 232 263 265 278 283 299 307 309 354 363 376 377 379 396 406 424 425 429 435 439 478 485 490 499 522 526 535 556 561 576 602 611 615 625 638 639 692 698 702 705]<br>此时最优值是：<br>   11.1946</p><p>最佳的方案是：<br>[8 20 22 36 40 41 42 43 50 53 54 68 74 75 93 97 104 133 150 158 162 189 206 248 274 325 331 343 378 379 380 394 399 413 424 432 460 490 510 514 517 546 576 612 624 647 660 664 699 702]<br>此时最优值是：<br>   13.4316</p><p>历时 88.230554 秒。</p><hr><p>画结果图。</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scatter</span>(points(:,<span class="number">1</span>), points(:,<span class="number">2</span>), <span class="number">8</span>)</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line"><span class="comment">% title(&#x27;Distribution of all stars&#x27;);</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">scatter</span>(points(best_way,<span class="number">1</span>), points(best_way,<span class="number">2</span>), <span class="number">12</span>)</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlabel(<span class="string">&#x27;\bf Azimuth axis&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;\bf Elevation axis&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Distribution of selected stars&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230216153601776.png" alt="image-20230216153601776"></p><p>或者</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">scatter</span>(points(:,<span class="number">1</span>), points(:,<span class="number">2</span>), <span class="number">8</span>)</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">110</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlabel(<span class="string">&#x27;Azimuth axis&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Elevation axis&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">scatter</span>(points(best_way,<span class="number">1</span>), points(best_way,<span class="number">2</span>), <span class="number">20</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,<span class="string">&#x27;#FF8000&#x27;</span>)</span><br><span class="line">xtickformat(<span class="string">&#x27;usd&#x27;</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;All stars&#x27;</span>, <span class="string">&#x27;Selected stars&#x27;</span>)</span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line">ytickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230216154546130.png" alt="image-20230216154546130"></p><hr><p>画环形图</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">ax = polaraxes;</span><br><span class="line">ax.RAxis.Label.String = <span class="string">&#x27;Elevation&#x27;</span>;</span><br><span class="line">ax.ThetaAxis.Label.String = <span class="string">&#x27;Azimuth&#x27;</span>;</span><br><span class="line">ax.ThetaZeroLocation = <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">polarscatter(double(points(:,<span class="number">1</span>))./<span class="number">180.0</span> * <span class="built_in">pi</span>,points(:,<span class="number">2</span>),<span class="number">20</span>)</span><br><span class="line">thetalim([<span class="number">0</span> <span class="number">360</span>])</span><br><span class="line">rticks(<span class="number">0</span>:<span class="number">22.5</span>:<span class="number">90</span>)</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">polarscatter(double(points(best_way,<span class="number">1</span>))./<span class="number">180.0</span> * <span class="built_in">pi</span>,points(best_way,<span class="number">2</span>), <span class="number">30</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;All stars&#x27;</span>, <span class="string">&#x27;Selected stars&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = polaraxes;</span><br><span class="line">ax.RAxis.Label.String = <span class="string">&#x27;Elevation axis&#x27;</span>;</span><br><span class="line">ax.ThetaAxis.Label.String = <span class="string">&#x27;Azimuth axis&#x27;</span>;</span><br><span class="line">ax.ThetaZeroLocation = <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">polarscatter(double(points(:,<span class="number">1</span>))./<span class="number">180.0</span> * <span class="built_in">pi</span>, <span class="number">90</span>-points(:,<span class="number">2</span>),<span class="number">20</span>)</span><br><span class="line">thetalim([<span class="number">0</span> <span class="number">360</span>])</span><br><span class="line">rticks(<span class="number">0</span>:<span class="number">22.5</span>:<span class="number">90</span>)</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">polarscatter(double(points(best_way,<span class="number">1</span>))./<span class="number">180.0</span> * <span class="built_in">pi</span>, <span class="number">90</span>-points(best_way,<span class="number">2</span>), <span class="number">30</span>,<span class="string">&#x27;filled&#x27;</span>,<span class="string">&#x27;MarkerFaceColor&#x27;</span>,<span class="string">&#x27;#FF8000&#x27;</span>)</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;All stars&#x27;</span>, <span class="string">&#x27;Selected stars&#x27;</span>)</span><br><span class="line">ax.ThetaTickLabel = string(ax.ThetaTickLabel) + char(<span class="number">176</span>)</span><br><span class="line">rticks([<span class="number">0</span> <span class="number">22.5</span> <span class="number">45</span>  <span class="number">67.5</span> <span class="number">90</span>])                        <span class="comment">% 在r = 50,100,200处显示刻度</span></span><br><span class="line">rticklabels(&#123;<span class="string">&#x27;90&#x27;</span>,<span class="string">&#x27;67.5&#x27;</span>,<span class="string">&#x27;45&#x27;</span>,<span class="string">&#x27;22.5&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;)            <span class="comment">% 在刻度线处加标记</span></span><br><span class="line">ax.RTickLabel = string(ax.RTickLabel) + char(<span class="number">176</span>)</span><br><span class="line">ax.RAxisLocation = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = polaraxes;</span><br><span class="line">ax.RAxis.Label.String = <span class="string">&#x27;高度轴&#x27;</span>;</span><br><span class="line">ax.ThetaAxis.Label.String = <span class="string">&#x27;方位轴&#x27;</span>;</span><br><span class="line">ax.ThetaZeroLocation = <span class="string">&#x27;bottom&#x27;</span>;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">polarscatter(double(points(best_way,<span class="number">1</span>))./<span class="number">180.0</span> * <span class="built_in">pi</span>, <span class="number">90</span>-points(best_way,<span class="number">2</span>), <span class="number">20</span>)</span><br><span class="line">thetalim([<span class="number">0</span> <span class="number">360</span>])</span><br><span class="line">rticks(<span class="number">0</span>:<span class="number">22.5</span>:<span class="number">90</span>)</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">ax.ThetaTickLabel = string(ax.ThetaTickLabel) + char(<span class="number">176</span>)</span><br><span class="line">rticks([<span class="number">0</span> <span class="number">22.5</span> <span class="number">45</span>  <span class="number">67.5</span> <span class="number">90</span>])                        <span class="comment">% 在r = 50,100,200处显示刻度</span></span><br><span class="line">rticklabels(&#123;<span class="string">&#x27;90&#x27;</span>,<span class="string">&#x27;67.5&#x27;</span>,<span class="string">&#x27;45&#x27;</span>,<span class="string">&#x27;22.5&#x27;</span>,<span class="string">&#x27;0&#x27;</span>&#125;)            <span class="comment">% 在刻度线处加标记</span></span><br><span class="line">ax.RTickLabel = string(ax.RTickLabel) + char(<span class="number">176</span>)</span><br><span class="line">ax.RAxisLocation = <span class="number">90</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>接着做实验</p><p>画一个图</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">tic</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc;</span><br></pre></td></tr></table></figure><p>3个图拼一起</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line">jiange = <span class="number">30</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret1 = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret1 = [ret1; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">jiange = <span class="number">18</span>;</span><br><span class="line">ret2 = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret2 = [ret2; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clf;</span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">100</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(ret1(:,<span class="number">1</span>), ret1(:,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230224205020024.png" alt="image-20230224205020024"></p><p>n = 120, distances = 18; KL = 18.0668</p><p>去掉任意一个星 distance不变 kl = 18.05834851010958</p><p>n = 80, distances = 22.5; KL = 18.551770401636414</p><p>去掉任意一个星 distance不变 kl = 18.53911217378831</p><p>n = 48 dis = 30; KL = 19.187483254228805</p><p>19.16620665848412</p><hr><p>试试三角形</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230224211806401.png" alt="image-20230224211806401"></p><p>存在这种情况</p><hr><p>试试六边形</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230224213629088.png" alt="image-20230224213629088"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">jiange = <span class="number">18</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ret1 = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="number">120</span></span><br><span class="line">    <span class="keyword">if</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">31</span> &amp;&amp; ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">32</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">31</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">0</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">60</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">2</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">32</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% for i = 1 : 120</span></span><br><span class="line"><span class="comment">%     if mod(i, 3) ~= 0</span></span><br><span class="line"><span class="comment">%         ret1 = [ret1;ret(i,:)];</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line">clear all;  close all;clc;</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ret1 = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="number">80</span></span><br><span class="line">    <span class="keyword">if</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">0</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">19</span> &amp;&amp; ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">20</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">2</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">39</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">2</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">60</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &gt; <span class="number">32</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret1 = [ret1;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jiange = <span class="number">30</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ret2 = [];</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="number">48</span></span><br><span class="line">    <span class="keyword">if</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">0</span></span><br><span class="line">            ret2 = [ret2;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">39</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret2 = [ret2;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">elseif</span> ret(<span class="built_in">i</span>,<span class="number">2</span>) &lt; <span class="number">60</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">0</span></span><br><span class="line">            ret2 = [ret2;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>, <span class="number">3</span>) ~= <span class="number">1</span></span><br><span class="line">            ret2 = [ret2;ret(<span class="built_in">i</span>,:)];</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>81个点  17.6717</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230224232242545.png" alt="image-20230224232242545"></p><p>随机点</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tic</span><br><span class="line">ret = [];</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">len = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : len</span><br><span class="line">    x = <span class="number">360.</span>*<span class="built_in">rand</span>(<span class="number">48</span>, <span class="number">1</span>);</span><br><span class="line">    y = <span class="number">90.</span>*<span class="built_in">rand</span>(<span class="number">48</span>, <span class="number">1</span>);</span><br><span class="line">    sum = sum + Copy_3_of_totalH([x,y]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">av = sum / len</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>随机加扰动</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tic</span><br><span class="line"><span class="comment">% ret = [];</span></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">len = <span class="number">100000</span>;</span><br><span class="line">len1 = <span class="number">48</span>;</span><br><span class="line">minv = <span class="number">60</span>;</span><br><span class="line">maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : len</span><br><span class="line">    ret1 = ret;</span><br><span class="line">    ret1 = ret1 + <span class="number">5</span>*<span class="built_in">rand</span>(len1,<span class="number">2</span>)<span class="number">-2.5</span>;</span><br><span class="line">    tmp = Copy_3_of_totalH(ret1);</span><br><span class="line">    minv = <span class="built_in">min</span>(minv, tmp);</span><br><span class="line">    maxv = <span class="built_in">max</span>(maxv, tmp);</span><br><span class="line">    sum = sum + tmp;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">av = sum / len</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>随机加点</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">tic</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">len = <span class="number">100000</span>;</span><br><span class="line">minv = <span class="number">60</span>;</span><br><span class="line">maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : len</span><br><span class="line">    ret1 = ret;</span><br><span class="line">    x = <span class="number">360</span> * <span class="built_in">rand</span>;</span><br><span class="line">    y = <span class="number">90</span> * <span class="built_in">rand</span>;</span><br><span class="line">    ret1 = [ret1;x,y];</span><br><span class="line">    tmp = Copy_3_of_totalH(ret1);</span><br><span class="line">    minv = <span class="built_in">min</span>(minv, tmp);</span><br><span class="line">    maxv = <span class="built_in">max</span>(maxv, tmp);</span><br><span class="line">    sum = sum + tmp;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">av = sum / len</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><hr><p>画图 随机扰动</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.7714</span>,<span class="number">13.7110</span>,<span class="number">13.6724</span>],<span class="string">&#x27;-ksquare&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.7436</span>,<span class="number">13.6732</span>,<span class="number">13.6244</span>],<span class="string">&#x27;-o&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.6305</span>,<span class="number">13.5185</span>,<span class="number">13.4272</span>],<span class="string">&#x27;-^&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">xlim([<span class="number">43</span>, <span class="number">125</span>])</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.7311</span>,<span class="number">13.7311</span>],<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.7549</span>,<span class="number">13.7549</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span>,<span class="number">48</span>],[<span class="number">13.7311</span>,<span class="number">13.7549</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.6591</span>,<span class="number">13.6591</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.6844</span>,<span class="number">13.6844</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span>,<span class="number">80</span>],[<span class="number">13.6844</span>,<span class="number">13.6591</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.6115</span>,<span class="number">13.6115</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.6364</span>,<span class="number">13.6364</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span>,<span class="number">120</span>],[<span class="number">13.6115</span>,<span class="number">13.6364</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.5590</span>,<span class="number">13.5590</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.6914</span>,<span class="number">13.6914</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span>,<span class="number">48</span>],[<span class="number">13.6914</span>,<span class="number">13.5590</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.4549</span>,<span class="number">13.4549</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.5855</span>,<span class="number">13.5855</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span>,<span class="number">80</span>],[<span class="number">13.5855</span>,<span class="number">13.4549</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.3566</span>,<span class="number">13.3566</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.4927</span>,<span class="number">13.4927</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span>,<span class="number">120</span>],[<span class="number">13.3566</span>,<span class="number">13.4927</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">box on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;正方形网格点分布&#x27;</span>,<span class="string">&#x27;网格点附近扰动±1°&#x27;</span>,<span class="string">&#x27;网格点附近扰动±5°&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;KL熵&#x27;</span>);</span><br><span class="line">xticks([<span class="number">48</span> <span class="number">80</span> <span class="number">120</span>]);</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/clip_image002.jpg" alt="img"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.7714</span>,<span class="number">13.7110</span>,<span class="number">13.6724</span>],<span class="string">&#x27;-ksquare&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.7501</span>,<span class="number">13.6984</span>,<span class="number">13.6639</span>],<span class="string">&#x27;-o&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.6847</span>,<span class="number">13.6586</span>,<span class="number">13.6372</span>],<span class="string">&#x27;-^&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.5</span> <span class="number">0</span> <span class="number">0.8</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">xlim([<span class="number">43</span>, <span class="number">125</span>])</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.1914</span>,<span class="number">13.1914</span>],<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.7214</span>,<span class="number">13.7214</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span>,<span class="number">48</span>],[<span class="number">13.1914</span>,<span class="number">13.7214</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.3497</span>,<span class="number">13.3497</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.6806</span>,<span class="number">13.6806</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span>,<span class="number">80</span>],[<span class="number">13.3497</span>,<span class="number">13.6806</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.4646</span>,<span class="number">13.4646</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.6520</span>,<span class="number">13.6520</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span>,<span class="number">120</span>],[<span class="number">13.4646</span>,<span class="number">13.6520</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0</span> <span class="number">0.6</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"></span><br><span class="line">box on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;正方形网格点分布&#x27;</span>,<span class="string">&#x27;网格点附近扰动±1°&#x27;</span>,<span class="string">&#x27;网格点附近扰动±5°&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;KL熵&#x27;</span>);</span><br><span class="line">xticks([<span class="number">48</span> <span class="number">80</span> <span class="number">120</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.7714</span>,<span class="number">13.7110</span>,<span class="number">13.6724</span>],<span class="string">&#x27;-ksquare&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>([<span class="number">48</span>,<span class="number">80</span>,<span class="number">120</span>],[<span class="number">13.6630</span>,<span class="number">13.6456</span>,<span class="number">13.6286</span>],<span class="string">&#x27;-v&#x27;</span>,<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>])</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.1646</span>,<span class="number">13.1646</span>],<span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span><span class="number">-1.000</span>,<span class="number">48</span>+<span class="number">1.000</span>],[<span class="number">13.7697</span>,<span class="number">13.7697</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">48</span>,<span class="number">48</span>],[<span class="number">13.1646</span>,<span class="number">13.7697</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.3706</span>,<span class="number">13.3706</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span><span class="number">-1.000</span>,<span class="number">80</span>+<span class="number">1.000</span>],[<span class="number">13.7095</span>,<span class="number">13.7095</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">80</span>,<span class="number">80</span>],[<span class="number">13.3706</span>,<span class="number">13.7095</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.4553</span>,<span class="number">13.4553</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span><span class="number">-1.000</span>,<span class="number">120</span>+<span class="number">1.000</span>],[<span class="number">13.6715</span>,<span class="number">13.6715</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">line([<span class="number">120</span>,<span class="number">120</span>],[<span class="number">13.4553</span>,<span class="number">13.6715</span>],<span class="string">&#x27;color&#x27;</span>,[<span class="number">0.6</span> <span class="number">0.1</span> <span class="number">0.1</span>],<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">box on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;正方形网格点分布&#x27;</span>,<span class="string">&#x27;随机替换一个点&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;KL熵&#x27;</span>);</span><br><span class="line">xticks([<span class="number">48</span> <span class="number">80</span> <span class="number">120</span>]);</span><br></pre></td></tr></table></figure><p>随机替换一个点</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;tic;</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> </span><br><span class="line">    y = y + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( y &gt; <span class="number">90</span> ) </span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x = x + jiange;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ret(<span class="keyword">end</span>,:)=[];</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">len = <span class="number">100000</span>;</span><br><span class="line">minv = <span class="number">60</span>;</span><br><span class="line">maxv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : len</span><br><span class="line">    ret1 = ret;</span><br><span class="line">    x = <span class="number">360</span> * <span class="built_in">rand</span>;</span><br><span class="line">    y = <span class="number">90</span> * <span class="built_in">rand</span>;</span><br><span class="line">    ret1 = [ret1;x,y];</span><br><span class="line">    tmp = Copy_3_of_totalH(ret1);</span><br><span class="line">    minv = <span class="built_in">min</span>(minv, tmp);</span><br><span class="line">    <span class="keyword">if</span> ( tmp &gt; maxv ) </span><br><span class="line">    maxv = tmp;</span><br><span class="line">    x</span><br><span class="line">    y</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    sum = sum + tmp;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">av = sum / len</span><br><span class="line">toc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我本章的实验基于的是同n值的，因为n值大，KL熵小 ，不同n值不能说明均匀性。</p><hr><p>正三角形网格点旋转</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">rec = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    rec = [rec; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">d = <span class="number">15</span>;</span><br><span class="line">rec1(:,<span class="number">1</span>) = rec(:,<span class="number">1</span>)*<span class="built_in">cosd</span>(d) - rec(:,<span class="number">2</span>)*<span class="built_in">sind</span>(d);</span><br><span class="line">rec1(:,<span class="number">2</span>) = rec(:,<span class="number">1</span>)*<span class="built_in">sind</span>(d) + rec(:,<span class="number">2</span>)*<span class="built_in">cosd</span>(d);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-30</span> <span class="number">400</span>]);</span><br><span class="line">ylim([<span class="number">-30</span> <span class="number">140</span>]);</span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scatter</span>(rec1(:,<span class="number">1</span>), rec1(:,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">rec2 = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = -jiange *<span class="built_in">sqrt</span>(<span class="number">3</span>) ;</span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">360</span>+jiange &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    rec2 = [rec2; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span>+jiange ) </span><br><span class="line">        x = x<span class="number">-360</span> -jiange/<span class="number">2.0</span> - jiange;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">d = <span class="number">15</span>;</span><br><span class="line">rec3(:,<span class="number">1</span>) = rec2(:,<span class="number">1</span>)*<span class="built_in">cosd</span>(d) - rec2(:,<span class="number">2</span>)*<span class="built_in">sind</span>(d);</span><br><span class="line">rec3(:,<span class="number">2</span>) = rec2(:,<span class="number">1</span>)*<span class="built_in">sind</span>(d) + rec2(:,<span class="number">2</span>)*<span class="built_in">cosd</span>(d);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-30</span> <span class="number">400</span>]);</span><br><span class="line">ylim([<span class="number">-30</span> <span class="number">140</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(rec3(:,<span class="number">1</span>), rec3(:,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230228142912992.png" alt="image-20230228142912992"></p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">jiange = <span class="number">22.5</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">0</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">360</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">clf;</span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">100</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(ret(:,<span class="number">1</span>), ret(:,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>选取点建KD树， 对600个星点找最近邻 ，算出每个星的权值，再遍历一遍每个星，为每个星的空间不断替换最优值。遍历一遍也行</p><p>从哪个点找哪个点更快</p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">tic;</span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">jiange = <span class="number">360.0</span>/<span class="number">9</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">-0.001</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">359</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">length</span>(ret);</span><br><span class="line">tmp = <span class="built_in">ones</span>(n,<span class="number">1</span>)*<span class="number">360</span>;</span><br><span class="line">rev = <span class="built_in">ones</span>(n,<span class="number">2</span>)*<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Mdl = KDTreeSearcher(ret);</span><br><span class="line">kk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">    [nn,d] = knnsearch(Mdl,points(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>,kk+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> d &lt; tmp(nn)</span><br><span class="line">        tmp(nn) = d;</span><br><span class="line">        rev(nn,:) = points(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clf;</span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">100</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(ret(:,<span class="number">1</span>), ret(:,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">scatter</span>(points(:,<span class="number">1</span>), points(:,<span class="number">2</span>),<span class="number">5</span>)</span><br><span class="line"><span class="built_in">scatter</span>(rev(:,<span class="number">1</span>), rev(:,<span class="number">2</span>),<span class="number">50</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">toc;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230302142722831.png" alt="image-20230302142722831"></p><p>纯距离  </p><p>共27个</p><p>随机KL熵 11.7958</p><p>距离最近加权 13.4318   历时 0.078488 秒。</p><p>星等加权 随机 13.4006      ，总权值 -247.0324</p><p>优化后  13.5629  总权值 -195  最好的位移是 32.5583  6.7  历时25s</p><p>粒子50 迭代30  13.5537  -190.6025  位移30 7  30.2979600360942    7.02950188386670  25s</p><p>粒子15迭代10  13.5537  -190.6025  位移30.1858 6.9537   历时 2.705201 秒。</p><p>-196.325020765185    -196.325020765185    -196.325020765185    -196.325020765185    -191.733361560326    -190.655450867045    -190.655450867045    -190.655450867045    -190.655450867045    -190.655450867045</p><p>   暴力点 13.5557   -190.6024   30.299  7.036   300粒子500迭代  历时 2638.095214 秒。</p><p>模拟退火最大化 13.6253   历时 74.406457 秒。</p><p>模拟点 13.7632</p><hr><p>权值 = -距离 + -星等  ，星等越亮，越小，-星等越大，距离越近，越好，-距离越大，越好 权值越大</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Mdl = KDTreeSearcher(ret);</span><br><span class="line">kk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">    [nn,d] = knnsearch(Mdl,points(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>,kk+<span class="number">1</span>);</span><br><span class="line">    value = -d - points(<span class="built_in">i</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> value &gt; tmp(nn)</span><br><span class="line">        tmp(nn) = value;</span><br><span class="line">        rev(nn,:) = points(<span class="built_in">i</span>,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">toc;</span><br><span class="line">Copy_3_of_totalH(rev)</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230302144029305.png" alt="image-20230302144029305"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;  close all;clc;</span><br><span class="line">tic;</span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">points = M(:, <span class="number">2</span>:<span class="number">4</span>);</span><br><span class="line">jiange = <span class="number">360.0</span>/<span class="number">10</span>;</span><br><span class="line">ret = [];</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">360</span> &amp;&amp; y &lt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">-0.0000001</span></span><br><span class="line">    ret = [ret; x, y];</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line">    x = x + jiange;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">359.9999999</span> ) </span><br><span class="line">        x = x - <span class="number">360</span> -jiange/<span class="number">2.0</span>;</span><br><span class="line">        y = y + jiange/<span class="number">2.0</span>*<span class="built_in">sqrt</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span>;                           <span class="comment">% 初始种群个数</span></span><br><span class="line">d = <span class="number">2</span>;                             <span class="comment">% 空间维数（参看上述的函数表达式）</span></span><br><span class="line">ger = <span class="number">30</span>;                         <span class="comment">% 最大迭代次数     </span></span><br><span class="line">plimit = [<span class="number">0</span>,jiange;<span class="number">0</span>,<span class="number">90</span>-ret(<span class="keyword">end</span>)];              <span class="comment">% 设置位置参数限制(矩阵的形式可以多维)，现在2X2矩阵</span></span><br><span class="line">vlimit = [<span class="number">-1.5</span>, <span class="number">1.5</span>;<span class="number">-1.5</span>, <span class="number">1.5</span>];    <span class="comment">% 设置速度限制</span></span><br><span class="line">w = <span class="number">0.8</span>;                           <span class="comment">% 惯性权重,个体历史成绩对现在的影响0.5~1之间</span></span><br><span class="line">c1 = <span class="number">0.5</span>;                          <span class="comment">% 自我学习因子</span></span><br><span class="line">c2 = <span class="number">0.5</span>;                          <span class="comment">% 群体学习因子 </span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:d</span><br><span class="line">    xx(:,<span class="built_in">i</span>) = plimit(<span class="built_in">i</span>, <span class="number">1</span>) + (plimit(<span class="built_in">i</span>, <span class="number">2</span>) - plimit(<span class="built_in">i</span>, <span class="number">1</span>)) * <span class="built_in">rand</span>(N, <span class="number">1</span>);<span class="comment">%初始种群的位置</span></span><br><span class="line"><span class="keyword">end</span>                              <span class="comment">%rand(N,1)产生N行一列范围在1之内的随机数</span></span><br><span class="line">                              <span class="comment">%第一列,第二列：x=0+（20-0）*（1之内的随机数）                                    </span></span><br><span class="line">v = <span class="built_in">rand</span>(N, d);                   <span class="comment">% 初始种群的速度,500行2列分别在两个维度上</span></span><br><span class="line">xm = xx;                           <span class="comment">% 每个个体的历史最佳位置</span></span><br><span class="line">ym = <span class="built_in">zeros</span>(<span class="number">1</span>, d);                 <span class="comment">% 种群的历史最佳位置，两个维度，设置为0</span></span><br><span class="line">fxm = <span class="built_in">ones</span>(N, <span class="number">1</span>) * (-<span class="built_in">inf</span>);                <span class="comment">% 每个个体的历史最佳适应度，设置为0</span></span><br><span class="line">fym = -<span class="built_in">inf</span>;                       <span class="comment">% 种群历史最佳适应度,求最大值先设置成负无穷</span></span><br><span class="line">kk = <span class="number">0</span>;</span><br><span class="line">iter = <span class="number">1</span>;  </span><br><span class="line">n = <span class="built_in">length</span>(ret);</span><br><span class="line">tmp = <span class="built_in">ones</span>(n,<span class="number">1</span>)*(<span class="number">-500</span>);</span><br><span class="line">rev = <span class="built_in">ones</span>(n,<span class="number">2</span>)*(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">fx = <span class="built_in">ones</span>(n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> iter &lt;= ger</span><br><span class="line"></span><br><span class="line"><span class="comment">%     fx = f(xx(:,1),xx(:,2));         % 代入x中的二维数据，算出个体当前适应度,为500行1列的数据   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:N                   <span class="comment">%对每一个个体做判断</span></span><br><span class="line">        ret1 = ret + xx(<span class="built_in">i</span>,:);</span><br><span class="line">        ret1(ret1(:,<span class="number">1</span>) &gt; <span class="number">360</span>) = ret1(ret1(:,<span class="number">1</span>) &gt; <span class="number">360</span>) - <span class="number">360</span>;</span><br><span class="line">        </span><br><span class="line">        Mdl = KDTreeSearcher(ret1);</span><br><span class="line">        tmp = <span class="built_in">ones</span>(n,<span class="number">1</span>)*(<span class="number">-500</span>);</span><br><span class="line">        rev = <span class="built_in">ones</span>(n,<span class="number">2</span>)*(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> ii = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">          </span><br><span class="line">            [nn,ddd] = knnsearch(Mdl,points(ii,<span class="number">1</span>:<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>,kk+<span class="number">1</span>);</span><br><span class="line">            value = -ddd - points(ii,<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> value &gt; tmp(nn)</span><br><span class="line">                tmp(nn) = value;</span><br><span class="line">                rev(nn,:) = points(ii,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        fx(<span class="built_in">i</span>) = sum(tmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fxm(<span class="built_in">i</span>) &lt; fx(<span class="built_in">i</span>)           <span class="comment">%如果每个个体的历史最佳适应度小于个体当前适应度</span></span><br><span class="line">            fxm(<span class="built_in">i</span>) = fx(<span class="built_in">i</span>);         <span class="comment">% 更新个体历史最佳适应度,第一轮就是把小于零的清除</span></span><br><span class="line">            xm(<span class="built_in">i</span>,:) = xx(<span class="built_in">i</span>,:);       <span class="comment">% 更新个体历史最佳位置</span></span><br><span class="line">        <span class="keyword">end</span> </span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fym &lt; <span class="built_in">max</span>(fxm)                  <span class="comment">%种群历史最佳适应度小于个体里面最佳适应度的最大值</span></span><br><span class="line">            [fym, nmax] = <span class="built_in">max</span>(fxm);    <span class="comment">% 更新群体历史最佳适应度,取出最大适应度的值和所在行数即位置</span></span><br><span class="line">            ym = xm(nmax, :);          <span class="comment">% 更新群体历史最佳位置</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">     v = v * w + c1 * <span class="built_in">rand</span> *(xm - xx) + c2 * <span class="built_in">rand</span> *(<span class="built_in">repmat</span>(ym, N, <span class="number">1</span>) - xx); <span class="comment">% 速度更新公式,repmat函数把ym矩阵扩充成N行1列</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">%%边界速度处理</span></span><br><span class="line">     <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:d </span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">            <span class="keyword">if</span>  v(<span class="built_in">j</span>,<span class="built_in">i</span>)&gt;vlimit(<span class="built_in">i</span>,<span class="number">2</span>);      <span class="comment">%如果速度大于边界速度，则把速度拉回边界</span></span><br><span class="line">                v(<span class="built_in">j</span>,<span class="built_in">i</span>)=vlimit(<span class="built_in">i</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span>  v(<span class="built_in">j</span>,<span class="built_in">i</span>) &lt; vlimit(<span class="built_in">i</span>,<span class="number">1</span>)     <span class="comment">%如果速度小于边界速度，则把速度拉回边界</span></span><br><span class="line">                v(<span class="built_in">j</span>,<span class="built_in">i</span>)=vlimit(<span class="built_in">i</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">     <span class="keyword">end</span>      </span><br><span class="line">       </span><br><span class="line">     xx = xx + v;                          <span class="comment">% 位置更新</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:d </span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:N</span><br><span class="line">            <span class="keyword">if</span>  xx(<span class="built_in">j</span>,<span class="built_in">i</span>)&gt;plimit(<span class="built_in">i</span>,<span class="number">2</span>)</span><br><span class="line">                xx(<span class="built_in">j</span>,<span class="built_in">i</span>)=plimit(<span class="built_in">i</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span>  xx(<span class="built_in">j</span>,<span class="built_in">i</span>) &lt; plimit(<span class="built_in">i</span>,<span class="number">1</span>)</span><br><span class="line">                xx(<span class="built_in">j</span>,<span class="built_in">i</span>)=plimit(<span class="built_in">i</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      </span><br><span class="line">      record(iter) = fym;            <span class="comment">%记录最大值</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">%    if times &gt;= 10</span></span><br><span class="line"><span class="comment">%         cla;                    %清除轴线图形</span></span><br><span class="line"><span class="comment">%         mesh(x0_1, x0_2, y0);</span></span><br><span class="line"><span class="comment">%         plot3(x(:,1),x(:,2),f(x(:,1),x(:,2)), &#x27;ro&#x27;);title(&#x27;状态位置变化&#x27;);</span></span><br><span class="line"><span class="comment">%         pause(0.5);</span></span><br><span class="line"><span class="comment">%        times=0;</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line">    iter = iter+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">toc;</span><br><span class="line"></span><br><span class="line">ret2 = ret + ym;</span><br><span class="line">ret2(ret2(:,<span class="number">1</span>) &gt; <span class="number">360</span>) = ret2(ret2(:,<span class="number">1</span>) &gt; <span class="number">360</span>) - <span class="number">360</span>;</span><br><span class="line">Mdl = KDTreeSearcher(ret2);</span><br><span class="line">tmp = <span class="built_in">ones</span>(n,<span class="number">1</span>)*(<span class="number">-500</span>);</span><br><span class="line">rev = <span class="built_in">ones</span>(n,<span class="number">2</span>)*(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">    [nn,ddd] = knnsearch(Mdl,points(ii,<span class="number">1</span>:<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>,kk+<span class="number">1</span>);</span><br><span class="line">    value = -ddd - points(ii,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> value &gt; tmp(nn)</span><br><span class="line">        tmp(nn) = value;</span><br><span class="line">        rev(nn,:) = points(ii,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">aaan = sum(tmp);</span><br><span class="line"></span><br><span class="line">Copy_3_of_totalH(rev)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clf;</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">scatter</span>(ret2(:,<span class="number">1</span>), ret2(:,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">p2 = <span class="built_in">scatter</span>(points(:,<span class="number">1</span>), points(:,<span class="number">2</span>),<span class="number">5</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">p3 = <span class="built_in">scatter</span>(rev(:,<span class="number">1</span>), rev(:,<span class="number">2</span>),<span class="number">50</span>,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">120</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>([p1, p2,p3],&#123;<span class="string">&#x27;三角形网格点&#x27;</span>,<span class="string">&#x27;上半天区所有点&#x27;</span>,<span class="string">&#x27;距离最近点&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230302215728987.png" alt="image-20230302215728987"></p><p>距离-星等加权法</p><p>基于正三角形网格点的均匀选取方法，寻求变换</p><p>基于粒子群算法的最大化总体评价权值</p><p>总体评价权值<em>V</em></p><p>综合评价权值</p><p>贡献度</p><hr><p>计算实时最远距离</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">dddd = <span class="number">0</span>;</span><br><span class="line">tmp =[];</span><br><span class="line">iii = <span class="number">0</span>;</span><br><span class="line">tic;</span><br><span class="line">Mdl = KDTreeSearcher(rev);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ii = <span class="number">1</span> : <span class="built_in">length</span>(points)</span><br><span class="line">    [nn,ddd] = knnsearch(Mdl, points(ii,<span class="number">1</span>:<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> ( ddd &gt; points(ii,<span class="number">1</span>) )</span><br><span class="line">    [~, dd] = knnsearch(Mdl,[points(ii,<span class="number">1</span>) + <span class="number">360.0</span>, points(ii, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    ddd = <span class="built_in">min</span>(ddd, dd);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> (ddd &gt; <span class="number">360</span> - points(ii,<span class="number">1</span>) )</span><br><span class="line">    [~, dd] = knnsearch(Mdl,[points(ii,<span class="number">1</span>) - <span class="number">360.0</span>, points(ii, <span class="number">2</span>)],<span class="string">&#x27;k&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">    ddd = <span class="built_in">min</span>(ddd, dd);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    <span class="keyword">if</span> ddd &gt; dddd</span><br><span class="line">        dddd = ddd;</span><br><span class="line">        iii = ii;</span><br><span class="line">        tmp = points(ii,<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">toc;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p4 = <span class="built_in">scatter</span>(tmp(<span class="number">1</span>), tmp(<span class="number">2</span>),<span class="string">&#x27;k&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>([p1, p2,p3, p4],&#123;<span class="string">&#x27;三角形网格点&#x27;</span>,<span class="string">&#x27;上半天区所有点&#x27;</span>,<span class="string">&#x27;距离最近点&#x27;</span>,<span class="string">&#x27;增补的一个星&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">pdist([<span class="number">137.3420</span>  , <span class="number">87.7710</span>;<span class="number">117.085</span>,<span class="number">73.8926</span>],<span class="string">&#x27;euclidean&#x27;</span>)</span><br><span class="line">pdist([<span class="number">137.3420</span>  , <span class="number">87.7710</span>;<span class="number">158.055</span>,<span class="number">72.5033</span>],<span class="string">&#x27;euclidean&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><p>15<em>(cosd(weidu) </em> cosd(A) / tand(90-h) + sind(weidu))</p><hr><p>重新做一下星图软件</p><p>假设五等星 1471个星</p><p>纯计算方位角 需要10ms，显示成表格 12ms  显示出星图 229ms （加上地平380ms） 加个判断显示在地平上的 95ms </p><p>显示表格+视赤道 14ms  235ms</p><p>6等星 纯计算方位角 需要30ms，显示成表格 36ms  显示出星图 </p><hr><p>方位角误差</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function  requation()</span></span><br><span class="line"></span><br><span class="line">clc;clear;</span><br><span class="line">load data1.csv</span><br><span class="line"></span><br><span class="line">azimuth=data1(:,<span class="number">1</span>)/<span class="number">180</span>*<span class="built_in">pi</span>; <span class="comment">%#ok&lt;*NODEF&gt;</span></span><br><span class="line">altitude=data1(:,<span class="number">2</span>)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">deltaA=<span class="number">0</span>-data1(:,<span class="number">3</span>)/<span class="number">3600.0</span>; <span class="comment">% °</span></span><br><span class="line">deltaH=<span class="number">0</span>-data1(:,<span class="number">4</span>)/<span class="number">3600.0</span>; </span><br><span class="line"></span><br><span class="line">X=[<span class="number">0.</span>*altitude+<span class="number">1</span> <span class="number">0.</span>*altitude -<span class="built_in">cos</span>(azimuth).*<span class="built_in">tan</span>(altitude) -<span class="built_in">sin</span>(azimuth).*<span class="built_in">tan</span>(altitude) <span class="built_in">sec</span>(altitude) -<span class="built_in">tan</span>(altitude) <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude];</span><br><span class="line">y=[<span class="number">0.</span>*altitude <span class="number">0.</span>*altitude+<span class="number">1</span> <span class="built_in">sin</span>(azimuth) -<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">cot</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) altitude.*<span class="built_in">sin</span>(azimuth) altitude.*<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth)];</span><br><span class="line"></span><br><span class="line">A=[X;y];</span><br><span class="line">Y=[deltaA;deltaH]; <span class="comment">% °</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%Res 为方程系数 Y° = A(弧度) * Res -&gt; </span></span><br><span class="line">Res = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line"><span class="comment">%E 为残差</span></span><br><span class="line">E = (A*Res - Y)*<span class="number">3600</span>;</span><br><span class="line"><span class="comment">%MSE 为平均均方误差</span></span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E))</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultXISHU.txt Res -ascii; </span></span><br><span class="line">file1=fopen(<span class="string">&#x27;ResultXISHU.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Res)</span><br><span class="line">   fprintf(file1,<span class="string">&#x27;%5.5f\r\n&#x27;</span>,Res(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">EA = E(<span class="number">1</span>:<span class="number">64</span>);</span><br><span class="line">EE = E(<span class="number">65</span>:<span class="keyword">end</span>);</span><br><span class="line">RMSA = <span class="built_in">sqrt</span>(mse(EA));</span><br><span class="line"></span><br><span class="line">RMSE = <span class="built_in">sqrt</span>(mse(EE));</span><br><span class="line"><span class="comment">% aa = </span></span><br><span class="line"></span><br><span class="line">fclose(file1);</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultRMS.txt RMS -ascii; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> :<span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> data1(<span class="built_in">i</span>,<span class="number">1</span>) &lt; <span class="number">0</span> </span><br><span class="line">        data1(<span class="built_in">i</span>,<span class="number">1</span>) = data1(<span class="built_in">i</span>,<span class="number">1</span>) + <span class="number">360</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.5</span> <span class="number">0.8</span> <span class="number">0.5</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正前的方位角偏差&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">-80</span> <span class="number">50</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;误差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">1</span>), data1(:,<span class="number">3</span>), <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.05</span> <span class="number">0.8</span> <span class="number">0.45</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正后的方位角残差&#x27;</span>)</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">-50</span> <span class="number">50</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">-50</span> <span class="number">-40</span> <span class="number">-30</span> <span class="number">-20</span> <span class="number">-10</span> <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">50</span>])</span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;残差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">1</span>), EA, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function  requation()</span></span><br><span class="line"></span><br><span class="line">clc;clear;</span><br><span class="line">load data1.csv</span><br><span class="line"></span><br><span class="line">azimuth=data1(:,<span class="number">1</span>)/<span class="number">180</span>*<span class="built_in">pi</span>; <span class="comment">%#ok&lt;*NODEF&gt;</span></span><br><span class="line">altitude=data1(:,<span class="number">2</span>)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">deltaA=<span class="number">0</span>-data1(:,<span class="number">3</span>)/<span class="number">3600.0</span>; <span class="comment">% °</span></span><br><span class="line">deltaH=<span class="number">0</span>-data1(:,<span class="number">4</span>)/<span class="number">3600.0</span>; </span><br><span class="line"></span><br><span class="line">X=[<span class="number">0.</span>*altitude+<span class="number">1</span> <span class="number">0.</span>*altitude -<span class="built_in">cos</span>(azimuth).*<span class="built_in">tan</span>(altitude) -<span class="built_in">sin</span>(azimuth).*<span class="built_in">tan</span>(altitude) <span class="built_in">sec</span>(altitude) -<span class="built_in">tan</span>(altitude) <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude];</span><br><span class="line">y=[<span class="number">0.</span>*altitude <span class="number">0.</span>*altitude+<span class="number">1</span> <span class="built_in">sin</span>(azimuth) -<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">cot</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) altitude.*<span class="built_in">sin</span>(azimuth) altitude.*<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth)];</span><br><span class="line"></span><br><span class="line">A=[X;y];</span><br><span class="line">Y=[deltaA;deltaH]; <span class="comment">% °</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%Res 为方程系数 Y° = A(弧度) * Res -&gt; </span></span><br><span class="line">Res = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line"><span class="comment">%E 为残差</span></span><br><span class="line">E = (A*Res - Y)*<span class="number">3600</span>;</span><br><span class="line">E = E / <span class="number">2.0</span>;</span><br><span class="line"><span class="comment">%MSE 为平均均方误差</span></span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E))</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultXISHU.txt Res -ascii; </span></span><br><span class="line">file1=fopen(<span class="string">&#x27;ResultXISHU.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Res)</span><br><span class="line">   fprintf(file1,<span class="string">&#x27;%5.5f\r\n&#x27;</span>,Res(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">EA = E(<span class="number">1</span>:<span class="number">64</span>);</span><br><span class="line">EE = E(<span class="number">65</span>:<span class="keyword">end</span>);</span><br><span class="line"></span><br><span class="line">RMSA = <span class="built_in">sqrt</span>(mse(EA));</span><br><span class="line"></span><br><span class="line">RMSE = <span class="built_in">sqrt</span>(mse(EE));</span><br><span class="line"><span class="comment">% aa = </span></span><br><span class="line"></span><br><span class="line">fclose(file1);</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultRMS.txt RMS -ascii; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> :<span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> data1(<span class="built_in">i</span>,<span class="number">1</span>) &lt; <span class="number">0</span> </span><br><span class="line">        data1(<span class="built_in">i</span>,<span class="number">1</span>) = data1(<span class="built_in">i</span>,<span class="number">1</span>) + <span class="number">360</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.5</span> <span class="number">0.8</span> <span class="number">0.5</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正前的方位角偏差&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">grid on;</span><br><span class="line">box on; </span><br><span class="line">axis equal;</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">-80</span> <span class="number">50</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;误差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">1</span>), data1(:,<span class="number">3</span>), <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.8</span> <span class="number">0.3</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正后的方位角残差&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">10</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">-50</span> <span class="number">-40</span> <span class="number">-30</span> <span class="number">-20</span> <span class="number">-10</span> <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span> <span class="number">50</span>])</span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;残差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">2</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">1</span>), EA, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function  requation()</span></span><br><span class="line"></span><br><span class="line">clc;clear;</span><br><span class="line">load data1.csv</span><br><span class="line"></span><br><span class="line">azimuth=data1(:,<span class="number">1</span>)/<span class="number">180</span>*<span class="built_in">pi</span>; <span class="comment">%#ok&lt;*NODEF&gt;</span></span><br><span class="line">altitude=data1(:,<span class="number">2</span>)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">deltaA=<span class="number">0</span>-data1(:,<span class="number">3</span>)/<span class="number">3600.0</span>; <span class="comment">% °</span></span><br><span class="line">deltaH=<span class="number">0</span>-data1(:,<span class="number">4</span>)/<span class="number">3600.0</span>; </span><br><span class="line"></span><br><span class="line">X=[<span class="number">0.</span>*altitude+<span class="number">1</span> <span class="number">0.</span>*altitude -<span class="built_in">cos</span>(azimuth).*<span class="built_in">tan</span>(altitude) -<span class="built_in">sin</span>(azimuth).*<span class="built_in">tan</span>(altitude) <span class="built_in">sec</span>(altitude) -<span class="built_in">tan</span>(altitude) <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude];</span><br><span class="line">y=[<span class="number">0.</span>*altitude <span class="number">0.</span>*altitude+<span class="number">1</span> <span class="built_in">sin</span>(azimuth) -<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">cot</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) altitude.*<span class="built_in">sin</span>(azimuth) altitude.*<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth)];</span><br><span class="line"></span><br><span class="line">A=[X;y];</span><br><span class="line">Y=[deltaA;deltaH]; <span class="comment">% °</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%Res 为方程系数 Y° = A(弧度) * Res -&gt; </span></span><br><span class="line">Res = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line"><span class="comment">%E 为残差</span></span><br><span class="line">E = (A*Res - Y)*<span class="number">3600</span>;</span><br><span class="line"><span class="comment">%MSE 为平均均方误差</span></span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E))</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultXISHU.txt Res -ascii; </span></span><br><span class="line">file1=fopen(<span class="string">&#x27;ResultXISHU.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Res)</span><br><span class="line">   fprintf(file1,<span class="string">&#x27;%5.5f\r\n&#x27;</span>,Res(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">EA = E(<span class="number">1</span>:<span class="number">64</span>);</span><br><span class="line">EE = E(<span class="number">65</span>:<span class="keyword">end</span>);</span><br><span class="line">RMSA = <span class="built_in">sqrt</span>(mse(EA));</span><br><span class="line"></span><br><span class="line">RMSE = <span class="built_in">sqrt</span>(mse(EE));</span><br><span class="line"><span class="comment">% aa = </span></span><br><span class="line"></span><br><span class="line">fclose(file1);</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultRMS.txt RMS -ascii; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% for i = 1 :64</span></span><br><span class="line"><span class="comment">%     if data1(i,1) &lt; 0 </span></span><br><span class="line"><span class="comment">%         data1(i,1) = data1(i,1) + 360;</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.55</span> <span class="number">0.8</span> <span class="number">0.4</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正前的高度角偏差&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">300</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">15</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]);</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;误差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">2</span>), data1(:,<span class="number">4</span>), <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.8</span> <span class="number">0.35</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正后的高度角残差&#x27;</span>)</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">ylim([<span class="number">-20</span> <span class="number">20</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">15</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]);</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;残差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data1(:,<span class="number">2</span>), EE, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function  requation()</span></span><br><span class="line"></span><br><span class="line">clc;clear;</span><br><span class="line">load data2.csv</span><br><span class="line"></span><br><span class="line">azimuth=data2(:,<span class="number">1</span>)/<span class="number">180</span>*<span class="built_in">pi</span>; <span class="comment">%#ok&lt;*NODEF&gt;</span></span><br><span class="line">altitude=data2(:,<span class="number">2</span>)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">deltaA=<span class="number">0</span>-data2(:,<span class="number">3</span>)/<span class="number">3600.0</span>; <span class="comment">% °</span></span><br><span class="line">deltaH=<span class="number">0</span>-data2(:,<span class="number">5</span>)/<span class="number">3600.0</span>; </span><br><span class="line"></span><br><span class="line">X=[<span class="number">0.</span>*altitude+<span class="number">1</span> <span class="number">0.</span>*altitude -<span class="built_in">cos</span>(azimuth).*<span class="built_in">tan</span>(altitude) -<span class="built_in">sin</span>(azimuth).*<span class="built_in">tan</span>(altitude) <span class="built_in">sec</span>(altitude) -<span class="built_in">tan</span>(altitude) <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude];</span><br><span class="line">y=[<span class="number">0.</span>*altitude <span class="number">0.</span>*altitude+<span class="number">1</span> <span class="built_in">sin</span>(azimuth) -<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">cot</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) altitude.*<span class="built_in">sin</span>(azimuth) altitude.*<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth)];</span><br><span class="line"></span><br><span class="line">A=[X;y];</span><br><span class="line">Y=[deltaA;deltaH]; <span class="comment">% °</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%Res 为方程系数 Y° = A(弧度) * Res -&gt; </span></span><br><span class="line">Res = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line"><span class="comment">%E 为残差</span></span><br><span class="line">E = (A*Res - Y)*<span class="number">3600</span>;</span><br><span class="line">E = E/<span class="number">2.0</span>;</span><br><span class="line"><span class="comment">%MSE 为平均均方误差</span></span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E))</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultXISHU.txt Res -ascii; </span></span><br><span class="line">file1=fopen(<span class="string">&#x27;ResultXISHU.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Res)</span><br><span class="line">   fprintf(file1,<span class="string">&#x27;%5.5f\r\n&#x27;</span>,Res(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">EA = E(<span class="number">1</span>:<span class="number">64</span>);</span><br><span class="line">EE = E(<span class="number">65</span>:<span class="keyword">end</span>);</span><br><span class="line">RMSA = <span class="built_in">sqrt</span>(mse(EA));</span><br><span class="line"></span><br><span class="line">RMSE = <span class="built_in">sqrt</span>(mse(EE));</span><br><span class="line"><span class="comment">% aa = </span></span><br><span class="line"></span><br><span class="line">fclose(file1);</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultRMS.txt RMS -ascii; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% for i = 1 :64</span></span><br><span class="line"><span class="comment">%     if data2(i,1) &lt; 0 </span></span><br><span class="line"><span class="comment">%         data2(i,1) = data2(i,1) + 360;</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.55</span> <span class="number">0.8</span> <span class="number">0.4</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正前的高度角偏差&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">grid on;</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">ylim([<span class="number">-100</span> <span class="number">200</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">15</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]);</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;误差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data2(:,<span class="number">2</span>), data2(:,<span class="number">5</span>), <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.8</span> <span class="number">0.33</span>]);</span><br><span class="line">title(<span class="string">&#x27;模型校正后的高度角残差&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>,<span class="string">&#x27;FontSize&#x27;</span>,<span class="number">12</span>)</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">0</span> <span class="number">90</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">10</span>]);</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">15</span> <span class="number">30</span> <span class="number">45</span> <span class="number">60</span> <span class="number">75</span> <span class="number">90</span>]);</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;高度角&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;残差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">5</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data2(:,<span class="number">2</span>), EE, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line">xtickformat(<span class="string">&#x27;degrees&#x27;</span>)</span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230323111042404.png" alt="image-20230323111042404"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% function  requation()</span></span><br><span class="line"></span><br><span class="line">clc;clear;</span><br><span class="line">load data2.csv</span><br><span class="line"></span><br><span class="line">azimuth=data2(:,<span class="number">1</span>)/<span class="number">180</span>*<span class="built_in">pi</span>; <span class="comment">%#ok&lt;*NODEF&gt;</span></span><br><span class="line">altitude=data2(:,<span class="number">2</span>)/<span class="number">180</span>*<span class="built_in">pi</span>;</span><br><span class="line">deltaA=<span class="number">0</span>-data2(:,<span class="number">3</span>)/<span class="number">3600.0</span>; <span class="comment">% °</span></span><br><span class="line">deltaH=<span class="number">0</span>-data2(:,<span class="number">5</span>)/<span class="number">3600.0</span>; </span><br><span class="line"></span><br><span class="line">X=[<span class="number">0.</span>*altitude+<span class="number">1</span> <span class="number">0.</span>*altitude -<span class="built_in">cos</span>(azimuth).*<span class="built_in">tan</span>(altitude) -<span class="built_in">sin</span>(azimuth).*<span class="built_in">tan</span>(altitude) <span class="built_in">sec</span>(altitude) -<span class="built_in">tan</span>(altitude) <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth).*<span class="built_in">sec</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude];</span><br><span class="line">y=[<span class="number">0.</span>*altitude <span class="number">0.</span>*altitude+<span class="number">1</span> <span class="built_in">sin</span>(azimuth) -<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">cot</span>(altitude) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(azimuth) <span class="built_in">cos</span>(azimuth) altitude.*<span class="built_in">sin</span>(azimuth) altitude.*<span class="built_in">cos</span>(azimuth) <span class="number">0.</span>*altitude <span class="number">0.</span>*altitude <span class="built_in">sin</span>(<span class="number">2.</span>*azimuth) <span class="built_in">cos</span>(<span class="number">2.</span>*azimuth)];</span><br><span class="line"></span><br><span class="line">A=[X;y];</span><br><span class="line">Y=[deltaA;deltaH]; <span class="comment">% °</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%Res 为方程系数 Y° = A(弧度) * Res -&gt; </span></span><br><span class="line">Res = inv(A&#x27;*A)*A&#x27;*Y;</span><br><span class="line"><span class="comment">%E 为残差</span></span><br><span class="line">E = (A*Res - Y)*<span class="number">3600</span>;</span><br><span class="line"><span class="comment">%MSE 为平均均方误差</span></span><br><span class="line">RMS = <span class="built_in">sqrt</span>(mse(E))</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultXISHU.txt Res -ascii; </span></span><br><span class="line">file1=fopen(<span class="string">&#x27;ResultXISHU.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(Res)</span><br><span class="line">   fprintf(file1,<span class="string">&#x27;%5.5f\r\n&#x27;</span>,Res(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">EA = E(<span class="number">1</span>:<span class="number">64</span>);</span><br><span class="line">EE = E(<span class="number">65</span>:<span class="keyword">end</span>);</span><br><span class="line">RMSA = <span class="built_in">sqrt</span>(mse(EA));</span><br><span class="line"></span><br><span class="line">RMSE = <span class="built_in">sqrt</span>(mse(EE));</span><br><span class="line"><span class="comment">% aa = </span></span><br><span class="line"></span><br><span class="line">fclose(file1);</span><br><span class="line"><span class="comment">%输出 到TXT文件 科学计算法</span></span><br><span class="line"><span class="comment">%save ResultRMS.txt RMS -ascii; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> :<span class="number">64</span></span><br><span class="line">    <span class="keyword">if</span> data2(<span class="built_in">i</span>,<span class="number">1</span>) &lt; <span class="number">0</span> </span><br><span class="line">        data2(<span class="built_in">i</span>,<span class="number">1</span>) = data2(<span class="built_in">i</span>,<span class="number">1</span>) + <span class="number">360</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.55</span> <span class="number">0.8</span> <span class="number">0.4</span>]);</span><br><span class="line">title(<span class="string">&#x27;指向校正前高度角误差分布图&#x27;</span>,FontWeight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">-80</span> <span class="number">80</span>]);</span><br><span class="line">ylim([<span class="number">-100</span> <span class="number">200</span>]);</span><br><span class="line">xticks([<span class="number">-80</span> <span class="number">-60</span> <span class="number">-40</span> <span class="number">-20</span>  <span class="number">0</span>  <span class="number">20</span>  <span class="number">40</span> <span class="number">60</span> <span class="number">80</span>])</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;校正前方位角偏差（角秒）&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;校正前高度角偏差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line">r = pdist([[<span class="number">0</span>,<span class="number">0</span>];[<span class="number">50</span>,<span class="number">0</span>]],<span class="string">&#x27;euclidean&#x27;</span>);</span><br><span class="line">p1 = rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">0</span>-r,<span class="number">0</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">r = pdist([[<span class="number">0</span>,<span class="number">0</span>];[<span class="number">150</span>,<span class="number">0</span>]],<span class="string">&#x27;euclidean&#x27;</span>);</span><br><span class="line">p2 = rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">0</span>-r,<span class="number">0</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(data2(:,<span class="number">3</span>), data2(:,<span class="number">5</span>), <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line">a = <span class="built_in">plot</span>([[<span class="number">1000</span>,<span class="number">2000</span>],[<span class="number">1000</span>,<span class="number">2000</span>]],<span class="string">&#x27;--k&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">b = <span class="built_in">plot</span>([[<span class="number">1000</span>,<span class="number">2000</span>],[<span class="number">1000</span>,<span class="number">2000</span>]],<span class="string">&#x27;-.k&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">legend</span>([a, b],&#123;<span class="string">&#x27;50 arcsec&#x27;</span>,<span class="string">&#x27;150 arcsec&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Position&#x27;</span>,[<span class="number">0.1</span> <span class="number">0.1</span> <span class="number">0.8</span> <span class="number">0.35</span>]);</span><br><span class="line">title(<span class="string">&#x27;指向校正后高度角残差分布图&#x27;</span>,FontWeight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">box on; </span><br><span class="line"><span class="comment">% axis equal;</span></span><br><span class="line">xlim([<span class="number">-60</span> <span class="number">60</span>]);</span><br><span class="line">ylim([<span class="number">-20</span> <span class="number">20</span>]);</span><br><span class="line">xticks([<span class="number">-80</span> <span class="number">-60</span> <span class="number">-40</span> <span class="number">-20</span>  <span class="number">0</span>  <span class="number">20</span>  <span class="number">40</span> <span class="number">60</span> <span class="number">80</span>])</span><br><span class="line"><span class="comment">% yticks([0 30 60 90])</span></span><br><span class="line">xlabel(<span class="string">&#x27;校正后方位角残差（角秒）&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;校正后高度角残差（角秒）&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"></span><br><span class="line">r = pdist([[<span class="number">0</span>,<span class="number">0</span>];[<span class="number">10</span>,<span class="number">0</span>]],<span class="string">&#x27;euclidean&#x27;</span>);</span><br><span class="line">p1 = rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">0</span>-r,<span class="number">0</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">r = pdist([[<span class="number">0</span>,<span class="number">0</span>];[<span class="number">15</span>,<span class="number">0</span>]],<span class="string">&#x27;euclidean&#x27;</span>);</span><br><span class="line">p2 = rectangle(<span class="string">&#x27;position&#x27;</span>,[<span class="number">0</span>-r,<span class="number">0</span>-r,<span class="number">2</span>*r,<span class="number">2</span>*r],<span class="string">&#x27;curvature&#x27;</span>,[<span class="number">1</span>,<span class="number">1</span>],<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;-.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(EA, EE, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">% scatter(points(best_way,1), points(best_way,2), 20,&#x27;filled&#x27;,&#x27;MarkerFaceColor&#x27;,&#x27;#FF8000&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;usd&#x27;)</span></span><br><span class="line"><span class="comment">% legend(&#x27;All stars&#x27;, &#x27;Selected stars&#x27;)</span></span><br><span class="line"><span class="comment">% xtickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"><span class="comment">% ytickformat(&#x27;degrees&#x27;)</span></span><br><span class="line"><span class="built_in">hold</span> on; </span><br><span class="line">a = <span class="built_in">plot</span>([[<span class="number">100</span>,<span class="number">200</span>],[<span class="number">100</span>,<span class="number">200</span>]],<span class="string">&#x27;--k&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">b = <span class="built_in">plot</span>([[<span class="number">100</span>,<span class="number">200</span>],[<span class="number">100</span>,<span class="number">200</span>]],<span class="string">&#x27;-.k&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">legend</span>([a, b],&#123;<span class="string">&#x27;10 arcsec&#x27;</span>,<span class="string">&#x27;15 arcsec&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear; </span><br><span class="line"><span class="comment">% M = csvread(&#x27;J2000_5hor.csv&#x27;);</span></span><br><span class="line">MM = csvread(<span class="string">&#x27;J2000_5horzhengfangxing.csv&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% MM = sortrows(M,4);</span></span><br><span class="line"><span class="comment">% MMM = MM(22:85,:);</span></span><br><span class="line"></span><br><span class="line">clf;</span><br><span class="line"><span class="comment">% box on;</span></span><br><span class="line">axis equal;</span><br><span class="line">xticks([<span class="number">0</span> <span class="number">60</span> <span class="number">120</span> <span class="number">180</span> <span class="number">240</span> <span class="number">300</span> <span class="number">360</span>])</span><br><span class="line">yticks([<span class="number">0</span> <span class="number">30</span> <span class="number">60</span> <span class="number">90</span>])</span><br><span class="line">xlim([<span class="number">-10</span> <span class="number">370</span>]);</span><br><span class="line">ylim([<span class="number">-10</span> <span class="number">100</span>]);</span><br><span class="line"><span class="comment">% grid on;</span></span><br><span class="line">ax = gca;</span><br><span class="line">ax.XAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.XAxis.MinorTickValues = ax.XAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.XAxis.Limits(<span class="number">2</span>);</span><br><span class="line">ax.YAxis.MinorTick = <span class="string">&#x27;on&#x27;</span>;</span><br><span class="line">ax.YAxis.MinorTickValues = ax.YAxis.Limits(<span class="number">1</span>):<span class="number">10</span>:ax.YAxis.Limits(<span class="number">2</span>);</span><br><span class="line">grid minor;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">xt=get(gca,<span class="string">&#x27;xtick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(xt);</span><br><span class="line">xt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,xt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;xticklabel&#x27;</span>,xt1);</span><br><span class="line">yt=get(gca,<span class="string">&#x27;ytick&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:<span class="built_in">numel</span>(yt);</span><br><span class="line">yt1&#123;k&#125;=sprintf(<span class="string">&#x27;%d°&#x27;</span>,yt(k));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">set(gca,<span class="string">&#x27;yticklabel&#x27;</span>,yt1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">&#x27;方位轴&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;高度轴&#x27;</span>,<span class="string">&#x27;FontWeight&#x27;</span>,<span class="string">&#x27;bold&#x27;</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">90</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">line([<span class="number">0</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line">line([<span class="number">360</span>,<span class="number">360</span>],[<span class="number">0</span>,<span class="number">90</span>],<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;linewidth&#x27;</span>,<span class="number">1.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(MM(:,<span class="number">2</span>), MM(:,<span class="number">3</span>))</span><br><span class="line">Copy_3_of_totalH(MM(:,<span class="number">2</span>:<span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">4.15完成大论文 随便记记吧 略累 有些不舍有些惭愧。</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>冲毕业第六七八周记录</title>
    <link href="https://tsuiwade.github.io/2023/01/06/blog70-study5/"/>
    <id>https://tsuiwade.github.io/2023/01/06/blog70-study5/</id>
    <published>2023-01-06T21:16:25.000Z</published>
    <updated>2023-01-06T21:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些相关的文章</p><p><a href="https://stackoverflow.com/questions/34313200/distribute-points-evenly-on-a-unit-hemisphere">Distribute points evenly on a unit hemisphere</a></p><p><a href="https://zhuanlan.zhihu.com/p/25998937">https://zhuanlan.zhihu.com/p/25998937</a></p><p>但并不适用于矩形上选择</p><hr><p>突然发现一个很大的问题，我不能使用该方法来寻找星点，因为这种均匀分布是星点之间的角距的均匀分布，在观测时高度越高观测点越少，在高度低的地方观测点较多，其实并不适用于机架的校正。机架的校正应该按照经纬度网格来均匀选取。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214161314056.png" alt="image-20221214161314056"></p><p>那么其实就可以将头顶的天区展开为一个矩形，方位和高度为边的矩形，研究在矩形上的二维均匀分布。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214161442139.png" alt="image-20221214161442139"></p><p>浅画一下二维的高度方位图（5等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214164714085.png" alt="image-20221214164714085"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214174203207.png" alt="image-20221214174203207"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214174257089.png" alt="image-20221214174257089"></p><hr><p>论文</p><p>Vedder, J.D.: ‘Star trackers, star catalog, and attitude determination: probabilistic aspects of system design’, J. Guid. Control Dyn., 1993, 16, (3), pp. 499–504</p><p>专利 《用于星敏感器的筛选导航星的方法》</p><p>2004 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221216005037292.png" alt="image-20221216005037292"></p><hr><p>在Stack Overflow中找到了我想问问题的答案 </p><p><a href="https://stackoverflow.com/questions/13005294/measure-the-uniformity-of-distribution-of-points-in-a-2d-square">https://stackoverflow.com/questions/13005294/measure-the-uniformity-of-distribution-of-points-in-a-2d-square</a></p><p>通常在统计学中，我们需要了解给定的样本是否来自特定的分布，最常见的是正态分布(或高斯分布)。为此，我们有所谓的正态性检验，如夏皮罗-威尔克，安德森-达林或Kolmogorov-Smirnov检验。</p><p>它们都测量样本来自正态分布的可能性有多大，并有相关的p值来支持这种测量。</p><hr><p>就是KS检验。Kolmogorov-Smirnov test是一个有用的非参数（nonparmetric）假设检验，主要是用来检验一组样本是否来自于某个概率分布（one-sample K-S test），或者比较两组样本的分布是否相同（two-sample K-S test）。</p><p>ks检验返回两个值，pvalue是越高越好，统计量D-statistic越低越好</p><p>值的解释 </p><p><a href="https://stats.stackexchange.com/questions/57885/how-to-interpret-p-value-of-kolmogorov-smirnov-test-python">https://stats.stackexchange.com/questions/57885/how-to-interpret-p-value-of-kolmogorov-smirnov-test-python</a></p><p><a href="https://en.m.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test">https://en.m.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test</a></p><p>D 统计量是两个样本的 CDF 之间的绝对最大距离(最大值)。这个数字越接近于0，这两个样本就越有可能来自同一个分布。</p><p>K-s 检验返回的 p 值与其他 p 值具有相同的解释。如果 p 值小于你的显著性水平，那么你就拒绝了两个样本来自同一个分布的无效假设。如果您对该过程感兴趣，可以在线找到将 D 统计量转换为 p 值的表。</p><blockquote><p>最终返回的结果，p-value=4.7405805465370525e-159，比指定的显著水平（假设为5%）小，则我们完全可以拒绝假设：beta和norm不服从同一分布。</p></blockquote><p>学习一下ks检验 <strong>柯尔莫哥洛夫-斯米尔诺夫检验</strong>（英语：Kolmogorov-Smirnov test，简称K-S test），是一种基于累计分布函数的非参数检验，用以检验两个经验分布是否不同或一个经验分布与另一个理想分布是否不同。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221216153934258.png" alt="image-20221216153934258"></p><p><a href="https://zhuanlan.zhihu.com/p/292678346">https://zhuanlan.zhihu.com/p/292678346</a></p><p>α是置信系数</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/v2-a831d74d745ccaf7ceb57110850bce5e_720w.webp" alt="img"></p><p><a href="https://zhuanlan.zhihu.com/p/26477641">https://zhuanlan.zhihu.com/p/26477641</a></p><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> ks_2samp</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> kstest</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">norm1 = [<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">128</span>, <span class="number">130</span>, <span class="number">131</span>]</span><br><span class="line">print(norm1)</span><br><span class="line">ks_value = kstest(norm1, <span class="string">&#x27;norm&#x27;</span>, args=(<span class="number">120</span>, <span class="number">10</span>))</span><br><span class="line">print(ks_value)</span><br></pre></td></tr></table></figure><p>KstestResult(statistic=0.35803634777692694, pvalue=0.11834016917515)</p><p>用一种简单的方式，我们可以将2样本检验的<code>KS统计量</code>D 定义为每个样本的cdf(累积分布函数)之间的最大距离，cdf 累计分布函数 <a href="https://towardsdatascience.com/comparing-sample-distributions-with-the-kolmogorov-smirnov-ks-test-a2292ad6fee5">https://towardsdatascience.com/comparing-sample-distributions-with-the-kolmogorov-smirnov-ks-test-a2292ad6fee5</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221216193356448.png" alt="image-20221216193356448"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> kstest</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">norm1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">print(norm1)</span><br><span class="line">ks_value = kstest(norm1, <span class="string">&#x27;uniform&#x27;</span>, args=(<span class="number">0</span>, <span class="number">10</span>), N=<span class="number">12</span>)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">KstestResult(statistic=<span class="number">0.09090909090909094</span>, pvalue=<span class="number">0.9998600940511319</span>)</span><br><span class="line">print(ks_value)</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221216203303976.png" alt="image-20221216203303976"></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear;close all;</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">pd2 = makedist(<span class="string">&#x27;Uniform&#x27;</span>,<span class="string">&#x27;lower&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;upper&#x27;</span>,<span class="number">10</span>); <span class="comment">% Uniform distribution with a = -2 and b = 2</span></span><br><span class="line">t = <span class="number">0</span>:<span class="number">.01</span>:<span class="number">10</span>;</span><br><span class="line">cdf2 = cdf(pd2, t);</span><br><span class="line">h1 = cdfplot(x);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,cdf2,<span class="string">&#x27;k:&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;样本数据&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;累积分布函数F(x)&#x27;</span>);</span><br></pre></td></tr></table></figure></h2><p>试试实时方位数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> kstest</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">user_cols = [<span class="string">&#x27;hip&#x27;</span>, <span class="string">&#x27;az&#x27;</span>, <span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;mag&#x27;</span>]</span><br><span class="line">pd_reader = pd.read_csv(<span class="string">&quot;./J2000_5_hor.csv&quot;</span>, header=<span class="literal">None</span>,</span><br><span class="line">                        engine=<span class="string">&#x27;python&#x27;</span>, index_col=<span class="number">0</span>, usecols=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)), names=user_cols)</span><br><span class="line">print(pd_reader.head())</span><br><span class="line">norm1 = pd_reader[<span class="string">&#x27;az&#x27;</span>]</span><br><span class="line">print(norm1)</span><br><span class="line">ks_value = kstest(norm1, <span class="string">&#x27;uniform&#x27;</span>, args=(<span class="number">0</span>, <span class="number">360</span>))</span><br><span class="line">print(ks_value)</span><br></pre></td></tr></table></figure><p>KstestResult(statistic=0.06621370056497172, pvalue=0.0038362399448040162)</p><p>实验感觉有问题 <a href="https://bbs.pinggu.org/thread-2983774-1-1.html">https://bbs.pinggu.org/thread-2983774-1-1.html</a></p><p><a href="https://stats.stackexchange.com/questions/153249/non-uniform-distribution-of-p-values-when-simulating-binomial-tests-under-the-nu/">https://stats.stackexchange.com/questions/153249/non-uniform-distribution-of-p-values-when-simulating-binomial-tests-under-the-nu/</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221216203556995.png" alt="image-20221216203556995"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear;close all;</span><br><span class="line">M = csvread(<span class="string">&#x27;J2000_5_hor.csv&#x27;</span>);</span><br><span class="line">x = M(:, <span class="number">2</span>);</span><br><span class="line">pd2 = makedist(<span class="string">&#x27;Uniform&#x27;</span>,<span class="string">&#x27;lower&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;upper&#x27;</span>,<span class="number">360</span>); <span class="comment">% Uniform distribution with a = -2 and b = 2</span></span><br><span class="line">t = <span class="number">0</span>:<span class="number">.01</span>:<span class="number">360</span>;</span><br><span class="line">cdf2 = cdf(pd2, t);</span><br><span class="line">h1 = cdfplot(x);</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,cdf2,<span class="string">&#x27;k:&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>,<span class="number">2</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;样本数据&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;累积分布函数F(x)&#x27;</span>);</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">360</span>])</span><br><span class="line">ylim([<span class="number">0</span> <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221230230221109.png" alt="image-20221230230221109"></p><hr><p>ks检验还是到此为止了，毕竟还只是个检验方法，不算指标</p><p>检验数据是否服从指定分布的方法有</p><p><a href="https://blog.csdn.net/Datawhale/article/details/120558925">https://blog.csdn.net/Datawhale/article/details/120558925</a></p><p>可知 KS检验的灵敏度没有相应的检验来的高</p><p>在该文中提到KL 散度是一种衡量两个概率分布的匹配程度的指标，两个分布差异越大，KL散度越大。KL越小越接近。</p><p>有人会把KL散度认为是一种距离指标，然而，KL散度不能用来衡量两个分布的距离。其原因在于KL散度不是对称的。举例来说，如果用观测分布来近似二项分布，其KL散度为</p><p><a href="https://zhuanlan.zhihu.com/p/153492607">https://zhuanlan.zhihu.com/p/153492607</a></p><p>感觉不太合适，所以作罢</p><hr><p><a href="https://blog.csdn.net/qq_45654781/article/details/126862808">https://blog.csdn.net/qq_45654781/article/details/126862808</a></p><p><strong><code>计算 Kozachenko-Leonenko的k最近邻估计熵</code></strong></p><p><a href="https://github.com/kuxing-pretty/entropy_estimators">https://github.com/paulbrodersen/entropy_estimators</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230103103217539.png" alt="image-20230103103217539"></p><p>4等星 214个选20个</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230103155149727.png" alt="image-20230103155149727"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230103155239749.png" alt="image-20230103155239749"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">from scipy.special <span class="keyword">import</span> gamma, digamma</span><br><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line">from entropy_estimators <span class="keyword">import</span> continuous</span><br><span class="line"></span><br><span class="line"><span class="meta"># create some normal test data</span></span><br><span class="line"># X = np.random.randn(<span class="number">20000</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"># X = np.arange(<span class="number">0</span>, <span class="number">0.09</span>, <span class="number">0.01</span>)</span><br><span class="line"># X = np.<span class="built_in">array</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"># X = np.<span class="built_in">array</span>([<span class="number">189.83</span> <span class="number">195.095</span> <span class="number">195.192</span> <span class="number">196.886</span> <span class="number">198.814</span> <span class="number">203.376</span> <span class="number">204.429</span> <span class="number">218.318</span> <span class="number">227.266</span> <span class="number">261.36</span> <span class="number">301.009</span> <span class="number">308.907</span> <span class="number">345.333</span>])</span><br><span class="line"><span class="meta"># dp 前a个点 选b个点 最后一次选的是c点 倒数第二次选的是d点</span></span><br><span class="line"><span class="meta"># dp[3][3][3][2] dp[4][4][4][3]</span></span><br><span class="line">X = np.<span class="built_in">array</span>([<span class="number">189.83</span>, <span class="number">261.36</span>, <span class="number">301.009</span>, <span class="number">345.333</span>])</span><br><span class="line">#            <span class="number">261</span><span class="number">-189</span>  <span class="number">301</span><span class="number">-261</span> <span class="number">301</span><span class="number">-261</span>  <span class="number">345</span><span class="number">-301</span></span><br><span class="line"></span><br><span class="line">print(X.shape)</span><br><span class="line"><span class="meta"># compute the entropy from the determinant of the multivariate normal distribution:</span></span><br><span class="line">analytic = continuous.get_h_mvn(X)</span><br><span class="line"></span><br><span class="line"><span class="meta"># compute the entropy using the k-nearest neighbour approach</span></span><br><span class="line"><span class="meta"># developed by Kozachenko and Leonenko (1,987):</span></span><br><span class="line">kozachenko = continuous.get_h(X, k=1, norm=&#x27;euclidean&#x27;)</span><br><span class="line"></span><br><span class="line">print(f<span class="string">&quot;analytic result: &#123;analytic:.5f&#125;&quot;</span>)</span><br><span class="line">print(f<span class="string">&quot;K-L estimator: &#123;kozachenko:.5f&#125;&quot;</span>)</span><br><span class="line">print(digamma(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>运算时间很慢</p><p>用c++写dp（这个dp还没考虑球体的循环问题）</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/math/special_functions/digamma.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/STACK:1073741824&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// vector&lt;double&gt; points = &#123;0.1, 1.2, 1.9, 2.3, 2.9, 3.9&#125;;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; points = &#123;<span class="number">261.36</span>, <span class="number">345.333</span>, <span class="number">218.318</span>, <span class="number">196.886</span>, <span class="number">187.195</span>, <span class="number">187.387</span>, <span class="number">349.435</span>, <span class="number">262.478</span>, <span class="number">352.194</span>, <span class="number">186.59</span>, <span class="number">355.361</span>, <span class="number">358.033</span>, <span class="number">347.135</span>, <span class="number">179.794</span>, <span class="number">179.51</span>, <span class="number">178.597</span>, <span class="number">14.876</span>, <span class="number">172.61</span>, <span class="number">5.50809</span>, <span class="number">175.587</span>, <span class="number">158.055</span>, <span class="number">175.579</span>, <span class="number">18.0717</span>, <span class="number">18.0694</span>, <span class="number">167.389</span>, <span class="number">163.211</span>, <span class="number">98.636</span>, <span class="number">135.693</span>, <span class="number">10.1721</span>, <span class="number">131.4</span>, <span class="number">172.071</span>, <span class="number">152.177</span>, <span class="number">6.69029</span>, <span class="number">43.8872</span>, <span class="number">117.085</span>, <span class="number">72.1644</span>, <span class="number">168.928</span>, <span class="number">0.366764</span>, <span class="number">135.911</span>, <span class="number">94.3341</span>, <span class="number">29.6564</span>, <span class="number">158.157</span>, <span class="number">129.038</span>, <span class="number">35.8318</span>, <span class="number">65.4447</span>, <span class="number">60.8557</span>, <span class="number">52.6322</span>, <span class="number">150.143</span>, <span class="number">144.502</span>, <span class="number">44.7996</span>, <span class="number">117.286</span>, <span class="number">115.854</span>, <span class="number">133.016</span>, <span class="number">50.1732</span>, <span class="number">130.872</span>, <span class="number">78.2541</span>, <span class="number">92.0012</span>, <span class="number">59.5689</span>, <span class="number">91.4648</span>, <span class="number">91.6474</span>, <span class="number">91.4945</span>, <span class="number">78.2767</span>, <span class="number">64.2761</span>, <span class="number">130.576</span>, <span class="number">105.338</span>, <span class="number">112.139</span>, <span class="number">51.6668</span>, <span class="number">140.95</span>, <span class="number">98.267</span>, <span class="number">95.4699</span>, <span class="number">92.6435</span>, <span class="number">96.5942</span>, <span class="number">135.931</span>, <span class="number">94.7702</span>, <span class="number">114.749</span>, <span class="number">113.036</span>, <span class="number">102.779</span>, <span class="number">103.887</span>, <span class="number">106.395</span>, <span class="number">71.9267</span>, <span class="number">57.5453</span>, <span class="number">61.2187</span>, <span class="number">125.211</span>, <span class="number">60.8502</span>, <span class="number">110.887</span>, <span class="number">119.231</span>, <span class="number">112.454</span>, <span class="number">54.2793</span>, <span class="number">110.83</span>, <span class="number">105.955</span>, <span class="number">97.9926</span>, <span class="number">74.9688</span>, <span class="number">120.518</span>, <span class="number">102.988</span>, <span class="number">117.519</span>, <span class="number">93.22</span>, <span class="number">107.316</span>, <span class="number">103.157</span>, <span class="number">81.8369</span>, <span class="number">103.996</span>, <span class="number">103.994</span>, <span class="number">103.133</span>, <span class="number">119.554</span>, <span class="number">113.025</span>, <span class="number">108.66</span>, <span class="number">117.34</span>, <span class="number">92.8309</span>, <span class="number">111.149</span>, <span class="number">42.8763</span>, <span class="number">53.886</span>, <span class="number">62.5918</span>, <span class="number">76.2882</span>, <span class="number">75.3801</span>, <span class="number">100.752</span>, <span class="number">79.2899</span>, <span class="number">70.6052</span>, <span class="number">81.4649</span>, <span class="number">61.3945</span>, <span class="number">74.194</span>, <span class="number">69.2536</span>, <span class="number">63.5351</span>, <span class="number">58.963</span>, <span class="number">64.2205</span>, <span class="number">61.0484</span>, <span class="number">28.6315</span>, <span class="number">36.2729</span>, <span class="number">36.4375</span>, <span class="number">22.0025</span>, <span class="number">29.8624</span>, <span class="number">22.9935</span>, <span class="number">16.475</span>, <span class="number">13.928</span>, <span class="number">8.27138</span>, <span class="number">2.78788</span>, <span class="number">353.602</span>, <span class="number">352.709</span>, <span class="number">349.577</span>, <span class="number">342.741</span>, <span class="number">338.205</span>, <span class="number">337.806</span>, <span class="number">314.748</span>, <span class="number">325.078</span>, <span class="number">319.051</span>, <span class="number">327.003</span>, <span class="number">322.017</span>, <span class="number">303.285</span>, <span class="number">301.663</span>, <span class="number">340.939</span>, <span class="number">307.003</span>, <span class="number">300.783</span>, <span class="number">310.137</span>, <span class="number">299.254</span>, <span class="number">281.805</span>, <span class="number">334.071</span>, <span class="number">318.207</span>, <span class="number">269.96</span>, <span class="number">315.802</span>, <span class="number">291.564</span>, <span class="number">307.793</span>, <span class="number">273.792</span>, <span class="number">280.855</span>, <span class="number">336.666</span>, <span class="number">271.656</span>, <span class="number">268.879</span>, <span class="number">280.421</span>, <span class="number">260.389</span>, <span class="number">308.107</span>, <span class="number">249.547</span>, <span class="number">247.287</span>, <span class="number">300.084</span>, <span class="number">268.299</span>, <span class="number">270.919</span>, <span class="number">271.962</span>, <span class="number">305.234</span>, <span class="number">326.502</span>, <span class="number">291.083</span>, <span class="number">247.667</span>, <span class="number">299.381</span>, <span class="number">302.746</span>, <span class="number">284.357</span>, <span class="number">294.458</span>, <span class="number">328.324</span>, <span class="number">231.173</span>, <span class="number">338.978</span>, <span class="number">243.665</span>, <span class="number">233.148</span>, <span class="number">324.253</span>, <span class="number">256.191</span>, <span class="number">232.279</span>, <span class="number">216.426</span>, <span class="number">241.766</span>, <span class="number">272.257</span>, <span class="number">208.418</span>, <span class="number">247.348</span>, <span class="number">325.249</span>, <span class="number">237.343</span>, <span class="number">236.978</span>, <span class="number">314.613</span>, <span class="number">245.759</span>, <span class="number">203.524</span>, <span class="number">276.607</span>, <span class="number">200.523</span>, <span class="number">339.604</span>, <span class="number">265.049</span>, <span class="number">224.551</span>, <span class="number">218.172</span>, <span class="number">209.523</span>, <span class="number">302.305</span>, <span class="number">269.956</span>, <span class="number">245.845</span>, <span class="number">211.412</span>, <span class="number">227.112</span>, <span class="number">317.642</span>, <span class="number">353.915</span>&#125;;</span><br><span class="line"><span class="comment">// vector&lt;double&gt; points(point.begin(), point.begin() + 50);</span></span><br><span class="line"><span class="keyword">double</span> log_c_d = (<span class="number">1</span> / <span class="number">2.</span>) * <span class="built_in">log</span>(M_PI) - <span class="built_in">log</span>(tgamma(<span class="number">1</span> / <span class="number">2.</span> + <span class="number">1</span>));</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> distances = points[j - <span class="number">1</span>] - points[k - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">double</span> sum_log_dist = <span class="number">2</span> * <span class="built_in">log</span>(<span class="number">2</span> * distances);</span><br><span class="line">    <span class="keyword">double</span> h = -boost::math::digamma(<span class="number">1</span>) + boost::math::digamma(<span class="number">2</span>) + log_c_d + (<span class="number">1</span> / <span class="number">2.0</span>) * sum_log_dist;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = points.size();</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; n &quot;</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    sort(points.begin(), points.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">double</span> num : points)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double dp[51][21][51][51];</span></span><br><span class="line">    <span class="comment">// memset(dp, 0, sizeof(dp));</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt;&gt;&gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt;&gt;(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(n + <span class="number">1</span>))));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 1&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">            dp[i][<span class="number">2</span>][i][k] = func(i, k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">3</span>; a &lt;= n; a++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">2</span>; b &lt;= m; b++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = b; c &lt;= a; c++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = b - <span class="number">1</span>; d &lt;= a - <span class="number">1</span> &amp;&amp; d &lt;= c - <span class="number">1</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (c == a &amp;&amp; b == <span class="number">2</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (c != a)</span><br><span class="line">                    &#123; <span class="comment">// 没选a</span></span><br><span class="line">                        dp[a][b][c][d] = dp[a - <span class="number">1</span>][b][c][d];<span class="comment">//120^4 * 20 dp 前a个点 选b个点 最后一次选的是c点 倒数第二次选的是d点  筛选问题 700 选 50 </span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> e = b - <span class="number">2</span>; e &lt;= d - <span class="number">1</span>; e++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">double</span> last = dp[a - <span class="number">1</span>][b - <span class="number">1</span>][d][e];</span><br><span class="line">                            <span class="keyword">double</span> newv = ((last + boost::math::digamma(<span class="number">1</span>) - boost::math::digamma(b - <span class="number">1</span>) - log_c_d) * (b - <span class="number">1</span>) - <span class="built_in">log</span>(<span class="number">2</span> * (points[d - <span class="number">1</span>] - points[e - <span class="number">1</span>])) + <span class="built_in">log</span>(<span class="number">2</span> * (points[c - <span class="number">1</span>] - points[d - <span class="number">1</span>])) + <span class="built_in">log</span>(<span class="number">2</span> * min(points[c - <span class="number">1</span>] - points[d - <span class="number">1</span>], points[d - <span class="number">1</span>] - points[e - <span class="number">1</span>]))) / <span class="keyword">double</span>(b) - boost::math::digamma(<span class="number">1</span>) + boost::math::digamma(b) + log_c_d;</span><br><span class="line">                            <span class="comment">// if ( a == 4 &amp;&amp; b == 3 &amp;&amp; c)</span></span><br><span class="line">                            dp[a][b][c][d] = max(dp[a][b][c][d], newv);</span><br><span class="line">                            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; a &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; c &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot; d &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot; e &quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot; dp &quot;</span> &lt;&lt; dp[a][b][c][d] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double maxv = 0.0;</span></span><br><span class="line">    <span class="comment">// int a = 13, b = 4;</span></span><br><span class="line">    <span class="comment">// int cc, dd;</span></span><br><span class="line">    <span class="comment">// // while (d &gt; 1)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int c = b; c &lt;= a; c++)</span></span><br><span class="line">    <span class="comment">//         for (int d = b - 1; d &lt;= a - 1 &amp;&amp; d &lt;= c - 1; d++)</span></span><br><span class="line">    <span class="comment">//             if (dp[a][b][c][d] &gt; maxv)</span></span><br><span class="line">    <span class="comment">//             &#123;</span></span><br><span class="line">    <span class="comment">//                 maxv = dp[a][b][c][d];</span></span><br><span class="line">    <span class="comment">//                 cc = c;</span></span><br><span class="line">    <span class="comment">//                 dd = d;</span></span><br><span class="line">    <span class="comment">//             &#125;</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; &quot; cc &quot; &lt;&lt; cc &lt;&lt; &quot; dd &quot; &lt;&lt; dd &lt;&lt; &quot; dp &quot; &lt;&lt; maxv &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> maxv = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = n, b = m, c = a;</span><br><span class="line">    <span class="keyword">int</span> dd = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (dd &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d = c - <span class="number">1</span>; d &gt;= b - <span class="number">1</span>; d--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[a][b][c][d] &gt; maxv)</span><br><span class="line">            &#123;</span><br><span class="line">                maxv = dp[a][b][c][d];</span><br><span class="line">                dd = d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; dd &quot;</span> &lt;&lt; dd &lt;&lt; <span class="string">&quot; dp &quot;</span> &lt;&lt; maxv &lt;&lt; <span class="string">&quot; a &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; c &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        a = dd;</span><br><span class="line">        c = a;</span><br><span class="line">        maxv = <span class="number">0.0</span>;</span><br><span class="line">        b--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>采用模拟退火进行加速运算</p><p><a href="https://www.bilibili.com/video/BV1hK41157JL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8">https://www.bilibili.com/video/BV1hK41157JL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8</a></p><p>b站教程不错</p><p>选用第三个例题《书店买书》的案例</p><p><a href="https://mp.weixin.qq.com/s/001Klrt7jjf8s5rI3py7Yg">https://mp.weixin.qq.com/s/001Klrt7jjf8s5rI3py7Yg</a></p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all;close all; clc;</span><br><span class="line">points = [<span class="number">261.36</span>,<span class="number">345.333</span>,<span class="number">218.318</span>,<span class="number">196.886</span>,<span class="number">187.195</span>,<span class="number">187.387</span>,<span class="number">349.435</span>,<span class="number">262.478</span>,<span class="number">352.194</span>,<span class="number">186.59</span>,<span class="number">355.361</span>,<span class="number">358.033</span>,<span class="number">347.135</span>,<span class="number">179.794</span>,<span class="number">179.51</span>,<span class="number">178.597</span>,<span class="number">14.876</span>,<span class="number">172.61</span>,<span class="number">5.50809</span>,<span class="number">175.587</span>,<span class="number">158.055</span>,<span class="number">175.579</span>,<span class="number">18.0717</span>,<span class="number">18.0694</span>,<span class="number">167.389</span>,<span class="number">163.211</span>,<span class="number">98.636</span>,<span class="number">135.693</span>,<span class="number">10.1721</span>,<span class="number">131.4</span>,<span class="number">172.071</span>,<span class="number">152.177</span>,<span class="number">6.69029</span>,<span class="number">43.8872</span>,<span class="number">117.085</span>,<span class="number">72.1644</span>,<span class="number">168.928</span>,<span class="number">0.366764</span>,<span class="number">135.911</span>,<span class="number">94.3341</span>,<span class="number">29.6564</span>,<span class="number">158.157</span>,<span class="number">129.038</span>,<span class="number">35.8318</span>,<span class="number">65.4447</span>,<span class="number">60.8557</span>,<span class="number">52.6322</span>,<span class="number">150.143</span>,<span class="number">144.502</span>,<span class="number">44.7996</span>,<span class="number">117.286</span>,<span class="number">115.854</span>,<span class="number">133.016</span>,<span class="number">50.1732</span>,<span class="number">130.872</span>,<span class="number">78.2541</span>,<span class="number">92.0012</span>,<span class="number">59.5689</span>,<span class="number">91.4648</span>,<span class="number">91.6474</span>,<span class="number">91.4945</span>,<span class="number">78.2767</span>,<span class="number">64.2761</span>,<span class="number">130.576</span>,<span class="number">105.338</span>,<span class="number">112.139</span>,<span class="number">51.6668</span>,<span class="number">140.95</span>,<span class="number">98.267</span>,<span class="number">95.4699</span>,<span class="number">92.6435</span>,<span class="number">96.5942</span>,<span class="number">135.931</span>,<span class="number">94.7702</span>,<span class="number">114.749</span>,<span class="number">113.036</span>,<span class="number">102.779</span>,<span class="number">103.887</span>,<span class="number">106.395</span>,<span class="number">71.9267</span>,<span class="number">57.5453</span>,<span class="number">61.2187</span>,<span class="number">125.211</span>,<span class="number">60.8502</span>,<span class="number">110.887</span>,<span class="number">119.231</span>,<span class="number">112.454</span>,<span class="number">54.2793</span>,<span class="number">110.83</span>,<span class="number">105.955</span>,<span class="number">97.9926</span>,<span class="number">74.9688</span>,<span class="number">120.518</span>,<span class="number">102.988</span>,<span class="number">117.519</span>,<span class="number">93.22</span>,<span class="number">107.316</span>,<span class="number">103.157</span>,<span class="number">81.8369</span>,<span class="number">103.996</span>,<span class="number">103.994</span>,<span class="number">103.133</span>,<span class="number">119.554</span>,<span class="number">113.025</span>,<span class="number">108.66</span>,<span class="number">117.34</span>,<span class="number">92.8309</span>,<span class="number">111.149</span>,<span class="number">42.8763</span>,<span class="number">53.886</span>,<span class="number">62.5918</span>,<span class="number">76.2882</span>,<span class="number">75.3801</span>,<span class="number">100.752</span>,<span class="number">79.2899</span>,<span class="number">70.6052</span>,<span class="number">81.4649</span>,<span class="number">61.3945</span>,<span class="number">74.194</span>,<span class="number">69.2536</span>,<span class="number">63.5351</span>,<span class="number">58.963</span>,<span class="number">64.2205</span>,<span class="number">61.0484</span>,<span class="number">28.6315</span>,<span class="number">36.2729</span>,<span class="number">36.4375</span>,<span class="number">22.0025</span>,<span class="number">29.8624</span>,<span class="number">22.9935</span>,<span class="number">16.475</span>,<span class="number">13.928</span>,<span class="number">8.27138</span>,<span class="number">2.78788</span>,<span class="number">353.602</span>,<span class="number">352.709</span>,<span class="number">349.577</span>,<span class="number">342.741</span>,<span class="number">338.205</span>,<span class="number">337.806</span>,<span class="number">314.748</span>,<span class="number">325.078</span>,<span class="number">319.051</span>,<span class="number">327.003</span>,<span class="number">322.017</span>,<span class="number">303.285</span>,<span class="number">301.663</span>,<span class="number">340.939</span>,<span class="number">307.003</span>,<span class="number">300.783</span>,<span class="number">310.137</span>,<span class="number">299.254</span>,<span class="number">281.805</span>,<span class="number">334.071</span>,<span class="number">318.207</span>,<span class="number">269.96</span>,<span class="number">315.802</span>,<span class="number">291.564</span>,<span class="number">307.793</span>,<span class="number">273.792</span>,<span class="number">280.855</span>,<span class="number">336.666</span>,<span class="number">271.656</span>,<span class="number">268.879</span>,<span class="number">280.421</span>,<span class="number">260.389</span>,<span class="number">308.107</span>,<span class="number">249.547</span>,<span class="number">247.287</span>,<span class="number">300.084</span>,<span class="number">268.299</span>,<span class="number">270.919</span>,<span class="number">271.962</span>,<span class="number">305.234</span>,<span class="number">326.502</span>,<span class="number">291.083</span>,<span class="number">247.667</span>,<span class="number">299.381</span>,<span class="number">302.746</span>,<span class="number">284.357</span>,<span class="number">294.458</span>,<span class="number">328.324</span>,<span class="number">231.173</span>,<span class="number">338.978</span>,<span class="number">243.665</span>,<span class="number">233.148</span>,<span class="number">324.253</span>,<span class="number">256.191</span>,<span class="number">232.279</span>,<span class="number">216.426</span>,<span class="number">241.766</span>,<span class="number">272.257</span>,<span class="number">208.418</span>,<span class="number">247.348</span>,<span class="number">325.249</span>,<span class="number">237.343</span>,<span class="number">236.978</span>,<span class="number">314.613</span>,<span class="number">245.759</span>,<span class="number">203.524</span>,<span class="number">276.607</span>,<span class="number">200.523</span>,<span class="number">339.604</span>,<span class="number">265.049</span>,<span class="number">224.551</span>,<span class="number">218.172</span>,<span class="number">209.523</span>,<span class="number">302.305</span>,<span class="number">269.956</span>,<span class="number">245.845</span>,<span class="number">211.412</span>,<span class="number">227.112</span>,<span class="number">317.642</span>,<span class="number">353.915</span>];</span><br><span class="line"></span><br><span class="line">points = <span class="built_in">sort</span>(points);</span><br><span class="line"></span><br><span class="line">chose = int16([<span class="number">1</span> <span class="number">12</span> <span class="number">15</span> <span class="number">50</span> <span class="number">60</span> <span class="number">89</span> <span class="number">98</span> <span class="number">99</span> <span class="number">106</span> <span class="number">124</span> <span class="number">126</span> <span class="number">131</span> <span class="number">133</span> <span class="number">134</span> <span class="number">150</span> <span class="number">151</span> <span class="number">165</span> <span class="number">202</span> <span class="number">206</span> <span class="number">207</span>]);</span><br><span class="line">chose = <span class="built_in">sort</span>(chose);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scatter</span>(points,<span class="number">0</span>,<span class="string">&#x27;k.&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">for</span> s = chose</span><br><span class="line">    <span class="built_in">disp</span>(s);</span><br><span class="line">    <span class="built_in">scatter</span>(points(s), <span class="number">0</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;filled&#x27;</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始方案是：<br>[1 12 15 50 60 89 98 99 106 124 126 131 133 134 150 151 165 202 206 207]<br>此时最优值是：<br>   46.3648</p><p>最佳的方案是：<br>[7 15 21 28 42 53 60 78 96 105 109 118 127 137 150 166 176 190 203 214]<br>此时最优值是：<br>   93.4483</p><p>初始点：</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106151805242.png" alt="image-20230106151805242"></p><p>优化方案：</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106185939040.png" alt="image-20230106185939040"></p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 模拟退火解决书店买书问题  % 466</span></span><br><span class="line">clear all; clc; close all;</span><br><span class="line"><span class="comment">% tic</span></span><br><span class="line">load points;</span><br><span class="line">points = <span class="built_in">sort</span>(points);</span><br><span class="line">rng(<span class="string">&#x27;shuffle&#x27;</span>)  <span class="comment">% 控制随机数的生成，否则每次打开matlab得到的结果都一样</span></span><br><span class="line">len = <span class="number">20</span>;</span><br><span class="line">map = [<span class="number">1</span>:len,<span class="number">1</span>:len];</span><br><span class="line"><span class="comment">% 这个数据文件里面保存了两个矩阵：M是每本书在每家店的价格; freight表示每家店的运费</span></span><br><span class="line"><span class="comment">% [s, b] = size(M);  % s是书店的数量，b是要购买的书的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 参数初始化</span></span><br><span class="line">T0 = <span class="number">1000</span>;   <span class="comment">% 初始温度</span></span><br><span class="line">T = T0; <span class="comment">% 迭代中温度会发生改变，第一次迭代时温度就是T0</span></span><br><span class="line">maxgen = <span class="number">500</span>;  <span class="comment">% 最大迭代次数</span></span><br><span class="line">Lk = <span class="number">200</span>;  <span class="comment">% 每个温度下的迭代次数</span></span><br><span class="line">alfa = <span class="number">0.95</span>;  <span class="comment">% 温度衰减系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  随机生成一个初始解</span></span><br><span class="line">A = int32(<span class="number">1</span>:<span class="built_in">length</span>(points));</span><br><span class="line">random_num = A(randperm(<span class="built_in">numel</span>(A),len));</span><br><span class="line">index0 = <span class="built_in">sort</span>(random_num);</span><br><span class="line">h0 = Copy_of_totalH(points, index0, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">% way0 = randi([1, s],1,b); % 在1-s这些整数中随机抽取一个1*b的向量，表示这b本书分别在哪家书店购买</span></span><br><span class="line"><span class="comment">% money0 = calculate_money(way0,freight,M,b); % 调用我们自己写的calculate_money函数计算这个方案的花费</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;初始方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(index0))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(h0)</span><br><span class="line"><span class="comment">%% 定义一些保存中间过程的量，方便输出结果和画图</span></span><br><span class="line">min_money = h0;     <span class="comment">% 初始化找到的最佳的解对应的花费为money0</span></span><br><span class="line">MONEY = <span class="built_in">zeros</span>(maxgen,<span class="number">1</span>); <span class="comment">% 记录每一次外层循环结束后找到的min_money (方便画图）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 模拟退火过程</span></span><br><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span> : maxgen  <span class="comment">% 外循环, 我这里采用的是指定最大迭代次数</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Lk  <span class="comment">%  内循环，在每个温度下开始迭代</span></span><br><span class="line">        index = index0;</span><br><span class="line">        x_num = index(randperm(<span class="built_in">numel</span>(index),<span class="number">1</span>));</span><br><span class="line">        x = <span class="built_in">find</span>(index == x_num);</span><br><span class="line">   </span><br><span class="line">        delta = <span class="number">0</span>;</span><br><span class="line">        delta = delta ...</span><br><span class="line">            - <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(x<span class="number">-1</span>+len)))-points(index(map(x<span class="number">-2</span>+len))) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>( points( index(x)) - points(index(map(x<span class="number">-1</span>+len))) + <span class="number">360</span>, <span class="number">360</span>) )) ...</span><br><span class="line">            - <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(x)) - points(index(map(x<span class="number">-1</span>+len))) + <span class="number">360</span> , <span class="number">360</span>) , <span class="built_in">mod</span>( points(index(map(x+<span class="number">1</span>))) - points(index(x)) + <span class="number">360</span> , <span class="number">360</span> ) )) ...</span><br><span class="line">            - <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(x+<span class="number">1</span>))) - points(index(x)) + <span class="number">360</span> , <span class="number">360</span>), <span class="built_in">mod</span>(points(index(map(x+<span class="number">2</span>))) - points(index(map(x+<span class="number">1</span>))) + <span class="number">360</span>, <span class="number">360</span> ) )) ...</span><br><span class="line">            + <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(x<span class="number">-1</span>+len))) - points(index(map(x<span class="number">-2</span>+len))) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>(points(index(map(x+<span class="number">1</span>))) - points(index(map(x<span class="number">-1</span>+len))) + <span class="number">360</span>, <span class="number">360</span>) )) ...</span><br><span class="line">            + <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(x+<span class="number">2</span>))) - points(index(map(x+<span class="number">1</span>))) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>(points(index(map(x+<span class="number">1</span>))) - points(index(map(x<span class="number">-1</span>+len))) + <span class="number">360</span>, <span class="number">360</span>) ));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        shengxia = setxor(A, index);</span><br><span class="line">        y_num = shengxia(randperm(<span class="built_in">numel</span>(shengxia),<span class="number">1</span>));</span><br><span class="line">        index(x) = y_num;</span><br><span class="line">        index = <span class="built_in">sort</span>(index);</span><br><span class="line">        y = <span class="built_in">find</span>(index == y_num);</span><br><span class="line">        delta = delta ...</span><br><span class="line">            - <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(y<span class="number">-1</span>+len)))-points(index(map(y<span class="number">-2</span>+len))) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>( points( index(map(y+<span class="number">1</span>))) - points(index(map(y<span class="number">-1</span>+len))) + <span class="number">360</span>, <span class="number">360</span>) )) ...</span><br><span class="line">            - <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(y+<span class="number">1</span>))) - points(index(map(y<span class="number">-1</span>+len))) + <span class="number">360</span> , <span class="number">360</span>) , <span class="built_in">mod</span>( points(index(map(y+<span class="number">2</span>))) - points(index(map(y+<span class="number">1</span>))) + <span class="number">360</span> , <span class="number">360</span> ) )) ...</span><br><span class="line">            + <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(y<span class="number">-1</span> + len))) - points(index(map(y<span class="number">-2</span>+len))) + <span class="number">360</span> , <span class="number">360</span>), <span class="built_in">mod</span>(points(index(y)) - points(index(map(y<span class="number">-1</span> + len))) + <span class="number">360</span>, <span class="number">360</span> ) )) ...</span><br><span class="line">            + <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(y)) - points(index(map(y<span class="number">-1</span>+len))) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>(points(index(map(y+<span class="number">1</span>))) - points(index(y)) + <span class="number">360</span>, <span class="number">360</span>) )) ...</span><br><span class="line">            + <span class="built_in">log</span>(<span class="number">2</span>* <span class="built_in">min</span>( <span class="built_in">mod</span>(points(index(map(y+<span class="number">1</span>))) - points(index(y)) + <span class="number">360</span>, <span class="number">360</span>), <span class="built_in">mod</span>(points(index(map(y+<span class="number">2</span>))) - points(index(map(y+<span class="number">1</span>))) + <span class="number">360</span>, <span class="number">360</span>) ));</span><br><span class="line">        </span><br><span class="line">        index1 = index;  <span class="comment">% 调用我们自己写的gen_new_way函数生成新的方案</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> delta &gt; <span class="number">0</span>    <span class="comment">% 如果新方案的花费小于当前方案的花费</span></span><br><span class="line">            index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">            h0 = h0 + delta;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">%             p = exp(-(money1 - money0)/T); % 根据Metropolis准则计算一个概率</span></span><br><span class="line">            p = <span class="built_in">exp</span>(delta/T); <span class="comment">% 根据Metropolis准则计算一个概率</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">rand</span>(<span class="number">1</span>) &lt; p   <span class="comment">% 生成一个随机数和这个概率比较，如果该随机数小于这个概率</span></span><br><span class="line">                index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">                h0 = h0 + delta;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% 判断是否要更新找到的最佳的解</span></span><br><span class="line">        <span class="keyword">if</span> h0 &gt; min_money  <span class="comment">% 如果当前解更好，则对其进行更新</span></span><br><span class="line">            min_money = h0;  <span class="comment">% 更新最大的花费</span></span><br><span class="line">            best_way = index1;  <span class="comment">% 更新找到的最佳方案</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    MONEY(iter) = min_money; <span class="comment">% 保存本轮外循环结束后找到的最小花费</span></span><br><span class="line">    T = alfa*T;   <span class="comment">% 温度下降</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最佳的方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(best_way))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(min_money)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画出每次迭代后找到的最佳方案的图形</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:maxgen,MONEY,<span class="string">&#x27;b-&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;迭代次数&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;最小花费&#x27;</span>);</span><br><span class="line"><span class="comment">% toc</span></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106185725474.png" alt="image-20230106185725474"></p><p>用py验证一下</p><p>改变一下distance的定义，由于要循环</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_h</span>(<span class="params">x, k=<span class="number">1</span>, norm=<span class="string">&#x27;max&#x27;</span>, min_dist=<span class="number">0.</span></span>):</span></span><br><span class="line">    n, d = x.shape</span><br><span class="line"></span><br><span class="line">    p = <span class="number">2</span></span><br><span class="line">    log_c_d = (d/<span class="number">2.</span>) * log(np.pi) - log(gamma(d/<span class="number">2.</span> + <span class="number">1</span>))</span><br><span class="line">    print(log_c_d)</span><br><span class="line"></span><br><span class="line">    kdtree = cKDTree(x)</span><br><span class="line"></span><br><span class="line">    distances, _ = kdtree.query(x, k + <span class="number">1</span>, eps=<span class="number">0</span>, p=p)</span><br><span class="line">    distances = distances[:, -<span class="number">1</span>]</span><br><span class="line">    distances[<span class="number">0</span>] = <span class="built_in">min</span>(x[<span class="number">1</span>] - x[<span class="number">0</span>], x[<span class="number">0</span>] + <span class="number">360</span> - x[-<span class="number">1</span>])</span><br><span class="line">    distances[-<span class="number">1</span>] = <span class="built_in">min</span>(x[-<span class="number">1</span>] - x[-<span class="number">2</span>], x[<span class="number">0</span>] + <span class="number">360</span> - x[-<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">&quot;distance&quot;</span>, distances)</span><br><span class="line">    <span class="comment"># enforce non-zero distances</span></span><br><span class="line">    distances[distances &lt; min_dist] = min_dist</span><br><span class="line">    <span class="comment"># where did the 2 come from? radius -&gt; diameter</span></span><br><span class="line">    sum_log_dist = np.<span class="built_in">sum</span>(log(<span class="number">2</span>*distances))</span><br><span class="line">    h = sum_log_dist</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure><p>初始方案是：<br>[26 27 36 38 52 64 69 77 86 102 132 149 150 154 156 157 173 187 199 201]<br>此时最优值是：<br>   26.7911</p><p>最佳的方案是：<br>[5 12 19 27 44 57 87 103 110 120 126 132 138 147 152 165 172 188 198 210]<br>此时最优值是：<br>   70.6790</p><p>历时 3.124118 秒。</p><p>迭代计算只需要计算那改变的6个点，试试直接计算h0 看时间会多慢</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 模拟退火解决书店买书问题  % 466</span></span><br><span class="line">clear all; clc; close all;</span><br><span class="line">tic</span><br><span class="line">load points;</span><br><span class="line">points = <span class="built_in">sort</span>(points);</span><br><span class="line">rng(<span class="string">&#x27;shuffle&#x27;</span>)  <span class="comment">% 控制随机数的生成，否则每次打开matlab得到的结果都一样</span></span><br><span class="line">len = <span class="number">20</span>;</span><br><span class="line">map = [<span class="number">1</span>:len,<span class="number">1</span>:len];</span><br><span class="line"><span class="comment">% 这个数据文件里面保存了两个矩阵：M是每本书在每家店的价格; freight表示每家店的运费</span></span><br><span class="line"><span class="comment">% [s, b] = size(M);  % s是书店的数量，b是要购买的书的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 参数初始化</span></span><br><span class="line">T0 = <span class="number">1000</span>;   <span class="comment">% 初始温度</span></span><br><span class="line">T = T0; <span class="comment">% 迭代中温度会发生改变，第一次迭代时温度就是T0</span></span><br><span class="line">maxgen = <span class="number">500</span>;  <span class="comment">% 最大迭代次数</span></span><br><span class="line">Lk = <span class="number">200</span>;  <span class="comment">% 每个温度下的迭代次数</span></span><br><span class="line">alfa = <span class="number">0.95</span>;  <span class="comment">% 温度衰减系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%  随机生成一个初始解</span></span><br><span class="line">A = int32(<span class="number">1</span>:<span class="built_in">length</span>(points));</span><br><span class="line">random_num = A(randperm(<span class="built_in">numel</span>(A),len));</span><br><span class="line">index0 = <span class="built_in">sort</span>(random_num);</span><br><span class="line">h0 = Copy_of_totalH(points, index0, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">% way0 = randi([1, s],1,b); % 在1-s这些整数中随机抽取一个1*b的向量，表示这b本书分别在哪家书店购买</span></span><br><span class="line"><span class="comment">% money0 = calculate_money(way0,freight,M,b); % 调用我们自己写的calculate_money函数计算这个方案的花费</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;初始方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(index0))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(h0)</span><br><span class="line"><span class="comment">%% 定义一些保存中间过程的量，方便输出结果和画图</span></span><br><span class="line">min_money = h0;     <span class="comment">% 初始化找到的最佳的解对应的花费为money0</span></span><br><span class="line">MONEY = <span class="built_in">zeros</span>(maxgen,<span class="number">1</span>); <span class="comment">% 记录每一次外层循环结束后找到的min_money (方便画图）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 模拟退火过程</span></span><br><span class="line"><span class="keyword">for</span> iter = <span class="number">1</span> : maxgen  <span class="comment">% 外循环, 我这里采用的是指定最大迭代次数</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Lk  <span class="comment">%  内循环，在每个温度下开始迭代</span></span><br><span class="line">        index = index0;</span><br><span class="line">        x_num = index(randperm(<span class="built_in">numel</span>(index),<span class="number">1</span>));</span><br><span class="line">        x = <span class="built_in">find</span>(index == x_num);</span><br><span class="line">        shengxia = setxor(A, index);</span><br><span class="line">        y_num = shengxia(randperm(<span class="built_in">numel</span>(shengxia),<span class="number">1</span>));</span><br><span class="line">        index(x) = y_num;</span><br><span class="line">        index = <span class="built_in">sort</span>(index);      </span><br><span class="line">        index1 = index;  <span class="comment">% 调用我们自己写的gen_new_way函数生成新的方案</span></span><br><span class="line"></span><br><span class="line">        h1 = Copy_of_totalH(points, index1, len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> h1 &gt; h0    <span class="comment">% 如果新方案的花费小于当前方案的花费</span></span><br><span class="line">            index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">            h0 = h1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">%             p = exp(-(money1 - money0)/T); % 根据Metropolis准则计算一个概率</span></span><br><span class="line">            p = <span class="built_in">exp</span>((h1 - h0)/T); <span class="comment">% 根据Metropolis准则计算一个概率</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">rand</span>(<span class="number">1</span>) &lt; p   <span class="comment">% 生成一个随机数和这个概率比较，如果该随机数小于这个概率</span></span><br><span class="line">                index0 = index1; <span class="comment">% 更新当前方案为新方案</span></span><br><span class="line">                h0 = h1;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="comment">% 判断是否要更新找到的最佳的解</span></span><br><span class="line">        <span class="keyword">if</span> h0 &gt; min_money  <span class="comment">% 如果当前解更好，则对其进行更新</span></span><br><span class="line">            min_money = h0;  <span class="comment">% 更新最大的花费</span></span><br><span class="line">            best_way = index1;  <span class="comment">% 更新找到的最佳方案</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    MONEY(iter) = min_money; <span class="comment">% 保存本轮外循环结束后找到的最小花费</span></span><br><span class="line">    T = alfa*T;   <span class="comment">% 温度下降</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最佳的方案是：&#x27;</span>); <span class="built_in">disp</span>(mat2str(best_way))</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;此时最优值是：&#x27;</span>); <span class="built_in">disp</span>(min_money)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画出每次迭代后找到的最佳方案的图形</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:maxgen,MONEY,<span class="string">&#x27;b-&#x27;</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;迭代次数&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;最小花费&#x27;</span>);</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><p>历时 3.305654 秒。</p><p>但耗时也不多</p><p>但增加迭代次数</p><p>maxgen = 1000;  % 最大迭代次数<br>Lk = 1000;  % 每个温度下的迭代次数</p><p>初始方案是：<br>[10 26 35 62 76 77 91 120 129 130 141 151 163 166 176 180 182 208 209 214]<br>此时最优值是：<br>   43.8157</p><p>最佳的方案是：<br>[10 17 23 40 53 67 90 105 110 120 126 131 138 148 153 166 172 188 200 214]<br>此时最优值是：<br>   70.7798</p><p><strong>历时 31.648947 秒。</strong></p><p>而只用6个点的数据</p><p><strong>历时 29.961089 秒。</strong></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106194131081.png" alt="image-20230106194131081"></p><p>708个点选50个点也只需要4s</p><p>初始方案是：<br>[7 32 33 83 98 103 106 113 139 152 161 164 171 201 220 229 235 257 280 298 299 319 332 349 352 355 360 365 373 393 401 407 434 450 455 470 479 506 508 531 540 548 565 566 589 603 640 679 689 707]<br>此时最优值是：<br>   73.5312</p><p>最佳的方案是：<br>[12 26 39 52 64 74 82 93 119 132 151 166 184 208 230 255 271 285 296 305 320 329 342 350 359 367 379 389 406 427 439 455 466 474 486 492 503 519 530 544 561 577 598 615 630 639 651 672 686 708]<br>此时最优值是：<br>  130.3724</p><p>历时 4.013932 秒。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20230106195352809.png" alt="image-20230106195352809"></p><p>绝对完美的20个点是怎么样的</p><p>K-L estimator: 71.67038</p><p>50个点则是</p><p>K-L estimator: 133.36141</p><hr><p>研究一下归一化</p>]]></content>
    
    
    <summary type="html">第6/7/8周的成果，一直在探索评价均匀性的指标，其中尝试过ks检验、kl散度，最终发现了熵的Kozachenko-Leonenko k近邻估计量这个方法。其中包括12.21开始的新冠，一直到12.29恢复工作。在发现了熵的评价标准后，12月31日尝试用动态规划进行求解，但耗时过长，然后从1月3号开始学习模拟退火直到1月6日完成一维数据实验。</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>冲毕业第五周记录</title>
    <link href="https://tsuiwade.github.io/2022/12/19/blog69-study4/"/>
    <id>https://tsuiwade.github.io/2022/12/19/blog69-study4/</id>
    <published>2022-12-19T16:29:26.000Z</published>
    <updated>2022-12-19T16:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来将由已经处理过的j2000转为视赤经赤纬，再转为地平坐标 J2000_x_hor。</p><p>设定时间为2022.12.10. 20：00，儒略日为2459924，经纬度为合肥{31.8642, 117.287}</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Downloads\\hip2.dat\\J2000_2.csv&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Downloads\\hip2.dat\\J2000_2_hor.csv&quot;</span>)</span></span>;</span><br><span class="line">    cat_entry fk5;</span><br><span class="line">    site_info loc = &#123;<span class="number">31.8642</span>, <span class="number">117.287</span>&#125;; <span class="comment">// 温度10摄氏度 高度10米 大气压1013毫巴=1013百帕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ra, dec, zd, az, hgmag;</span><br><span class="line">    <span class="built_in">string</span> lineStr;</span><br><span class="line">    <span class="keyword">double</span> tjd = <span class="number">2459924</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (getline(inFile, lineStr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.starnumber = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.ra = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.dec = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.promora = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.promodec = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        fk5.parallax = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        hgmag = stod(str);</span><br><span class="line">        app_star(tjd, &amp;fk5, &amp;ra, &amp;dec);</span><br><span class="line">        <span class="comment">// outFile &lt;&lt; fk5.starnumber &lt;&lt; &quot;,&quot; &lt;&lt; ra &lt;&lt; &quot;,&quot; &lt;&lt; dec &lt;&lt; &quot;,&quot; &lt;&lt; hgmag &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">        equ2hor(tjd, &amp;loc, ra, dec, &amp;zd, &amp;az);</span><br><span class="line">        outFile &lt;&lt; fk5.starnumber &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; az &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="number">90</span> - zd &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; hgmag &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算6.5等星也只需0.131s</p><p>2等星 46个星 当前时刻地平以上的有20个</p><p>3等星 165个星 当前时刻地平以上的有67个</p><p>4等星 480个星 当前时刻地平以上的有214个</p><p>5等星 1471个星 当前时刻地平以上的有708个</p><p>6等星 4559个星 当前时刻地平以上的有2219个</p><p>6.5等星 7982个星 当前时刻地平以上的有3933个</p><p>目前文件夹目录下有这些文件</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221213110004613.png" alt="image-20221213110004613"></p><hr><p>试试用qt显示</p><p>2等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201307020.png" alt="image-20221212201307020"></p><p>3等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201202828.png" alt="image-20221212201202828"></p><p>和下方对比 差不多</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201154933.png" alt="image-20221212201154933"></p><p>4等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201741568.png" alt="image-20221212201741568"></p><p>5等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201732161.png" alt="image-20221212201732161"></p><p>画到五等星还算较快，后面就很慢了 可以尝试用qpen来画</p><p>6等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212201933313.png" alt="image-20221212201933313"></p><p>6.5等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221212202045109.png" alt="image-20221212202045109"></p><hr><p>研究半圆球上的基准点的均匀性问题。还是很难实现，并且没有玻尔兹曼熵来作为参考，并且需要从天顶出发实时计算高度方位，当我望远镜转至该位置时，其他星点已离开螺旋基准点 最终形成的星点方位高度可能不均匀。</p><p>还是决定使用全天球的螺旋基准点，并且所有恒星围绕极轴转是一个天然的性质。并且可以一次选取 终生可用 任意时间可用。（但这也是错的想法，并不适用于地平式望远镜选星，只适用于星敏感器的导航星筛选。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221213170528293.png" alt="image-20221213170528293"></p><p>将赤经赤纬坐标转为xyz轴</p><p>以右手坐标系为例，z轴指向北极点（高度角90度），x指向东（方位角90度），y指向北（方位角0度）</p><p>极坐标转xyz轴</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="built_in">sin</span>(ra) * <span class="built_in">sin</span>(dec);</span><br><span class="line"><span class="keyword">double</span> y = <span class="built_in">cos</span>(ra) * <span class="built_in">sin</span>(dec);</span><br><span class="line"><span class="keyword">double</span> z = <span class="built_in">cos</span>(dec);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> num = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> DEG2RAD = <span class="number">0.017453292519943296</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ra, dec, x, y, z;</span><br><span class="line">    <span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Desktop\\hip2.dat\\J2000_&quot;</span> + num + <span class="string">&quot;.csv&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Desktop\\hip2.dat\\J2000_&quot;</span> + num + <span class="string">&quot;_xyz.csv&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> lineStr;</span><br><span class="line">    <span class="keyword">while</span> (getline(inFile, lineStr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="built_in">string</span> starnumber = str;</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">double</span> ra = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">double</span> dec = stod(str);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">double</span> hgmag = stod(str);</span><br><span class="line"></span><br><span class="line">        ra *= DEG2RAD;</span><br><span class="line">        dec *= DEG2RAD;</span><br><span class="line">        x = <span class="built_in">sin</span>(ra) * <span class="built_in">cos</span>(dec);</span><br><span class="line">        y = <span class="built_in">cos</span>(ra) * <span class="built_in">cos</span>(dec);</span><br><span class="line">        z = <span class="built_in">sin</span>(dec);</span><br><span class="line">        outFile &lt;&lt; starnumber &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; z &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; hgmag &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>测了一下正20面体的12个顶点的玻尔兹曼熵为0</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.850650808352040-0.5257311121191340</span><br><span class="line">0.8506508083520400.5257311121191340</span><br><span class="line">-0.8506508083520400.5257311121191340</span><br><span class="line">-0.850650808352040-0.5257311121191340</span><br><span class="line">00.850650808352040-0.525731112119134</span><br><span class="line">00.8506508083520400.525731112119134</span><br><span class="line">0-0.8506508083520400.525731112119134</span><br><span class="line">0-0.850650808352040-0.525731112119134</span><br><span class="line">-0.52573111211913400.850650808352040</span><br><span class="line">0.52573111211913400.850650808352040</span><br><span class="line">0.5257311121191340-0.850650808352040</span><br><span class="line">-0.5257311121191340-0.850650808352040</span><br></pre></td></tr></table></figure><p>再测个足球 <a href="https://blog.sciencenet.cn/blog-2321-383987.html">https://blog.sciencenet.cn/blog-2321-383987.html</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.850651,0,2.327438;</span><br><span class="line">.262866,.809017,2.327438;</span><br><span class="line">.262866,-.809017,2.327438;</span><br><span class="line">-.688191,.5,2.327438;</span><br><span class="line">-.688191,-.5,2.327438;</span><br><span class="line">1.701301,0,1.801708;</span><br><span class="line">.52573,1.618035,1.801708;</span><br><span class="line">.52573,-1.618035,1.801708;</span><br><span class="line">-1.376383,.999999,1.801708;</span><br><span class="line">-1.376383,-.999999,1.801708;</span><br><span class="line">1.964166,.809017,1.275977;</span><br><span class="line">1.964166,-.809017,1.275977;</span><br><span class="line">1.376381,1.618035,1.275977;</span><br><span class="line">1.376381,-1.618035,1.275977;</span><br><span class="line">-.162461,2.118035,1.275977;</span><br><span class="line">-.162461,-2.118035,1.275977;</span><br><span class="line">-1.113517,1.809017,1.275977;</span><br><span class="line">-1.113517,-1.809017,1.275977;</span><br><span class="line">-2.064574,.5,1.275977;</span><br><span class="line">-2.064574,-.5,1.275977;</span><br><span class="line">2.389492,.5,.425326;</span><br><span class="line">2.389492,-.5,.425326;</span><br><span class="line">1.213921,2.118035,.425326;</span><br><span class="line">1.213921,-2.118035,.425326;</span><br><span class="line">.262865,2.427051,.425326;</span><br><span class="line">.262865,-2.427051,.425326;</span><br><span class="line">-1.639248,1.809017,.425326;</span><br><span class="line">-1.639248,-1.809017,.425326;</span><br><span class="line">-2.227033,.999999,.425326;</span><br><span class="line">-2.227033,-.999999,.425326;</span><br><span class="line">2.227033,.999999,-.425326;</span><br><span class="line">2.227033,-.999999,-.425326;</span><br><span class="line">1.639248,1.809017,-.425326;</span><br><span class="line">1.639248,-1.809017,-.425326;</span><br><span class="line">-.262865,2.427051,-.425326;</span><br><span class="line">-.262865,-2.427051,-.425326;</span><br><span class="line">-1.213921,2.118035,-.425326;</span><br><span class="line">-1.213921,-2.118035,-.425326;</span><br><span class="line">-2.389492,.5,-.425326;</span><br><span class="line">-2.389492,-.5,-.425326;</span><br><span class="line">2.064574,.5,-1.275977;</span><br><span class="line">2.064574,-.5,-1.275977;</span><br><span class="line">1.113517,1.809017,-1.275977;</span><br><span class="line">1.113517,-1.809017,-1.275977;</span><br><span class="line">.162461,2.118035,-1.275977;</span><br><span class="line">.162461,-2.118035,-1.275977;</span><br><span class="line">-1.376381,1.618035,-1.275977;</span><br><span class="line">-1.376381,-1.618035,-1.275977;</span><br><span class="line">-1.964166,.809017,-1.275977;</span><br><span class="line">-1.964166,-.809017,-1.275977;</span><br><span class="line">1.376383,.999999,-1.801708;</span><br><span class="line">1.376383,-.999999,-1.801708;</span><br><span class="line">-.52573,1.618035,-1.801708;</span><br><span class="line">-.52573,-1.618035,-1.801708;</span><br><span class="line">-1.701301,0,-1.801708;</span><br><span class="line">.688191,.5,-2.327438;</span><br><span class="line">.688191,-.5,-2.327438;</span><br><span class="line">-.262866,.809017,-2.327438;</span><br><span class="line">-.262866,-.809017,-2.327438;</span><br><span class="line">-.850651,0,-2.327438</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221213231323743.png" alt="image-20221213231323743"></p><p>正四面体也同样</p><p><a href="http://web.archive.org/web/20120421191837/http://www.cgafaq.info/wiki/Evenly_distributed_points_on_sphere">http://web.archive.org/web/20120421191837/http://www.cgafaq.info/wiki/Evenly_distributed_points_on_sphere</a> 中提到</p><p>均匀分布没有得到很好的定义。从最严格的意义上来说，只有五个柏拉图立体(以及在一个大圆上所有节点间距相等的退化排列的无限族)可以符合条件: 每个节点有相同数量的邻居，在相同的距离，相同的间距。</p><p>突然发现一个很大的问题，我不能使用该方法来寻找星点，因为这种均匀分布是星点之间的角距的均匀分布，在观测时高度越高观测点越少，在高度低的地方观测点较多，其实并不适用于机架的校正。机架的校正应该按照经纬度网格来均匀选取。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214161314056.png" alt="image-20221214161314056"></p><p>那么其实就可以将头顶的天区展开为一个矩形，方位和高度为边的矩形，研究在矩形上的二维均匀分布。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214161442139.png" alt="image-20221214161442139"></p><p>浅画一下二维的高度方位图（5等星</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214164714085.png" alt="image-20221214164714085"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214174203207.png" alt="image-20221214174203207"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221214174257089.png" alt="image-20221214174257089"></p>]]></content>
    
    
    <summary type="html">第五周主要完成了星表的地平位置绘制，研究选星的均匀性问题，排除了导航星中在球上的选星及玻尔兹曼熵的评价标准，定位到地平式望远镜的高度角、方位角的二维矩形中的均匀选星问题。</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>冲毕业第四周记录</title>
    <link href="https://tsuiwade.github.io/2022/12/10/blog68-study3/"/>
    <id>https://tsuiwade.github.io/2022/12/10/blog68-study3/</id>
    <published>2022-12-10T16:57:34.000Z</published>
    <updated>2022-12-10T16:57:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221210165212635.png" alt="image-20221210165212635"></p><p>很奇怪j2000不是一个固定的值吗（其实自己也不是很清楚</p><p>但Stellarium软件的J2000值在变</p><p>问了天文同学也不太清楚， 直接在Stellarium的github 讨论区问作者。</p><p>作者回答</p><p>Please do not use Stellarium as source or reference for own work. It has its own errors.</p><p>That said, to compare, set Stellarium to J1991.25 (to set proper motion自行), and observe the J2000 1月1日12时 儒略日 coordinates. At least disable aberration and probably even nutation章动. Or observe from the center of the Sun.</p><p>当我从设置观测点为太阳时，设置儒略日 <code>完美对上!</code></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221206205114703.png" alt="image-20221206205114703"></p><p>得到的J2000</p><p>与</p><p><a href="https://github.com/gmiller123456/hip2000">https://github.com/gmiller123456/hip2000</a></p><p>项目中 使用NOVAS（Naval Observatory Vector Astrometry Subroutines）库的transform_hip功能</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221206205154919.png" alt="image-20221206205154919"></p><p>一致</p><hr><p>hipparcos源文件中的北落师门 hip = 113368 </p><p>ra = 6.011119421 rad</p><p>ra = 344.411772972423023020 度 </p><p>ra = 22.960784864828202245 h</p><p>ra = h: 22 m: 57 s: 38.825513381528082846</p><p>dec = -29.621836820143990110</p><p>dec =  h: -29 m: 37 s: 18.612552518364395837</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ra = <span class="number">6.011119421</span>;</span><br><span class="line">    <span class="keyword">double</span> dec = <span class="number">-0.516998583</span>;</span><br><span class="line">    <span class="keyword">double</span> decd = dec * <span class="number">180</span> / PI;</span><br><span class="line">    <span class="keyword">double</span> rad = ra * <span class="number">180</span> / PI;</span><br><span class="line">    <span class="keyword">double</span> rah = rad / <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">18</span>) &lt;&lt; rad &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rah &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; h: &quot;</span> &lt;&lt; (<span class="keyword">int</span>)rah &lt;&lt; <span class="string">&quot; m: &quot;</span> &lt;&lt; <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; s: &quot;</span> &lt;&lt; <span class="number">60</span> * ((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span> - <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; decd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; h: &quot;</span> &lt;&lt; (<span class="keyword">int</span>)decd &lt;&lt; <span class="string">&quot; m: &quot;</span> &lt;&lt; <span class="built_in">abs</span>(<span class="keyword">int</span>((decd - <span class="keyword">int</span>(decd)) * <span class="number">60</span>)) &lt;&lt; <span class="string">&quot; s: &quot;</span> &lt;&lt; <span class="built_in">abs</span>(<span class="number">60</span> * ((decd - <span class="keyword">int</span>(decd)) * <span class="number">60</span> - <span class="keyword">int</span>((decd - <span class="keyword">int</span>(decd)) * <span class="number">60</span>))) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>研究一下novas库如何实现将j1991.25到J2000的</p><p><a href="https://github.com/brandon-rhodes/python-novas">https://github.com/brandon-rhodes/python-novas</a></p><p>看说明先装novas库，可惜不能支持windows</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221206215016569.png" alt="image-20221206215016569"></p><p>这是已易于使用的Hipparcos目录的更改版本。原始目录具有1991.25的Equinox的RA/DEC坐标。在这里，我使用NOVA函数“ transform_hip”将坐标转换为J2000。</p><hr><p>在海军天文台novas.c中有一个函数transform_hip，作用是将 依巴谷原始星表中的J1991.25纪元的数据转换为FK5形式的数据，专用于依巴谷星表，</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********transform_hip */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform_hip</span> <span class="params">(cat_entry *hipparcos, cat_entry *fk5)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">   PURPOSE:</span></span></span><br><span class="line"><span class="function"><span class="comment">      To convert Hipparcos data at epoch J1991.25 to epoch J2000.0 and</span></span></span><br><span class="line"><span class="function"><span class="comment">      FK5-style units.  To be used only for Hipparcos or Tycho stars </span></span></span><br><span class="line"><span class="function"><span class="comment">      with linear space motion.</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">   INPUT</span></span></span><br><span class="line"><span class="function"><span class="comment">   ARGUMENTS:</span></span></span><br><span class="line"><span class="function"><span class="comment">      *hipparcos (struct cat_entry)</span></span></span><br><span class="line"><span class="function"><span class="comment">         An entry from the Hipparcos catalog, at epoch J1991.25, with </span></span></span><br><span class="line"><span class="function"><span class="comment">         all members having Hipparcos catalog units.  See Note 1</span></span></span><br><span class="line"><span class="function"><span class="comment">         below (struct defined in novas.h).</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">   OUTPUT</span></span></span><br><span class="line"><span class="function"><span class="comment">   ARGUMENTS:</span></span></span><br><span class="line"><span class="function"><span class="comment">      *fk5 (struct cat_entry)</span></span></span><br><span class="line"><span class="function"><span class="comment">         The transformed input entry, at epoch J2000.0, with all </span></span></span><br><span class="line"><span class="function"><span class="comment">         members having FK5 catalog units.  See Note 2 below (struct </span></span></span><br><span class="line"><span class="function"><span class="comment">         defined in novas.h).</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">   NOTES:</span></span></span><br><span class="line"><span class="function"><span class="comment">      1. Hipparcos epoch and units:</span></span></span><br><span class="line"><span class="function"><span class="comment">         Epoch: J1991.25</span></span></span><br><span class="line"><span class="function"><span class="comment">         Right ascension (RA): degrees</span></span></span><br><span class="line"><span class="function"><span class="comment">         Declination (Dec): degrees</span></span></span><br><span class="line"><span class="function"><span class="comment">         Proper motion in RA * cos (Dec): milliarcseconds per year</span></span></span><br><span class="line"><span class="function"><span class="comment">         Proper motion in Dec: milliarcseconds per year</span></span></span><br><span class="line"><span class="function"><span class="comment">         Parallax: milliarcseconds</span></span></span><br><span class="line"><span class="function"><span class="comment">         Radial velocity: kilometers per second (not in catalog)</span></span></span><br><span class="line"><span class="function"><span class="comment">      2. FK5 epoch and units:</span></span></span><br><span class="line"><span class="function"><span class="comment">         Epoch: J2000.0</span></span></span><br><span class="line"><span class="function"><span class="comment">         Right ascension: hours</span></span></span><br><span class="line"><span class="function"><span class="comment">         Declination: degrees</span></span></span><br><span class="line"><span class="function"><span class="comment">         Proper motion in RA: seconds of time per Julian century</span></span></span><br><span class="line"><span class="function"><span class="comment">         Proper motion in Dec: arcseconds per Julian century</span></span></span><br><span class="line"><span class="function"><span class="comment">         Parallax: arcseconds</span></span></span><br><span class="line"><span class="function"><span class="comment">         Radial velocity: kilometers per second</span></span></span><br><span class="line"><span class="function"><span class="comment">      3. This function based on subroutine &#x27;gethip&#x27; from NOVAS Fortran.</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">double</span> epoch_hip = <span class="number">2448349.0625</span>;</span><br><span class="line">   <span class="keyword">double</span> epoch_fk5 = <span class="number">2451545.0000</span>;</span><br><span class="line"></span><br><span class="line">   cat_entry scratch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   The &quot;scratch&quot; catalog entry contains data with FK5-like units at </span></span><br><span class="line"><span class="comment">   epoch J1991.25.  Copy the catalog entry quantities that don&#x27;t </span></span><br><span class="line"><span class="comment">   change from the Hipparcos catalog entry to the &quot;scratch&quot; entry.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">strcpy</span> (scratch.starname, hipparcos-&gt;starname);</span><br><span class="line">   scratch.starnumber = hipparcos-&gt;starnumber;</span><br><span class="line">   scratch.dec = hipparcos-&gt;dec;</span><br><span class="line">   scratch.radialvelocity = hipparcos-&gt;radialvelocity;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">strcpy</span> (scratch.catalog, <span class="string">&quot;SCR&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Convert Hipparcos units to FK5-like units; insert transformed</span></span><br><span class="line"><span class="comment">   quantities into the &quot;scratch&quot; catalog entry.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">   scratch.ra = hipparcos-&gt;ra / <span class="number">15.0</span>;</span><br><span class="line">   scratch.promora = hipparcos-&gt;promora / (<span class="number">150.0</span> * </span><br><span class="line">      <span class="built_in">cos</span> (hipparcos-&gt;dec * DEG2RAD));</span><br><span class="line">   scratch.promodec = hipparcos-&gt;promodec / <span class="number">10.0</span>;</span><br><span class="line">   scratch.parallax = hipparcos-&gt;parallax / <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Change the epoch of the Hipparcos data from J1991.25 to J2000.0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">   transform_cat (<span class="number">1</span>,epoch_hip,&amp;scratch,epoch_fk5,<span class="string">&quot;FK5&quot;</span>, fk5);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user guide中写道：Radial velocity (hipparcos-&gt;radialvelocity) is not given in the Hipparcos catalog. If a value is not known, set hipparcos-&gt;radialvelocity = 0.0. The radial velocity is important for only a small number of nearby, high proper motion stars.</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221207150407348.png" alt="image-20221207150407348"></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> TWOPI = <span class="number">6.28318530717958647692</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> DEG2RAD = <span class="number">0.017453292519943296</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RAD2DEG = <span class="number">57.295779513082321</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RAD2SEC = <span class="number">206264.806247096355</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_hip = <span class="number">2448349.0625</span>; <span class="comment">// J1991.25</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_fk5 = <span class="number">2451545.0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ARGUMENTS:</span></span><br><span class="line"><span class="comment">    in :</span></span><br><span class="line"><span class="comment">        hip_ra (rad)</span></span><br><span class="line"><span class="comment">        hip_dec (rad)</span></span><br><span class="line"><span class="comment">        hip_promora (mas/yr)</span></span><br><span class="line"><span class="comment">        hip_promodec (mas/yr)</span></span><br><span class="line"><span class="comment">        hip_parallax (mas)</span></span><br><span class="line"><span class="comment">    out :</span></span><br><span class="line"><span class="comment">        fk5_ra(h)</span></span><br><span class="line"><span class="comment">        fk5_dec(degree)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">double</span> hip_ra, <span class="keyword">double</span> hip_dec, <span class="keyword">double</span> hip_promora, <span class="keyword">double</span> hip_promodec, <span class="keyword">double</span> hip_parallax, <span class="keyword">double</span> &amp;fk5_ra, <span class="keyword">double</span> &amp;fk5_dec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    hip_ra = hip_ra * RAD2DEG / <span class="number">15.0</span>;</span><br><span class="line">    hip_promora = hip_promora / (<span class="number">150.0</span> * <span class="built_in">cos</span>(hip_dec));</span><br><span class="line">    hip_dec *= RAD2DEG;</span><br><span class="line">    hip_promodec /= <span class="number">10.0</span>;</span><br><span class="line">    hip_parallax /= <span class="number">1000.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (hip_parallax &lt;= <span class="number">0.0</span>)</span><br><span class="line">        hip_parallax = <span class="number">1.0e-7</span>;</span><br><span class="line">    <span class="keyword">double</span> dist = RAD2SEC / hip_parallax;</span><br><span class="line">    <span class="keyword">double</span> r = hip_ra * <span class="number">54000.0</span> / RAD2SEC;</span><br><span class="line">    <span class="keyword">double</span> d = hip_dec * <span class="number">3600.0</span> / RAD2SEC;</span><br><span class="line">    <span class="keyword">double</span> cra, sra, cdc, sdc, pos1[<span class="number">3</span>], term1, pmr, pmd, vel1[<span class="number">3</span>], pos2[<span class="number">3</span>], xyproj;</span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line">    pos1[<span class="number">0</span>] = dist * cdc * cra;</span><br><span class="line">    pos1[<span class="number">1</span>] = dist * cdc * sra;</span><br><span class="line">    pos1[<span class="number">2</span>] = dist * sdc;</span><br><span class="line">    term1 = hip_parallax * <span class="number">36525.0</span>;</span><br><span class="line">    pmr = hip_promora * <span class="number">15.0</span> * cdc / term1;</span><br><span class="line">    pmd = hip_promodec / term1;</span><br><span class="line">    vel1[<span class="number">0</span>] = -pmr * sra - pmd * sdc * cra;</span><br><span class="line">    vel1[<span class="number">1</span>] = pmr * cra - pmd * sdc * sra;</span><br><span class="line">    vel1[<span class="number">2</span>] = pmd * cdc;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos2[j] = pos1[j] + vel1[j] * (epoch_fk5 - epoch_hip);</span><br><span class="line">    &#125;</span><br><span class="line">    xyproj = <span class="built_in">sqrt</span>(pos2[<span class="number">0</span>] * pos2[<span class="number">0</span>] + pos2[<span class="number">1</span>] * pos2[<span class="number">1</span>]);</span><br><span class="line">    r = <span class="built_in">atan2</span>(pos2[<span class="number">1</span>], pos2[<span class="number">0</span>]);</span><br><span class="line">    d = <span class="built_in">atan2</span>(pos2[<span class="number">2</span>], xyproj);</span><br><span class="line">    fk5_ra = r * RAD2SEC / <span class="number">54000.0</span>;</span><br><span class="line">    fk5_dec = d * RAD2SEC / <span class="number">3600.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fk5_ra &lt; <span class="number">0.0</span>)</span><br><span class="line">        fk5_ra += <span class="number">24.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> hip_ra = <span class="number">6.011119421</span>;</span><br><span class="line">    <span class="keyword">double</span> hip_dec = <span class="number">-0.516998583</span>;</span><br><span class="line">    <span class="keyword">double</span> hip_promora = <span class="number">328.95</span>;</span><br><span class="line">    <span class="keyword">double</span> hip_promodec = <span class="number">-164.67</span>;</span><br><span class="line">    <span class="keyword">double</span> hip_parallax = <span class="number">129.81</span>;</span><br><span class="line">    <span class="keyword">double</span> fk5_ra, fk5_dec;</span><br><span class="line"></span><br><span class="line">    convert(hip_ra, hip_dec, hip_promora, hip_promodec, hip_parallax, fk5_ra, fk5_dec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> rah = fk5_ra;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; ra: &quot;</span> &lt;&lt; fk5_ra;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; rah: &quot;</span> &lt;&lt; <span class="keyword">int</span>(rah) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="number">60</span> * ((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span> - <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fk5_dec &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">double</span> dech = fk5_dec;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; dech &quot;</span> &lt;&lt; <span class="keyword">int</span>(dech) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="keyword">int</span>((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="number">60</span> * ((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span> - <span class="keyword">int</span>((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p>研究一下j2000转 <code>视赤道坐标</code> 的转换</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">app_star</span> <span class="params">(<span class="keyword">double</span> tjd, body *earth, cat_entry *star, <span class="keyword">double</span> *ra, <span class="keyword">double</span> *dec)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*   PURPOSE:</span></span></span><br><span class="line"><span class="function"><span class="comment">      Computes the apparent place of a star at date &#x27;tjd&#x27;, given its mean place, proper motion, parallax, and radial velocity for J2000.0.</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">get_earth</span> <span class="params">(<span class="keyword">double</span> tjd, body *earth,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">double</span> *tdb,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">double</span> *bary_earthp, <span class="keyword">double</span> *bary_earthv,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">double</span> *helio_earthp, <span class="keyword">double</span> *helio_earthv)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//  Obtains the barycentric &amp; heliocentric positions and velocities of the Earth from the solar system ephemeris. 从太阳系星历表中获取地球的重心和日心位置和速度。</span></span></span><br></pre></td></tr></table></figure><p>在novas第一个函数中</p><p>TDB：质心力学时 和 tjd：在novas中就是儒略日；</p><p>TT：Terrestrial Time (TT) 地球时</p><p>TDT：Terrestrial Dynamical Time </p><p>UTC：协调世界时</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221207192519170.png" alt="image-20221207192519170"></p><p>Barycentric动力学时间（TDB，来自法国温度动态Barycentrique）是一个相对论坐标时间尺度，旨在在计算轨道，小型小行星，彗星和彗星和彗星和彗星和彗星，彗星和彗星，彗星和彗星，彗星和彗星，彗星和彗星，彗星和天文学的轨道和天文学时，供天文使用作为时间标准[1]太阳系中的星际航天器。</p><hr><p>c++时间转换</p><p>得到UTC时间 <a href="https://www.runoob.com/cplusplus/cpp-date-time.html">https://www.runoob.com/cplusplus/cpp-date-time.html</a></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">tm *utc = gmtime(&amp;now);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; julian_date(<span class="number">1900</span> + utc-&gt;tm_year, <span class="number">1</span> + utc-&gt;tm_mon, utc-&gt;tm_mday, utc-&gt;tm_hour + utc-&gt;tm_min / <span class="number">60.0</span> + utc-&gt;tm_sec / <span class="number">3600.0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计算儒略日</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">julian_date</span><span class="params">(<span class="keyword">short</span> <span class="keyword">int</span> year, <span class="keyword">short</span> <span class="keyword">int</span> month, <span class="keyword">short</span> <span class="keyword">int</span> day, <span class="keyword">double</span> hour)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> jd12h = (<span class="keyword">long</span>)day - <span class="number">32075L</span> + <span class="number">1461L</span> * ((<span class="keyword">long</span>)year + <span class="number">4800L</span> + ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span>) / <span class="number">4L</span> + <span class="number">367L</span> * ((<span class="keyword">long</span>)month - <span class="number">2L</span> - ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span> * <span class="number">12L</span>) / <span class="number">12L</span> - <span class="number">3L</span> * (((<span class="keyword">long</span>)year + <span class="number">4900L</span> + ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span>) / <span class="number">100L</span>) / <span class="number">4L</span>;</span><br><span class="line">    <span class="keyword">double</span> tjd = (<span class="keyword">double</span>)jd12h - <span class="number">0.5</span> + hour / <span class="number">24.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (tjd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://en.wikipedia.org/wiki/%CE%94T_(timekeeping">https://en.wikipedia.org/wiki/%CE%94T_(timekeeping</a>)</p><p>为了求 The difference between terrestrial dynamical time system 1 time, and universal time.</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221208114456687.png" alt="image-20221208114456687"></p><p>设置为deltat = 67.</p><p>但事实上该值设置完之后反而和软件中的值不一致，因此设为0；</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221208202842675.png" alt="image-20221208202842675"></p><p>方位角和两个软件误差2’’和0.2’’，高度角相差7’’和0.8’’ ，非常准，验证成功！</p><p>关键函数讲解</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">equ2hor</span><span class="params">(<span class="keyword">double</span> tjd, <span class="keyword">double</span> deltat, <span class="keyword">double</span> x, <span class="keyword">double</span> y, site_info *location, <span class="keyword">double</span> ra, <span class="keyword">double</span> dec, <span class="keyword">short</span> <span class="keyword">int</span> ref_option, <span class="keyword">double</span> *zd, <span class="keyword">double</span> *az, <span class="keyword">double</span> *rar, <span class="keyword">double</span> *decr)</span></span></span><br><span class="line"><span class="function"><span class="comment">// tjd 为儒略日</span></span></span><br><span class="line"><span class="function"><span class="comment">// deltat应该为 TT (or TDT)-UT1 大约70  但设置了值之后反而和软件中的值不一样 故设为0</span></span></span><br><span class="line"><span class="function"><span class="comment">// x y 设为0</span></span></span><br><span class="line"><span class="function"><span class="comment">// site_info loc = &#123;32.08, 118.8, 10, 10, 1013&#125;; 温度和高度都设为10，压强毫巴和百帕一致</span></span></span><br><span class="line"><span class="function"><span class="comment">// ref_option设为0 no refraction 不考虑蒙气差</span></span></span><br><span class="line"><span class="function"><span class="comment">// </span></span></span><br></pre></td></tr></table></figure><hr><p>现在研究一下从hipparcos星表 根据星等 处理为J1991.25</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">user_cols = [<span class="string">&#x27;hip&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="string">&#x27;ra&#x27;</span>, <span class="string">&#x27;dec&#x27;</span>, <span class="string">&#x27;plx&#x27;</span>, <span class="string">&#x27;pmra&#x27;</span>, <span class="string">&#x27;pmdec&#x27;</span>, <span class="string">&#x27;era&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;ede&#x27;</span>, <span class="string">&#x27;eplx&#x27;</span>, <span class="string">&#x27;epmra&#x27;</span>, <span class="string">&#x27;epmde&#x27;</span>, <span class="string">&#x27;ntr&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;var&#x27;</span>, <span class="string">&#x27;ic&#x27;</span>, <span class="string">&#x27;hpmag&#x27;</span>]</span><br><span class="line">mag = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6.5</span>]</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> mag:</span><br><span class="line">    df = pd.read_table(<span class="string">&quot;hip2.dat&quot;</span>, sep=<span class="string">&#x27;\s+&#x27;</span>, header=<span class="literal">None</span>,</span><br><span class="line">                       engine=<span class="string">&#x27;python&#x27;</span>, index_col=<span class="number">0</span>, usecols=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">20</span>)), names=user_cols)</span><br><span class="line"></span><br><span class="line">    df1 = df[df[<span class="string">&#x27;hpmag&#x27;</span>] &lt;= m]</span><br><span class="line"></span><br><span class="line">    tmp = df1[<span class="string">&#x27;ra&#x27;</span>] * <span class="number">180</span> / math.pi</span><br><span class="line">    df1.insert(df1.shape[<span class="number">1</span>], <span class="string">&#x27;ra_d&#x27;</span>, tmp)</span><br><span class="line"></span><br><span class="line">    tmp = df1[<span class="string">&#x27;dec&#x27;</span>] * <span class="number">180</span> / math.pi</span><br><span class="line">    df1.insert(df1.shape[<span class="number">1</span>], <span class="string">&#x27;dec_d&#x27;</span>, tmp)</span><br><span class="line">    newdf = df1[[<span class="string">&#x27;ra_d&#x27;</span>, <span class="string">&#x27;dec_d&#x27;</span>, <span class="string">&#x27;pmra&#x27;</span>, <span class="string">&#x27;pmdec&#x27;</span>, <span class="string">&#x27;plx&#x27;</span>, <span class="string">&#x27;hpmag&#x27;</span>]]</span><br><span class="line">    newdf.to_csv(<span class="string">&#x27;J1991_25_&#x27;</span>+<span class="built_in">str</span>(m)+<span class="string">&#x27;.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221209181128304.png" alt="image-20221209181128304"></p><p>单位分别为：hip、度、度、mas/year、mas/year、mas、星等</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221209181146712.png" alt="image-20221209181146712"></p><p>hip_main.dat文件中有118322个星</p><p>有两种星表</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221209162226229.png" alt="image-20221209162226229"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">user_cols = [<span class="string">&#x27;hip&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>,  <span class="string">&#x27;a5&#x27;</span>,   <span class="string">&#x27;ra&#x27;</span>, <span class="string">&#x27;a6&#x27;</span>]</span><br><span class="line">df = pd.read_table(<span class="string">&quot;hip_main.dat&quot;</span>, delimiter=<span class="string">&#x27;|&#x27;</span>, header=<span class="literal">None</span>,usecols=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">7</span>)),names=user_cols)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;ra&quot;</span>] = [<span class="built_in">float</span>(<span class="built_in">str</span>(i).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;0&quot;</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> df[<span class="string">&quot;ra&quot;</span>]]</span><br><span class="line">df[<span class="string">&#x27;ra&#x27;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">df1 = df[df[<span class="string">&#x27;ra&#x27;</span>] &lt;= <span class="number">6.5</span>]</span><br></pre></td></tr></table></figure><p>针对的是Magnitude in Johnson V 而hip2只有Hpmag  Hipparcos magnitude</p><p>前为hip1  后为hip2</p><p>&lt;= 6.5 有8875个星  7982</p><p>&lt; 6.5  8790个星  7982</p><p>&lt;= 6.0 5045个星    4559</p><p>&lt; 6.0 4996个星   4559</p><p>&lt;= 5.0 1628个星  1471</p><p>&lt; 5.0 1609个星  1471</p><p>&lt;= 4.0 520个星  480</p><p>&lt; 4.0 517个星   480 </p><p>&lt;= 3.0 178个星  165</p><p>&lt; 3.0 173个星   165</p><p>&lt;= 2.0 50个星  46 </p><p>&lt; 2.0 50个星   46 </p><p>&lt;= 1.0 16个星  15</p><p>&lt; 1.0 16个星  15</p><p>一是  <a href="https://heasarc.gsfc.nasa.gov/W3Browse/all/hipparcos.html">https://heasarc.gsfc.nasa.gov/W3Browse/all/hipparcos.html</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221209162308287.png" alt="image-20221209162308287"></p><p>二是 <a href="http://vizier.cds.unistra.fr/viz-bin/VizieR-3?-source=I/311/hip2">http://vizier.cds.unistra.fr/viz-bin/VizieR-3?-source=I/311/hip2</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221209162337713.png" alt="image-20221209162337713"></p><p>2007年发布了由Hipparcos任务产生的天文数据的新降低，声称几乎全明星的精度比HP = 8的幅度更明亮，要比原始目录中的幅度更好，最高为4。该目录被称为Hipparcos-2目录。</p><hr><p>J1991.25 转 J2000</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221210161025540.png" alt="image-20221210161025540"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221210161117925.png" alt="image-20221210161117925"></p><p>经过验证 没问题，</p><p>除了6种星等 只需要0.2s</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BARYC 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELIOC 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> KMAU = <span class="number">1.49597870e+8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> TWOPI = <span class="number">6.28318530717958647692</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RAD2SEC = <span class="number">206264.806247096355</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> DEG2RAD = <span class="number">0.017453292519943296</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_hip = <span class="number">2448349.0625</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_fk5 = <span class="number">2451545.0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> starnumber;</span><br><span class="line">    <span class="keyword">double</span> ra;</span><br><span class="line">    <span class="keyword">double</span> dec;</span><br><span class="line">    <span class="keyword">double</span> promora;</span><br><span class="line">    <span class="keyword">double</span> promodec;</span><br><span class="line">    <span class="keyword">double</span> parallax;</span><br><span class="line">    <span class="keyword">double</span> radialvelocity = <span class="number">0</span>;</span><br><span class="line">&#125; cat_entry;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform_cat</span><span class="params">(cat_entry *incat, cat_entry *newcat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> paralx, dist, r, d, cra, sra, cdc, sdc, pos1[<span class="number">3</span>], term1, pmr, pmd, rvl, vel1[<span class="number">3</span>], pos2[<span class="number">3</span>], vel2[<span class="number">3</span>], xyproj;</span><br><span class="line"></span><br><span class="line">    paralx = incat-&gt;parallax;</span><br><span class="line">    <span class="keyword">if</span> (paralx &lt;= <span class="number">0.0</span>)</span><br><span class="line">        paralx = <span class="number">1.0e-7</span>;</span><br><span class="line"></span><br><span class="line">    dist = RAD2SEC / paralx;</span><br><span class="line">    r = incat-&gt;ra * <span class="number">54000.0</span> / RAD2SEC;</span><br><span class="line">    d = incat-&gt;dec * <span class="number">3600.0</span> / RAD2SEC;</span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line">    pos1[<span class="number">0</span>] = dist * cdc * cra;</span><br><span class="line">    pos1[<span class="number">1</span>] = dist * cdc * sra;</span><br><span class="line">    pos1[<span class="number">2</span>] = dist * sdc;</span><br><span class="line"></span><br><span class="line">    term1 = paralx * <span class="number">36525.0</span>;</span><br><span class="line">    pmr = incat-&gt;promora * <span class="number">15.0</span> * cdc / term1;</span><br><span class="line">    pmd = incat-&gt;promodec / term1;</span><br><span class="line"></span><br><span class="line">    vel1[<span class="number">0</span>] = -pmr * sra - pmd * sdc * cra;</span><br><span class="line">    vel1[<span class="number">1</span>] = pmr * cra - pmd * sdc * sra;</span><br><span class="line">    vel1[<span class="number">2</span>] = pmd * cdc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">short</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos2[j] = pos1[j] + vel1[j] * (epoch_fk5 - epoch_hip);</span><br><span class="line">        vel2[j] = vel1[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xyproj = <span class="built_in">sqrt</span>(pos2[<span class="number">0</span>] * pos2[<span class="number">0</span>] + pos2[<span class="number">1</span>] * pos2[<span class="number">1</span>]);</span><br><span class="line">    r = <span class="built_in">atan2</span>(pos2[<span class="number">1</span>], pos2[<span class="number">0</span>]);</span><br><span class="line">    d = <span class="built_in">atan2</span>(pos2[<span class="number">2</span>], xyproj);</span><br><span class="line">    newcat-&gt;ra = r * RAD2SEC / <span class="number">54000.0</span>;</span><br><span class="line">    newcat-&gt;dec = d * RAD2SEC / <span class="number">3600.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (newcat-&gt;ra &lt; <span class="number">0.0</span>)</span><br><span class="line">        newcat-&gt;ra += <span class="number">24.0</span>;</span><br><span class="line"></span><br><span class="line">    dist = <span class="built_in">sqrt</span>(pos2[<span class="number">0</span>] * pos2[<span class="number">0</span>] + pos2[<span class="number">1</span>] * pos2[<span class="number">1</span>] +</span><br><span class="line">                pos2[<span class="number">2</span>] * pos2[<span class="number">2</span>]);</span><br><span class="line">    paralx = RAD2SEC / dist;</span><br><span class="line">    newcat-&gt;parallax = paralx;</span><br><span class="line"></span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line">    pmr = -vel2[<span class="number">0</span>] * sra + vel2[<span class="number">1</span>] * cra;</span><br><span class="line">    pmd = -vel2[<span class="number">0</span>] * cra * sdc - vel2[<span class="number">1</span>] * sra * sdc + vel2[<span class="number">2</span>] * cdc;</span><br><span class="line">    rvl = vel2[<span class="number">0</span>] * cra * cdc + vel2[<span class="number">1</span>] * sra * cdc + vel2[<span class="number">2</span>] * sdc;</span><br><span class="line"></span><br><span class="line">    newcat-&gt;promora = pmr * paralx * <span class="number">36525.0</span> / (<span class="number">15.0</span> * cdc);</span><br><span class="line">    newcat-&gt;promodec = pmd * paralx * <span class="number">36525.0</span>;</span><br><span class="line">    newcat-&gt;radialvelocity = rvl * KMAU / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newcat-&gt;parallax &lt;= <span class="number">1.01e-7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        newcat-&gt;parallax = <span class="number">0.0</span>;</span><br><span class="line">        newcat-&gt;radialvelocity = incat-&gt;radialvelocity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newcat-&gt;starnumber = incat-&gt;starnumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform_hip</span><span class="params">(cat_entry *hipparcos, cat_entry *fk5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cat_entry scratch;</span><br><span class="line">    scratch.starnumber = hipparcos-&gt;starnumber;</span><br><span class="line">    scratch.dec = hipparcos-&gt;dec;</span><br><span class="line">    scratch.radialvelocity = hipparcos-&gt;radialvelocity;</span><br><span class="line"></span><br><span class="line">    scratch.ra = hipparcos-&gt;ra / <span class="number">15.0</span>;</span><br><span class="line">    scratch.promora = hipparcos-&gt;promora / (<span class="number">150.0</span> *</span><br><span class="line">                                            <span class="built_in">cos</span>(hipparcos-&gt;dec * DEG2RAD));</span><br><span class="line">    scratch.promodec = hipparcos-&gt;promodec / <span class="number">10.0</span>;</span><br><span class="line">    scratch.parallax = hipparcos-&gt;parallax / <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">    transform_cat(&amp;scratch, fk5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start, end; <span class="comment">// 定义clock_t变量</span></span><br><span class="line"></span><br><span class="line">    start = clock(); <span class="comment">// 开始时间</span></span><br><span class="line"></span><br><span class="line">    cat_entry hip, fk5;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; files = &#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;6.5&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">inFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Downloads\\hip2.dat\\J1991_25_&quot;</span> + files[i] + <span class="string">&quot;.csv&quot;</span>)</span></span>;</span><br><span class="line">        <span class="function">ofstream <span class="title">outFile</span><span class="params">(<span class="string">&quot;C:\\Users\\hp\\Downloads\\hip2.dat\\J2000_&quot;</span> + files[i] + <span class="string">&quot;.csv&quot;</span>)</span></span>;</span><br><span class="line">        <span class="built_in">string</span> lineStr;</span><br><span class="line">        <span class="keyword">double</span> hgmag;</span><br><span class="line">        getline(inFile, lineStr); <span class="comment">// 跳过列名，第一行不做处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (getline(inFile, lineStr))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; lineStr &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// 存成二维表结构</span></span><br><span class="line">            <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(lineStr)</span></span>;</span><br><span class="line">            <span class="built_in">string</span> str;</span><br><span class="line">            <span class="comment">// 按照逗号分隔</span></span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.starnumber = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.ra = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.dec = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.promora = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.promodec = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hip.parallax = stod(str);</span><br><span class="line">            getline(ss, str, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">            hgmag = stod(str);</span><br><span class="line"></span><br><span class="line">            transform_hip(&amp;hip, &amp;fk5);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot; hip &quot; &lt;&lt; hip.starnumber &lt;&lt; &quot; ra &quot; &lt;&lt; hip.ra &lt;&lt; &quot; dec &quot; &lt;&lt; hip.dec &lt;&lt; &quot; promora: &quot; &lt;&lt; hip.promora &lt;&lt; &quot; promodec: &quot; &lt;&lt; hip.promodec &lt;&lt; &quot; para &quot; &lt;&lt; hip.parallax &lt;&lt; endl;</span></span><br><span class="line">            outFile &lt;&lt; fk5.starnumber &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; fk5.ra &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; fk5.dec &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; fk5.promora &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; fk5.promodec &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; fk5.parallax &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; hgmag &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    end = clock();                                                            <span class="comment">// 结束时间</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;time = &quot;</span> &lt;&lt; <span class="keyword">double</span>(end - start) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出时间（单位：ｓ）</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>最终代码（novas有阉割）为</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BARYC 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HELIOC 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> T0 = <span class="number">2451545.00000000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> KMAU = <span class="number">1.49597870e+8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> MAU = <span class="number">1.49597870e+11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> C = <span class="number">173.14463348</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> GS = <span class="number">1.32712438e+20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> TWOPI = <span class="number">6.28318530717958647692</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RAD2SEC = <span class="number">206264.806247096355</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> DEG2RAD = <span class="number">0.017453292519943296</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RAD2DEG = <span class="number">57.295779513082321</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_hip = <span class="number">2448349.0625</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> epoch_fk5 = <span class="number">2451545.0000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> PSI_COR = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> EPS_COR = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">short</span> <span class="keyword">int</span> FN0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> starnumber;</span><br><span class="line">    <span class="keyword">double</span> ra;</span><br><span class="line">    <span class="keyword">double</span> dec;</span><br><span class="line">    <span class="keyword">double</span> promora;</span><br><span class="line">    <span class="keyword">double</span> promodec;</span><br><span class="line">    <span class="keyword">double</span> parallax;</span><br><span class="line">    <span class="keyword">double</span> radialvelocity;</span><br><span class="line">&#125; cat_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> latitude;</span><br><span class="line">    <span class="keyword">double</span> longitude;</span><br><span class="line">&#125; site_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">vector2radec</span><span class="params">(<span class="keyword">double</span> *pos, <span class="keyword">double</span> *ra, <span class="keyword">double</span> *dec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xyproj;</span><br><span class="line"></span><br><span class="line">    xyproj = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(pos[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos[<span class="number">1</span>], <span class="number">2.0</span>));</span><br><span class="line">    <span class="keyword">if</span> ((xyproj == <span class="number">0.0</span>) &amp;&amp; (pos[<span class="number">2</span>] == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        *ra = <span class="number">0.0</span>;</span><br><span class="line">        *dec = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (xyproj == <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *ra = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos[<span class="number">2</span>] &lt; <span class="number">0.0</span>)</span><br><span class="line">            *dec = <span class="number">-90.0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            *dec = <span class="number">90.0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *ra = <span class="built_in">atan2</span>(pos[<span class="number">1</span>], pos[<span class="number">0</span>]) * RAD2SEC / <span class="number">54000.0</span>;</span><br><span class="line">        *dec = <span class="built_in">atan2</span>(pos[<span class="number">2</span>], xyproj) * RAD2SEC / <span class="number">3600.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (*ra &lt; <span class="number">0.0</span>)</span><br><span class="line">            *ra += <span class="number">24.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fund_args</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> a[<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">2.3555483935439407</span> + t * (<span class="number">8328.691422883896</span> + t * (<span class="number">1.517951635553957e-4</span> + <span class="number">3.1028075591010306e-7</span> * t));</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">6.240035939326023</span> + t * (<span class="number">628.3019560241842</span> + t * (<span class="number">-2.7973749400020225e-6</span> - <span class="number">5.817764173314431e-8</span> * t));</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1.6279019339719611</span> + t * (<span class="number">8433.466158318453</span> + t * (<span class="number">-6.427174970469119e-5</span> + <span class="number">5.332950492204896e-8</span> * t));</span><br><span class="line">    a[<span class="number">3</span>] = <span class="number">5.198469513579922</span> + t * (<span class="number">7771.377146170642</span> + t * (<span class="number">-3.340851076525812e-5</span> + <span class="number">9.211459941081184e-8</span> * t));</span><br><span class="line">    a[<span class="number">4</span>] = <span class="number">2.1824386243609943</span> + t * (<span class="number">-33.75704593375351</span> + t * (<span class="number">3.614285992671591e-5</span> + <span class="number">3.878509448876288e-8</span> * t));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">fmod</span>(a[i], TWOPI);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="number">0.0</span>)</span><br><span class="line">            a[i] += TWOPI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">nutation_angles</span><span class="params">(<span class="keyword">double</span> t, <span class="keyword">double</span> *longnutation, <span class="keyword">double</span> *obliqnutation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> clng[<span class="number">106</span>] = &#123;<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">                        <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                        <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>,</span><br><span class="line">                        <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">                        <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>,</span><br><span class="line">                        <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>, <span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">2.0</span>,</span><br><span class="line">                        <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">-3.0</span>, <span class="number">-3.0</span>, <span class="number">3.0</span>, <span class="number">-3.0</span>, <span class="number">3.0</span>,</span><br><span class="line">                        <span class="number">-3.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">4.0</span>, <span class="number">-4.0</span>, <span class="number">-4.0</span>, <span class="number">4.0</span>,</span><br><span class="line">                        <span class="number">-4.0</span>, <span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">-5.0</span>, <span class="number">6.0</span>, <span class="number">6.0</span>,</span><br><span class="line">                        <span class="number">6.0</span>, <span class="number">-6.0</span>, <span class="number">6.0</span>, <span class="number">-7.0</span>, <span class="number">7.0</span>, <span class="number">7.0</span>, <span class="number">-7.0</span>,</span><br><span class="line">                        <span class="number">-8.0</span>, <span class="number">10.0</span>, <span class="number">11.0</span>, <span class="number">12.0</span>, <span class="number">-13.0</span>, <span class="number">-15.0</span>, <span class="number">-16.0</span>,</span><br><span class="line">                        <span class="number">-16.0</span>, <span class="number">17.0</span>, <span class="number">-21.0</span>, <span class="number">-22.0</span>, <span class="number">26.0</span>, <span class="number">29.0</span>, <span class="number">29.0</span>,</span><br><span class="line">                        <span class="number">-31.0</span>, <span class="number">-38.0</span>, <span class="number">-46.0</span>, <span class="number">48.0</span>, <span class="number">-51.0</span>, <span class="number">58.0</span>, <span class="number">59.0</span>,</span><br><span class="line">                        <span class="number">63.0</span>, <span class="number">63.0</span>, <span class="number">-123.0</span>, <span class="number">129.0</span>, <span class="number">-158.0</span>, <span class="number">-217.0</span>, <span class="number">-301.0</span>,</span><br><span class="line">                        <span class="number">-386.0</span>, <span class="number">-517.0</span>, <span class="number">712.0</span>, <span class="number">1426.0</span>, <span class="number">2062.0</span>, <span class="number">-2274.0</span>,</span><br><span class="line">                        <span class="number">-13187.0</span>, <span class="number">-171996.0</span>&#125;,</span><br><span class="line">           clngx[<span class="number">14</span>] = &#123;<span class="number">0.1</span>, <span class="number">-0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">-0.2</span>, <span class="number">-0.4</span>, <span class="number">0.5</span>, <span class="number">1.2</span>,</span><br><span class="line">                        <span class="number">-1.6</span>, <span class="number">-3.4</span>, <span class="number">-174.2</span>&#125;,</span><br><span class="line">           cobl[<span class="number">64</span>] = &#123;<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">                       <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">                       <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>, <span class="number">-1.0</span>,</span><br><span class="line">                       <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">-1.0</span>, <span class="number">-2.0</span>,</span><br><span class="line">                       <span class="number">-2.0</span>, <span class="number">-2.0</span>, <span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">-3.0</span>, <span class="number">3.0</span>,</span><br><span class="line">                       <span class="number">3.0</span>, <span class="number">-3.0</span>, <span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">-3.0</span>, <span class="number">3.0</span>,</span><br><span class="line">                       <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">-7.0</span>, <span class="number">7.0</span>,</span><br><span class="line">                       <span class="number">-8.0</span>, <span class="number">9.0</span>, <span class="number">-10.0</span>, <span class="number">-12.0</span>, <span class="number">13.0</span>, <span class="number">16.0</span>,</span><br><span class="line">                       <span class="number">-24.0</span>, <span class="number">26.0</span>, <span class="number">27.0</span>, <span class="number">32.0</span>, <span class="number">-33.0</span>, <span class="number">-53.0</span>,</span><br><span class="line">                       <span class="number">54.0</span>, <span class="number">-70.0</span>, <span class="number">-95.0</span>, <span class="number">129.0</span>, <span class="number">200.0</span>, <span class="number">224.0</span>,</span><br><span class="line">                       <span class="number">-895.0</span>, <span class="number">977.0</span>, <span class="number">5736.0</span>, <span class="number">92025.0</span>&#125;,</span><br><span class="line">           coblx[<span class="number">8</span>] = &#123;<span class="number">-0.1</span>, <span class="number">-0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">-0.5</span>, <span class="number">-0.6</span>, <span class="number">-3.1</span>, <span class="number">8.9</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> i, ii, i1, i2, iop;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> nav1[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>&#125;,</span><br><span class="line">              nav2[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>&#125;,</span><br><span class="line">              nav[<span class="number">183</span>] = &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">8</span>,</span><br><span class="line">                          <span class="number">1</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">1</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">21</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">29</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>,</span><br><span class="line">                          <span class="number">1</span>, <span class="number">14</span>, <span class="number">44</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">44</span>, <span class="number">2</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">45</span>,</span><br><span class="line">                          <span class="number">1</span>, <span class="number">37</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">44</span>, <span class="number">2</span>, <span class="number">53</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">40</span>, <span class="number">3</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">17</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">1</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">27</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">47</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">44</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">46</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">74</span>,</span><br><span class="line">                          <span class="number">1</span>, <span class="number">0</span>, <span class="number">74</span>, <span class="number">2</span>, <span class="number">50</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">78</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">53</span>, <span class="number">2</span>, <span class="number">53</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">80</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">0</span>, <span class="number">81</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">81</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">44</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">79</span>,</span><br><span class="line">                          <span class="number">2</span>, <span class="number">27</span>, <span class="number">44</span>&#125;,</span><br><span class="line">              llng[<span class="number">106</span>] = &#123;<span class="number">57</span>, <span class="number">25</span>, <span class="number">82</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">66</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">19</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">104</span>, <span class="number">93</span>,</span><br><span class="line">                           <span class="number">84</span>, <span class="number">47</span>, <span class="number">28</span>, <span class="number">83</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">75</span>, <span class="number">89</span>, <span class="number">30</span>, <span class="number">58</span>, <span class="number">73</span>, <span class="number">46</span>, <span class="number">77</span>,</span><br><span class="line">                           <span class="number">23</span>, <span class="number">32</span>, <span class="number">59</span>, <span class="number">72</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">74</span>, <span class="number">22</span>, <span class="number">98</span>, <span class="number">38</span>, <span class="number">62</span>, <span class="number">96</span>, <span class="number">37</span>,</span><br><span class="line">                           <span class="number">35</span>, <span class="number">6</span>, <span class="number">76</span>, <span class="number">85</span>, <span class="number">51</span>, <span class="number">26</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">63</span>, <span class="number">105</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">67</span>,</span><br><span class="line">                           <span class="number">99</span>, <span class="number">15</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">100</span>, <span class="number">65</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">68</span>, <span class="number">20</span>, <span class="number">87</span>, <span class="number">64</span>,</span><br><span class="line">                           <span class="number">95</span>, <span class="number">27</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">94</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">71</span>, <span class="number">42</span>, <span class="number">97</span>, <span class="number">70</span>,</span><br><span class="line">                           <span class="number">7</span>, <span class="number">49</span>, <span class="number">29</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">17</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">90</span>,</span><br><span class="line">                           <span class="number">8</span>, <span class="number">39</span>, <span class="number">54</span>, <span class="number">81</span>, <span class="number">21</span>, <span class="number">103</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">44</span>,</span><br><span class="line">                           <span class="number">79</span>, <span class="number">4</span>&#125;,</span><br><span class="line">              llngx[<span class="number">14</span>] = &#123;<span class="number">81</span>, <span class="number">7</span>, <span class="number">97</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">9</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">103</span>, <span class="number">101</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">4</span>&#125;,</span><br><span class="line">              lobl[<span class="number">64</span>] = &#123;<span class="number">51</span>, <span class="number">98</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">63</span>, <span class="number">105</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">62</span>, <span class="number">96</span>,</span><br><span class="line">                          <span class="number">37</span>, <span class="number">35</span>, <span class="number">76</span>, <span class="number">36</span>, <span class="number">88</span>, <span class="number">85</span>, <span class="number">104</span>, <span class="number">93</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">99</span>, <span class="number">8</span>,</span><br><span class="line">                          <span class="number">68</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">91</span>, <span class="number">87</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">95</span>, <span class="number">65</span>, <span class="number">55</span>, <span class="number">94</span>, <span class="number">43</span>,</span><br><span class="line">                          <span class="number">97</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">49</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">78</span>, <span class="number">56</span>, <span class="number">90</span>, <span class="number">48</span>, <span class="number">40</span>,</span><br><span class="line">                          <span class="number">39</span>, <span class="number">54</span>, <span class="number">1</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">101</span>, <span class="number">9</span>, <span class="number">44</span>, <span class="number">79</span>, <span class="number">4</span>&#125;,</span><br><span class="line">              loblx[<span class="number">8</span>] = &#123;<span class="number">53</span>, <span class="number">1</span>, <span class="number">103</span>, <span class="number">9</span>, <span class="number">44</span>, <span class="number">101</span>, <span class="number">79</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> a[<span class="number">5</span>], angle, cc, ss1, cs, sc, c[<span class="number">106</span>], s[<span class="number">106</span>], lng, lngx, obl,</span><br><span class="line">        oblx;</span><br><span class="line"></span><br><span class="line">    fund_args(t, a);</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ii = <span class="number">0</span>; ii &lt; <span class="number">10</span>; ii += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        angle = a[nav1[ii]] * (<span class="keyword">double</span>)(nav1[<span class="number">1</span> + ii] + <span class="number">1</span>);</span><br><span class="line">        c[i] = <span class="built_in">cos</span>(angle);</span><br><span class="line">        s[i] = <span class="built_in">sin</span>(angle);</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (ii = <span class="number">0</span>; ii &lt; <span class="number">10</span>; ii += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i1 = nav2[ii];</span><br><span class="line">        i2 = nav2[<span class="number">1</span> + ii];</span><br><span class="line"></span><br><span class="line">        c[i] = c[i1] * c[i2] - s[i1] * s[i2];</span><br><span class="line">        s[i] = s[i1] * c[i2] + c[i1] * s[i2];</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (ii = <span class="number">0</span>; ii &lt; <span class="number">183</span>; ii += <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        iop = nav[ii];</span><br><span class="line">        i1 = nav[<span class="number">1</span> + ii];</span><br><span class="line">        i2 = nav[<span class="number">2</span> + ii];</span><br><span class="line">        <span class="keyword">switch</span> (iop)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            c[i] = c[i1] * c[i2] - s[i1] * s[i2];</span><br><span class="line">            s[i] = s[i1] * c[i2] + c[i1] * s[i2];</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            c[i] = c[i1] * c[i2] + s[i1] * s[i2];</span><br><span class="line">            s[i] = s[i1] * c[i2] - c[i1] * s[i2];</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            cc = c[i1] * c[i2];</span><br><span class="line">            ss1 = s[i1] * s[i2];</span><br><span class="line">            sc = s[i1] * c[i2];</span><br><span class="line">            cs = c[i1] * s[i2];</span><br><span class="line">            c[i] = cc - ss1;</span><br><span class="line">            s[i] = sc + cs;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            c[i] = cc + ss1;</span><br><span class="line">            s[i] = sc - cs;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iop == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lng = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">106</span>; i++)</span><br><span class="line">        lng += clng[i] * s[llng[i]];</span><br><span class="line"></span><br><span class="line">    lngx = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">        lngx += clngx[i] * s[llngx[i]];</span><br><span class="line"></span><br><span class="line">    obl = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        obl += cobl[i] * c[lobl[i]];</span><br><span class="line"></span><br><span class="line">    oblx = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        oblx += coblx[i] * c[loblx[i]];</span><br><span class="line"></span><br><span class="line">    *longnutation = (lng + t * lngx) / <span class="number">10000.0</span>;</span><br><span class="line">    *obliqnutation = (obl + t * oblx) / <span class="number">10000.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">earthtilt</span><span class="params">(<span class="keyword">double</span> tjd, <span class="keyword">double</span> *mobl, <span class="keyword">double</span> *tobl, <span class="keyword">double</span> *eq, <span class="keyword">double</span> *dpsi, <span class="keyword">double</span> *deps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> tjd_last = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> t, dp, de;</span><br><span class="line">    <span class="keyword">double</span> mean_obliq, true_obliq, eq_eq, args[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    t = (tjd - T0) / <span class="number">36525.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(tjd - tjd_last) &gt; <span class="number">1.0e-6</span>)</span><br><span class="line">        nutation_angles(t, &amp;dp, &amp;de);</span><br><span class="line"></span><br><span class="line">    mean_obliq = <span class="number">84381.4480</span> - <span class="number">46.8150</span> * t - <span class="number">0.00059</span> * <span class="built_in">pow</span>(t, <span class="number">2.0</span>) + <span class="number">0.001813</span> * <span class="built_in">pow</span>(t, <span class="number">3.0</span>);</span><br><span class="line"></span><br><span class="line">    true_obliq = mean_obliq + de;</span><br><span class="line"></span><br><span class="line">    mean_obliq /= <span class="number">3600.0</span>;</span><br><span class="line">    true_obliq /= <span class="number">3600.0</span>;</span><br><span class="line"></span><br><span class="line">    fund_args(t, args);</span><br><span class="line"></span><br><span class="line">    eq_eq = dp * <span class="built_in">cos</span>(mean_obliq * DEG2RAD) +</span><br><span class="line">            (<span class="number">0.00264</span> * <span class="built_in">sin</span>(args[<span class="number">4</span>]) + <span class="number">0.000063</span> * <span class="built_in">sin</span>(<span class="number">2.0</span> * args[<span class="number">4</span>]));</span><br><span class="line"></span><br><span class="line">    eq_eq /= <span class="number">15.0</span>;</span><br><span class="line"></span><br><span class="line">    *dpsi = dp;</span><br><span class="line">    *deps = de;</span><br><span class="line">    *eq = eq_eq;</span><br><span class="line">    *mobl = mean_obliq;</span><br><span class="line">    *tobl = true_obliq;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">starvectors</span><span class="params">(cat_entry *star, <span class="keyword">double</span> *pos, <span class="keyword">double</span> *vel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> paralx, dist, r, d, cra, sra, cdc, sdc, pmr, pmd, rvl;</span><br><span class="line"></span><br><span class="line">    paralx = star-&gt;parallax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (star-&gt;parallax &lt;= <span class="number">0.0</span>)</span><br><span class="line">        paralx = <span class="number">1.0e-7</span>;</span><br><span class="line"></span><br><span class="line">    dist = RAD2SEC / paralx;</span><br><span class="line">    r = (star-&gt;ra) * <span class="number">15.0</span> * DEG2RAD;</span><br><span class="line">    d = (star-&gt;dec) * DEG2RAD;</span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line"></span><br><span class="line">    pos[<span class="number">0</span>] = dist * cdc * cra;</span><br><span class="line">    pos[<span class="number">1</span>] = dist * cdc * sra;</span><br><span class="line">    pos[<span class="number">2</span>] = dist * sdc;</span><br><span class="line"></span><br><span class="line">    pmr = star-&gt;promora * <span class="number">15.0</span> * cdc / (paralx * <span class="number">36525.0</span>);</span><br><span class="line">    pmd = star-&gt;promodec / (paralx * <span class="number">36525.0</span>);</span><br><span class="line">    rvl = star-&gt;radialvelocity * <span class="number">86400.0</span> / KMAU;</span><br><span class="line">    vel[<span class="number">0</span>] = -pmr * sra - pmd * sdc * cra + rvl * cdc * cra;</span><br><span class="line">    vel[<span class="number">1</span>] = pmr * cra - pmd * sdc * sra + rvl * cdc * sra;</span><br><span class="line">    vel[<span class="number">2</span>] = pmd * cdc + rvl * sdc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tdb2tdt</span><span class="params">(<span class="keyword">double</span> tdb, <span class="keyword">double</span> *tdtjd, <span class="keyword">double</span> *secdiff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ecc = <span class="number">0.01671022</span>;</span><br><span class="line">    <span class="keyword">double</span> rev = <span class="number">1296000.0</span>;</span><br><span class="line">    <span class="keyword">double</span> tdays, m, l, lj, e;</span><br><span class="line"></span><br><span class="line">    tdays = tdb - T0;</span><br><span class="line">    m = (<span class="number">357.51716</span> + <span class="number">0.985599987</span> * tdays) * <span class="number">3600.0</span>;</span><br><span class="line">    l = (<span class="number">280.46435</span> + <span class="number">0.985609100</span> * tdays) * <span class="number">3600.0</span>;</span><br><span class="line">    lj = (<span class="number">34.40438</span> + <span class="number">0.083086762</span> * tdays) * <span class="number">3600.0</span>;</span><br><span class="line">    m = <span class="built_in">fmod</span>(m, rev) / RAD2SEC;</span><br><span class="line">    l = <span class="built_in">fmod</span>(l, rev) / RAD2SEC;</span><br><span class="line">    lj = <span class="built_in">fmod</span>(lj, rev) / RAD2SEC;</span><br><span class="line">    e = m + ecc * <span class="built_in">sin</span>(m) + <span class="number">0.5</span> * ecc * ecc * <span class="built_in">sin</span>(<span class="number">2.0</span> * m);</span><br><span class="line">    *secdiff = <span class="number">1.658e-3</span> * <span class="built_in">sin</span>(e) + <span class="number">20.73e-6</span> * <span class="built_in">sin</span>(l - lj);</span><br><span class="line">    *tdtjd = tdb - *secdiff / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">precession</span><span class="params">(<span class="keyword">double</span> tjd1, <span class="keyword">double</span> *pos, <span class="keyword">double</span> tjd2, <span class="keyword">double</span> *pos2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform_cat</span><span class="params">(cat_entry *incat, cat_entry *newcat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> paralx, dist, r, d, cra, sra, cdc, sdc, pos1[<span class="number">3</span>], term1, pmr, pmd, rvl, vel1[<span class="number">3</span>], pos2[<span class="number">3</span>], vel2[<span class="number">3</span>], xyproj;</span><br><span class="line"></span><br><span class="line">    paralx = incat-&gt;parallax;</span><br><span class="line">    <span class="keyword">if</span> (paralx &lt;= <span class="number">0.0</span>)</span><br><span class="line">        paralx = <span class="number">1.0e-7</span>;</span><br><span class="line"></span><br><span class="line">    dist = RAD2SEC / paralx;</span><br><span class="line">    r = incat-&gt;ra * <span class="number">54000.0</span> / RAD2SEC;</span><br><span class="line">    d = incat-&gt;dec * <span class="number">3600.0</span> / RAD2SEC;</span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line">    pos1[<span class="number">0</span>] = dist * cdc * cra;</span><br><span class="line">    pos1[<span class="number">1</span>] = dist * cdc * sra;</span><br><span class="line">    pos1[<span class="number">2</span>] = dist * sdc;</span><br><span class="line"></span><br><span class="line">    term1 = paralx * <span class="number">36525.0</span>;</span><br><span class="line">    pmr = incat-&gt;promora * <span class="number">15.0</span> * cdc / term1;</span><br><span class="line">    pmd = incat-&gt;promodec / term1;</span><br><span class="line"></span><br><span class="line">    vel1[<span class="number">0</span>] = -pmr * sra - pmd * sdc * cra;</span><br><span class="line">    vel1[<span class="number">1</span>] = pmr * cra - pmd * sdc * sra;</span><br><span class="line">    vel1[<span class="number">2</span>] = pmd * cdc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos2[j] = pos1[j] + vel1[j] * (epoch_fk5 - epoch_hip);</span><br><span class="line">        vel2[j] = vel1[j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xyproj = <span class="built_in">sqrt</span>(pos2[<span class="number">0</span>] * pos2[<span class="number">0</span>] + pos2[<span class="number">1</span>] * pos2[<span class="number">1</span>]);</span><br><span class="line">    r = <span class="built_in">atan2</span>(pos2[<span class="number">1</span>], pos2[<span class="number">0</span>]);</span><br><span class="line">    d = <span class="built_in">atan2</span>(pos2[<span class="number">2</span>], xyproj);</span><br><span class="line">    newcat-&gt;ra = r * RAD2SEC / <span class="number">54000.0</span>;</span><br><span class="line">    newcat-&gt;dec = d * RAD2SEC / <span class="number">3600.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (newcat-&gt;ra &lt; <span class="number">0.0</span>)</span><br><span class="line">        newcat-&gt;ra += <span class="number">24.0</span>;</span><br><span class="line"></span><br><span class="line">    dist = <span class="built_in">sqrt</span>(pos2[<span class="number">0</span>] * pos2[<span class="number">0</span>] + pos2[<span class="number">1</span>] * pos2[<span class="number">1</span>] +</span><br><span class="line">                pos2[<span class="number">2</span>] * pos2[<span class="number">2</span>]);</span><br><span class="line">    paralx = RAD2SEC / dist;</span><br><span class="line">    newcat-&gt;parallax = paralx;</span><br><span class="line"></span><br><span class="line">    cra = <span class="built_in">cos</span>(r);</span><br><span class="line">    sra = <span class="built_in">sin</span>(r);</span><br><span class="line">    cdc = <span class="built_in">cos</span>(d);</span><br><span class="line">    sdc = <span class="built_in">sin</span>(d);</span><br><span class="line">    pmr = -vel2[<span class="number">0</span>] * sra + vel2[<span class="number">1</span>] * cra;</span><br><span class="line">    pmd = -vel2[<span class="number">0</span>] * cra * sdc - vel2[<span class="number">1</span>] * sra * sdc + vel2[<span class="number">2</span>] * cdc;</span><br><span class="line">    rvl = vel2[<span class="number">0</span>] * cra * cdc + vel2[<span class="number">1</span>] * sra * cdc + vel2[<span class="number">2</span>] * sdc;</span><br><span class="line"></span><br><span class="line">    newcat-&gt;promora = pmr * paralx * <span class="number">36525.0</span> / (<span class="number">15.0</span> * cdc);</span><br><span class="line">    newcat-&gt;promodec = pmd * paralx * <span class="number">36525.0</span>;</span><br><span class="line">    newcat-&gt;radialvelocity = rvl * KMAU / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newcat-&gt;parallax &lt;= <span class="number">1.01e-7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        newcat-&gt;parallax = <span class="number">0.0</span>;</span><br><span class="line">        newcat-&gt;radialvelocity = incat-&gt;radialvelocity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newcat-&gt;starnumber = incat-&gt;starnumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform_hip</span><span class="params">(cat_entry *hipparcos, cat_entry *fk5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cat_entry scratch;</span><br><span class="line">    scratch.starnumber = hipparcos-&gt;starnumber;</span><br><span class="line">    scratch.dec = hipparcos-&gt;dec;</span><br><span class="line">    scratch.radialvelocity = hipparcos-&gt;radialvelocity;</span><br><span class="line"></span><br><span class="line">    scratch.ra = hipparcos-&gt;ra / <span class="number">15.0</span>;</span><br><span class="line">    scratch.promora = hipparcos-&gt;promora / (<span class="number">150.0</span> *</span><br><span class="line">                                            <span class="built_in">cos</span>(hipparcos-&gt;dec * DEG2RAD));</span><br><span class="line">    scratch.promodec = hipparcos-&gt;promodec / <span class="number">10.0</span>;</span><br><span class="line">    scratch.parallax = hipparcos-&gt;parallax / <span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line">    transform_cat(&amp;scratch, fk5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sun_eph</span><span class="params">(<span class="keyword">double</span> jd, <span class="keyword">double</span> *ra, <span class="keyword">double</span> *dec, <span class="keyword">double</span> *dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum_lon = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum_r = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> factor = <span class="number">1.0e-07</span>;</span><br><span class="line">    <span class="keyword">double</span> u, arg, lon, lat, t, t2, emean, sin_lon;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sun_con</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">double</span> l;</span><br><span class="line">        <span class="keyword">double</span> r;</span><br><span class="line">        <span class="keyword">double</span> alpha;</span><br><span class="line">        <span class="keyword">double</span> nu;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sun_con</span> <span class="title">con</span>[50] =</span></span><br><span class="line">        &#123;&#123;<span class="number">403406.0</span>, <span class="number">0.0</span>, <span class="number">4.721964</span>, <span class="number">1.621043</span>&#125;,</span><br><span class="line">         &#123;<span class="number">195207.0</span>, <span class="number">-97597.0</span>, <span class="number">5.937458</span>, <span class="number">62830.348067</span>&#125;,</span><br><span class="line">         &#123;<span class="number">119433.0</span>, <span class="number">-59715.0</span>, <span class="number">1.115589</span>, <span class="number">62830.821524</span>&#125;,</span><br><span class="line">         &#123;<span class="number">112392.0</span>, <span class="number">-56188.0</span>, <span class="number">5.781616</span>, <span class="number">62829.634302</span>&#125;,</span><br><span class="line">         &#123;<span class="number">3891.0</span>, <span class="number">-1556.0</span>, <span class="number">5.5474</span>, <span class="number">125660.5691</span>&#125;,</span><br><span class="line">         &#123;<span class="number">2819.0</span>, <span class="number">-1126.0</span>, <span class="number">1.5120</span>, <span class="number">125660.9845</span>&#125;,</span><br><span class="line">         &#123;<span class="number">1721.0</span>, <span class="number">-861.0</span>, <span class="number">4.1897</span>, <span class="number">62832.4766</span>&#125;,</span><br><span class="line">         &#123;<span class="number">0.0</span>, <span class="number">941.0</span>, <span class="number">1.163</span>, <span class="number">0.813</span>&#125;,</span><br><span class="line">         &#123;<span class="number">660.0</span>, <span class="number">-264.0</span>, <span class="number">5.415</span>, <span class="number">125659.310</span>&#125;,</span><br><span class="line">         &#123;<span class="number">350.0</span>, <span class="number">-163.0</span>, <span class="number">4.315</span>, <span class="number">57533.850</span>&#125;,</span><br><span class="line">         &#123;<span class="number">334.0</span>, <span class="number">0.0</span>, <span class="number">4.553</span>, <span class="number">-33.931</span>&#125;,</span><br><span class="line">         &#123;<span class="number">314.0</span>, <span class="number">309.0</span>, <span class="number">5.198</span>, <span class="number">777137.715</span>&#125;,</span><br><span class="line">         &#123;<span class="number">268.0</span>, <span class="number">-158.0</span>, <span class="number">5.989</span>, <span class="number">78604.191</span>&#125;,</span><br><span class="line">         &#123;<span class="number">242.0</span>, <span class="number">0.0</span>, <span class="number">2.911</span>, <span class="number">5.412</span>&#125;,</span><br><span class="line">         &#123;<span class="number">234.0</span>, <span class="number">-54.0</span>, <span class="number">1.423</span>, <span class="number">39302.098</span>&#125;,</span><br><span class="line">         &#123;<span class="number">158.0</span>, <span class="number">0.0</span>, <span class="number">0.061</span>, <span class="number">-34.861</span>&#125;,</span><br><span class="line">         &#123;<span class="number">132.0</span>, <span class="number">-93.0</span>, <span class="number">2.317</span>, <span class="number">115067.698</span>&#125;,</span><br><span class="line">         &#123;<span class="number">129.0</span>, <span class="number">-20.0</span>, <span class="number">3.193</span>, <span class="number">15774.337</span>&#125;,</span><br><span class="line">         &#123;<span class="number">114.0</span>, <span class="number">0.0</span>, <span class="number">2.828</span>, <span class="number">5296.670</span>&#125;,</span><br><span class="line">         &#123;<span class="number">99.0</span>, <span class="number">-47.0</span>, <span class="number">0.52</span>, <span class="number">58849.27</span>&#125;,</span><br><span class="line">         &#123;<span class="number">93.0</span>, <span class="number">0.0</span>, <span class="number">4.65</span>, <span class="number">5296.11</span>&#125;,</span><br><span class="line">         &#123;<span class="number">86.0</span>, <span class="number">0.0</span>, <span class="number">4.35</span>, <span class="number">-3980.70</span>&#125;,</span><br><span class="line">         &#123;<span class="number">78.0</span>, <span class="number">-33.0</span>, <span class="number">2.75</span>, <span class="number">52237.69</span>&#125;,</span><br><span class="line">         &#123;<span class="number">72.0</span>, <span class="number">-32.0</span>, <span class="number">4.50</span>, <span class="number">55076.47</span>&#125;,</span><br><span class="line">         &#123;<span class="number">68.0</span>, <span class="number">0.0</span>, <span class="number">3.23</span>, <span class="number">261.08</span>&#125;,</span><br><span class="line">         &#123;<span class="number">64.0</span>, <span class="number">-10.0</span>, <span class="number">1.22</span>, <span class="number">15773.85</span>&#125;,</span><br><span class="line">         &#123;<span class="number">46.0</span>, <span class="number">-16.0</span>, <span class="number">0.14</span>, <span class="number">188491.03</span>&#125;,</span><br><span class="line">         &#123;<span class="number">38.0</span>, <span class="number">0.0</span>, <span class="number">3.44</span>, <span class="number">-7756.55</span>&#125;,</span><br><span class="line">         &#123;<span class="number">37.0</span>, <span class="number">0.0</span>, <span class="number">4.37</span>, <span class="number">264.89</span>&#125;,</span><br><span class="line">         &#123;<span class="number">32.0</span>, <span class="number">-24.0</span>, <span class="number">1.14</span>, <span class="number">117906.27</span>&#125;,</span><br><span class="line">         &#123;<span class="number">29.0</span>, <span class="number">-13.0</span>, <span class="number">2.84</span>, <span class="number">55075.75</span>&#125;,</span><br><span class="line">         &#123;<span class="number">28.0</span>, <span class="number">0.0</span>, <span class="number">5.96</span>, <span class="number">-7961.39</span>&#125;,</span><br><span class="line">         &#123;<span class="number">27.0</span>, <span class="number">-9.0</span>, <span class="number">5.09</span>, <span class="number">188489.81</span>&#125;,</span><br><span class="line">         &#123;<span class="number">27.0</span>, <span class="number">0.0</span>, <span class="number">1.72</span>, <span class="number">2132.19</span>&#125;,</span><br><span class="line">         &#123;<span class="number">25.0</span>, <span class="number">-17.0</span>, <span class="number">2.56</span>, <span class="number">109771.03</span>&#125;,</span><br><span class="line">         &#123;<span class="number">24.0</span>, <span class="number">-11.0</span>, <span class="number">1.92</span>, <span class="number">54868.56</span>&#125;,</span><br><span class="line">         &#123;<span class="number">21.0</span>, <span class="number">0.0</span>, <span class="number">0.09</span>, <span class="number">25443.93</span>&#125;,</span><br><span class="line">         &#123;<span class="number">21.0</span>, <span class="number">31.0</span>, <span class="number">5.98</span>, <span class="number">-55731.43</span>&#125;,</span><br><span class="line">         &#123;<span class="number">20.0</span>, <span class="number">-10.0</span>, <span class="number">4.03</span>, <span class="number">60697.74</span>&#125;,</span><br><span class="line">         &#123;<span class="number">18.0</span>, <span class="number">0.0</span>, <span class="number">4.27</span>, <span class="number">2132.79</span>&#125;,</span><br><span class="line">         &#123;<span class="number">17.0</span>, <span class="number">-12.0</span>, <span class="number">0.79</span>, <span class="number">109771.63</span>&#125;,</span><br><span class="line">         &#123;<span class="number">14.0</span>, <span class="number">0.0</span>, <span class="number">4.24</span>, <span class="number">-7752.82</span>&#125;,</span><br><span class="line">         &#123;<span class="number">13.0</span>, <span class="number">-5.0</span>, <span class="number">2.01</span>, <span class="number">188491.91</span>&#125;,</span><br><span class="line">         &#123;<span class="number">13.0</span>, <span class="number">0.0</span>, <span class="number">2.65</span>, <span class="number">207.81</span>&#125;,</span><br><span class="line">         &#123;<span class="number">13.0</span>, <span class="number">0.0</span>, <span class="number">4.98</span>, <span class="number">29424.63</span>&#125;,</span><br><span class="line">         &#123;<span class="number">12.0</span>, <span class="number">0.0</span>, <span class="number">0.93</span>, <span class="number">-7.99</span>&#125;,</span><br><span class="line">         &#123;<span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">2.21</span>, <span class="number">46941.14</span>&#125;,</span><br><span class="line">         &#123;<span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">3.59</span>, <span class="number">-68.29</span>&#125;,</span><br><span class="line">         &#123;<span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">1.50</span>, <span class="number">21463.25</span>&#125;,</span><br><span class="line">         &#123;<span class="number">10.0</span>, <span class="number">-9.0</span>, <span class="number">2.55</span>, <span class="number">157208.40</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    u = (jd - T0) / <span class="number">3652500.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arg = con[i].alpha + con[i].nu * u;</span><br><span class="line">        sum_lon += con[i].l * <span class="built_in">sin</span>(arg);</span><br><span class="line">        sum_r += con[i].r * <span class="built_in">cos</span>(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lon = <span class="number">4.9353929</span> + <span class="number">62833.1961680</span> * u + factor * sum_lon;</span><br><span class="line"></span><br><span class="line">    lon = <span class="built_in">fmod</span>(lon, TWOPI);</span><br><span class="line">    <span class="keyword">if</span> (lon &lt; <span class="number">0.0</span>)</span><br><span class="line">        lon += TWOPI;</span><br><span class="line"></span><br><span class="line">    lat = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    *dis = <span class="number">1.0001026</span> + factor * sum_r;</span><br><span class="line"></span><br><span class="line">    t = u * <span class="number">100.0</span>;</span><br><span class="line">    t2 = t * t;</span><br><span class="line">    emean = (<span class="number">0.001813</span> * t2 * t - <span class="number">0.00059</span> * t2 - <span class="number">46.8150</span> * t + <span class="number">84381.448</span>) / RAD2SEC;</span><br><span class="line"></span><br><span class="line">    sin_lon = <span class="built_in">sin</span>(lon);</span><br><span class="line">    *ra = <span class="built_in">atan2</span>((<span class="built_in">cos</span>(emean) * sin_lon), <span class="built_in">cos</span>(lon)) * RAD2DEG;</span><br><span class="line">    *ra = <span class="built_in">fmod</span>(*ra, <span class="number">360.0</span>);</span><br><span class="line">    <span class="keyword">if</span> (*ra &lt; <span class="number">0.0</span>)</span><br><span class="line">        *ra += <span class="number">360.0</span>;</span><br><span class="line">    *ra = *ra / <span class="number">15.0</span>;</span><br><span class="line"></span><br><span class="line">    *dec = <span class="built_in">asin</span>(<span class="built_in">sin</span>(emean) * sin_lon) * RAD2DEG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">precession</span><span class="params">(<span class="keyword">double</span> tjd1, <span class="keyword">double</span> *pos, <span class="keyword">double</span> tjd2, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xx, yx, zx, xy, yy, zy, xz, yz, zz, t, t1, t02, t2, t3, zeta0, zee, theta;</span><br><span class="line"></span><br><span class="line">    t = (tjd1 - T0) / <span class="number">36525.0</span>;</span><br><span class="line">    t1 = (tjd2 - tjd1) / <span class="number">36525.0</span>;</span><br><span class="line">    t02 = t * t;</span><br><span class="line">    t2 = t1 * t1;</span><br><span class="line">    t3 = t2 * t1;</span><br><span class="line">    zeta0 = (<span class="number">2306.2181</span> + <span class="number">1.39656</span> * t - <span class="number">0.000139</span> * t02) * t1 + (<span class="number">0.30188</span> - <span class="number">0.000344</span> * t) * t2 + <span class="number">0.017998</span> * t3;</span><br><span class="line"></span><br><span class="line">    zee = (<span class="number">2306.2181</span> + <span class="number">1.39656</span> * t - <span class="number">0.000139</span> * t02) * t1 + (<span class="number">1.09468</span> + <span class="number">0.000066</span> * t) * t2 + <span class="number">0.018203</span> * t3;</span><br><span class="line"></span><br><span class="line">    theta = (<span class="number">2004.3109</span> - <span class="number">0.85330</span> * t - <span class="number">0.000217</span> * t02) * t1 + (<span class="number">-0.42665</span> - <span class="number">0.000217</span> * t) * t2 - <span class="number">0.041833</span> * t3;</span><br><span class="line"></span><br><span class="line">    zeta0 /= RAD2SEC;</span><br><span class="line">    zee /= RAD2SEC;</span><br><span class="line">    theta /= RAD2SEC;</span><br><span class="line">    xx = <span class="built_in">cos</span>(zeta0) * <span class="built_in">cos</span>(theta) * <span class="built_in">cos</span>(zee) - <span class="built_in">sin</span>(zeta0) * <span class="built_in">sin</span>(zee);</span><br><span class="line">    yx = -<span class="built_in">sin</span>(zeta0) * <span class="built_in">cos</span>(theta) * <span class="built_in">cos</span>(zee) - <span class="built_in">cos</span>(zeta0) *</span><br><span class="line">                                                   <span class="built_in">sin</span>(zee);</span><br><span class="line">    zx = -<span class="built_in">sin</span>(theta) * <span class="built_in">cos</span>(zee);</span><br><span class="line">    xy = <span class="built_in">cos</span>(zeta0) * <span class="built_in">cos</span>(theta) * <span class="built_in">sin</span>(zee) + <span class="built_in">sin</span>(zeta0) * <span class="built_in">cos</span>(zee);</span><br><span class="line">    yy = -<span class="built_in">sin</span>(zeta0) * <span class="built_in">cos</span>(theta) * <span class="built_in">sin</span>(zee) + <span class="built_in">cos</span>(zeta0) *</span><br><span class="line">                                                   <span class="built_in">cos</span>(zee);</span><br><span class="line">    zy = -<span class="built_in">sin</span>(theta) * <span class="built_in">sin</span>(zee);</span><br><span class="line">    xz = <span class="built_in">cos</span>(zeta0) * <span class="built_in">sin</span>(theta);</span><br><span class="line">    yz = -<span class="built_in">sin</span>(zeta0) * <span class="built_in">sin</span>(theta);</span><br><span class="line">    zz = <span class="built_in">cos</span>(theta);</span><br><span class="line">    pos2[<span class="number">0</span>] = xx * pos[<span class="number">0</span>] + yx * pos[<span class="number">1</span>] + zx * pos[<span class="number">2</span>];</span><br><span class="line">    pos2[<span class="number">1</span>] = xy * pos[<span class="number">0</span>] + yy * pos[<span class="number">1</span>] + zy * pos[<span class="number">2</span>];</span><br><span class="line">    pos2[<span class="number">2</span>] = xz * pos[<span class="number">0</span>] + yz * pos[<span class="number">1</span>] + zz * pos[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radec2vector</span><span class="params">(<span class="keyword">double</span> ra, <span class="keyword">double</span> dec, <span class="keyword">double</span> dist, <span class="keyword">double</span> *<span class="built_in">vector</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>[<span class="number">0</span>] = dist * <span class="built_in">cos</span>(DEG2RAD * dec) * <span class="built_in">cos</span>(DEG2RAD * <span class="number">15.0</span> * ra);</span><br><span class="line">    <span class="built_in">vector</span>[<span class="number">1</span>] = dist * <span class="built_in">cos</span>(DEG2RAD * dec) * <span class="built_in">sin</span>(DEG2RAD * <span class="number">15.0</span> * ra);</span><br><span class="line">    <span class="built_in">vector</span>[<span class="number">2</span>] = dist * <span class="built_in">sin</span>(DEG2RAD * dec);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">solarsystem</span><span class="params">(<span class="keyword">double</span> tjd, <span class="keyword">short</span> <span class="keyword">int</span> origin, <span class="keyword">double</span> *pos, <span class="keyword">double</span> *vel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> ierr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pm[<span class="number">4</span>] = &#123;<span class="number">1047.349</span>, <span class="number">3497.898</span>, <span class="number">22903.0</span>, <span class="number">19412.2</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pa[<span class="number">4</span>] = &#123;<span class="number">5.203363</span>, <span class="number">9.537070</span>, <span class="number">19.191264</span>, <span class="number">30.068963</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pl[<span class="number">4</span>] = &#123;<span class="number">0.600470</span>, <span class="number">0.871693</span>, <span class="number">5.466933</span>, <span class="number">5.321160</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> pn[<span class="number">4</span>] = &#123;<span class="number">1.450138e-3</span>, <span class="number">5.841727e-4</span>, <span class="number">2.047497e-4</span>, <span class="number">1.043891e-4</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> obl = <span class="number">23.43929111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> tlast = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> sine, cose, tmass, pbary[<span class="number">3</span>], vbary[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> oblr, qjd, ras, decs, diss, pos1[<span class="number">3</span>], p[<span class="number">3</span>][<span class="number">3</span>], dlon, sinl, cosl, x, y, z, xdot, ydot, zdot, f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tlast == <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        oblr = obl * TWOPI / <span class="number">360.0</span>;</span><br><span class="line">        sine = <span class="built_in">sin</span>(oblr);</span><br><span class="line">        cose = <span class="built_in">cos</span>(oblr);</span><br><span class="line">        tmass = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            tmass += <span class="number">1.0</span> / pm[i];</span><br><span class="line">        tlast = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((tjd &lt; <span class="number">2340000.5</span>) || (tjd &gt; <span class="number">2560000.5</span>))</span><br><span class="line">        <span class="keyword">return</span> (ierr = <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        qjd = tjd + (<span class="keyword">double</span>)(i - <span class="number">1</span>) * <span class="number">0.1</span>;</span><br><span class="line">        sun_eph(qjd, &amp;ras, &amp;decs, &amp;diss);</span><br><span class="line">        radec2vector(ras, decs, diss, pos1);</span><br><span class="line">        precession(qjd, pos1, T0, pos);</span><br><span class="line">        p[i][<span class="number">0</span>] = -pos[<span class="number">0</span>];</span><br><span class="line">        p[i][<span class="number">1</span>] = -pos[<span class="number">1</span>];</span><br><span class="line">        p[i][<span class="number">2</span>] = -pos[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos[i] = p[<span class="number">1</span>][i];</span><br><span class="line">        vel[i] = (p[<span class="number">2</span>][i] - p[<span class="number">0</span>][i]) / <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (origin == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(tjd - tlast) &gt;= <span class="number">1.0e-06</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                pbary[i] = vbary[i] = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                dlon = pl[i] + pn[i] * (tjd - T0);</span><br><span class="line">                dlon = <span class="built_in">fmod</span>(dlon, TWOPI);</span><br><span class="line">                sinl = <span class="built_in">sin</span>(dlon);</span><br><span class="line">                cosl = <span class="built_in">cos</span>(dlon);</span><br><span class="line"></span><br><span class="line">                x = pa[i] * cosl;</span><br><span class="line">                y = pa[i] * sinl * cose;</span><br><span class="line">                z = pa[i] * sinl * sine;</span><br><span class="line">                xdot = -pa[i] * pn[i] * sinl;</span><br><span class="line">                ydot = pa[i] * pn[i] * cosl * cose;</span><br><span class="line">                zdot = pa[i] * pn[i] * cosl * sine;</span><br><span class="line"></span><br><span class="line">                f = <span class="number">1.0</span> / (pm[i] * tmass);</span><br><span class="line"></span><br><span class="line">                pbary[<span class="number">0</span>] += x * f;</span><br><span class="line">                pbary[<span class="number">1</span>] += y * f;</span><br><span class="line">                pbary[<span class="number">2</span>] += z * f;</span><br><span class="line">                vbary[<span class="number">0</span>] += xdot * f;</span><br><span class="line">                vbary[<span class="number">1</span>] += ydot * f;</span><br><span class="line">                vbary[<span class="number">2</span>] += zdot * f;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tlast = tjd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pos[i] -= pbary[i];</span><br><span class="line">            vel[i] -= vbary[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (ierr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">proper_motion</span><span class="params">(<span class="keyword">double</span> tjd1, <span class="keyword">double</span> *pos, <span class="keyword">double</span> *vel, <span class="keyword">double</span> tjd2, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        pos2[j] = pos[j] + (vel[j] * (tjd2 - tjd1));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">get_earth</span><span class="params">(<span class="keyword">double</span> tjd, <span class="keyword">double</span> *tdb, <span class="keyword">double</span> *bary_earthp, <span class="keyword">double</span> *bary_earthv, <span class="keyword">double</span> *helio_earthp, <span class="keyword">double</span> *helio_earthv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> tjd_last = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> time1, peb[<span class="number">3</span>], veb[<span class="number">3</span>], pes[<span class="number">3</span>], ves[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">double</span> dummy, secdiff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(tjd - tjd_last) &gt; <span class="number">1.0e-6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tdb2tdt(tjd, &amp;dummy, &amp;secdiff);</span><br><span class="line">        time1 = tjd + secdiff / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (error = solarsystem(time1, BARYC, peb, veb))</span><br><span class="line">        &#123;</span><br><span class="line">            tjd_last = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (error = solarsystem(time1, HELIOC, pes, ves))</span><br><span class="line">        &#123;</span><br><span class="line">            tjd_last = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">return</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        tjd_last = tjd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *tdb = time1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">short</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        bary_earthp[i] = peb[i];</span><br><span class="line">        bary_earthv[i] = veb[i];</span><br><span class="line">        helio_earthp[i] = pes[i];</span><br><span class="line">        helio_earthv[i] = ves[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bary_to_geo</span><span class="params">(<span class="keyword">double</span> *pos, <span class="keyword">double</span> *earthvector, <span class="keyword">double</span> *pos2, <span class="keyword">double</span> *lighttime)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum_of_squares;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        pos2[j] = pos[j] - earthvector[j];</span><br><span class="line"></span><br><span class="line">    sum_of_squares = <span class="built_in">pow</span>(pos2[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos2[<span class="number">1</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos2[<span class="number">2</span>], <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">    *lighttime = <span class="built_in">sqrt</span>(sum_of_squares) / C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">sun_field</span><span class="params">(<span class="keyword">double</span> *pos, <span class="keyword">double</span> *earthvector, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> f = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> p1mag, pemag, cosd, sind, b, bm, pqmag, zfinl, zinit,</span><br><span class="line">        xifinl, xiinit, delphi, delphp, delp, p1hat[<span class="number">3</span>], pehat[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> c = (C * MAU) / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">    p1mag = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(pos[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos[<span class="number">1</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos[<span class="number">2</span>], <span class="number">2.0</span>));</span><br><span class="line">    pemag = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(earthvector[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(earthvector[<span class="number">1</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(earthvector[<span class="number">2</span>], <span class="number">2.0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1hat[j] = pos[j] / p1mag;</span><br><span class="line">        pehat[j] = earthvector[j] / pemag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cosd = -pehat[<span class="number">0</span>] * p1hat[<span class="number">0</span>] - pehat[<span class="number">1</span>] * p1hat[<span class="number">1</span>] - pehat[<span class="number">2</span>] * p1hat[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(cosd) &gt; <span class="number">0.9999999999</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            pos2[j] = pos[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sind = <span class="built_in">sqrt</span>(<span class="number">1.0</span> - <span class="built_in">pow</span>(cosd, <span class="number">2.0</span>));</span><br><span class="line"></span><br><span class="line">        b = pemag * sind;</span><br><span class="line">        bm = b * MAU;</span><br><span class="line"></span><br><span class="line">        pqmag = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(p1mag, <span class="number">2.0</span>) + <span class="built_in">pow</span>(pemag, <span class="number">2.0</span>) - <span class="number">2.0</span> * p1mag * pemag * cosd);</span><br><span class="line"></span><br><span class="line">        zfinl = pemag * cosd;</span><br><span class="line">        zinit = -p1mag + zfinl;</span><br><span class="line">        xifinl = zfinl / b;</span><br><span class="line">        xiinit = zinit / b;</span><br><span class="line"></span><br><span class="line">        delphi = <span class="number">2.0</span> * GS / (bm * c * c) * (xifinl / <span class="built_in">sqrt</span>(<span class="number">1.0</span> + <span class="built_in">pow</span>(xifinl, <span class="number">2.0</span>)) - xiinit / <span class="built_in">sqrt</span>(<span class="number">1.0</span> + <span class="built_in">pow</span>(xiinit, <span class="number">2.0</span>)));</span><br><span class="line"></span><br><span class="line">        delphp = delphi / (<span class="number">1.0</span> + (pemag / pqmag));</span><br><span class="line"></span><br><span class="line">        f = delphp * p1mag / sind;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            delp = f * (cosd * p1hat[j] + pehat[j]);</span><br><span class="line">            pos2[j] = pos[j] + delp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">aberration</span><span class="params">(<span class="keyword">double</span> *pos, <span class="keyword">double</span> *ve, <span class="keyword">double</span> lighttime, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> p1mag, vemag, beta, dot, cosd, gammai, p, q, r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lighttime == <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p1mag = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(pos[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos[<span class="number">1</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(pos[<span class="number">2</span>], <span class="number">2.0</span>));</span><br><span class="line">        lighttime = p1mag / C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p1mag = lighttime * C;</span><br><span class="line"></span><br><span class="line">    vemag = <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(ve[<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(ve[<span class="number">1</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(ve[<span class="number">2</span>], <span class="number">2.0</span>));</span><br><span class="line">    beta = vemag / C;</span><br><span class="line">    dot = pos[<span class="number">0</span>] * ve[<span class="number">0</span>] + pos[<span class="number">1</span>] * ve[<span class="number">1</span>] + pos[<span class="number">2</span>] * ve[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    cosd = dot / (p1mag * vemag);</span><br><span class="line">    gammai = <span class="built_in">sqrt</span>(<span class="number">1.0</span> - <span class="built_in">pow</span>(beta, <span class="number">2.0</span>));</span><br><span class="line">    p = beta * cosd;</span><br><span class="line">    q = (<span class="number">1.0</span> + p / (<span class="number">1.0</span> + gammai)) * lighttime;</span><br><span class="line">    r = <span class="number">1.0</span> + p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">short</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        pos2[j] = (gammai * pos[j] + q * ve[j]) / r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">nutate</span><span class="params">(<span class="keyword">double</span> tjd, <span class="keyword">short</span> <span class="keyword">int</span> fn, <span class="keyword">double</span> *pos, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> cobm, sobm, cobt, sobt, cpsi, spsi, xx, yx, zx, xy, yy, zy, xz, yz, zz, oblm, oblt, eqeq, psi, eps;</span><br><span class="line"></span><br><span class="line">    earthtilt(tjd, &amp;oblm, &amp;oblt, &amp;eqeq, &amp;psi, &amp;eps);</span><br><span class="line"></span><br><span class="line">    cobm = <span class="built_in">cos</span>(oblm * DEG2RAD);</span><br><span class="line">    sobm = <span class="built_in">sin</span>(oblm * DEG2RAD);</span><br><span class="line">    cobt = <span class="built_in">cos</span>(oblt * DEG2RAD);</span><br><span class="line">    sobt = <span class="built_in">sin</span>(oblt * DEG2RAD);</span><br><span class="line">    cpsi = <span class="built_in">cos</span>(psi / RAD2SEC);</span><br><span class="line">    spsi = <span class="built_in">sin</span>(psi / RAD2SEC);</span><br><span class="line"></span><br><span class="line">    xx = cpsi;</span><br><span class="line">    yx = -spsi * cobm;</span><br><span class="line">    zx = -spsi * sobm;</span><br><span class="line">    xy = spsi * cobt;</span><br><span class="line">    yy = cpsi * cobm * cobt + sobm * sobt;</span><br><span class="line">    zy = cpsi * sobm * cobt - cobm * sobt;</span><br><span class="line">    xz = spsi * sobt;</span><br><span class="line">    yz = cpsi * cobm * sobt - sobm * cobt;</span><br><span class="line">    zz = cpsi * sobm * sobt + cobm * cobt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fn)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        pos2[<span class="number">0</span>] = xx * pos[<span class="number">0</span>] + yx * pos[<span class="number">1</span>] + zx * pos[<span class="number">2</span>];</span><br><span class="line">        pos2[<span class="number">1</span>] = xy * pos[<span class="number">0</span>] + yy * pos[<span class="number">1</span>] + zy * pos[<span class="number">2</span>];</span><br><span class="line">        pos2[<span class="number">2</span>] = xz * pos[<span class="number">0</span>] + yz * pos[<span class="number">1</span>] + zz * pos[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        pos2[<span class="number">0</span>] = xx * pos[<span class="number">0</span>] + xy * pos[<span class="number">1</span>] + xz * pos[<span class="number">2</span>];</span><br><span class="line">        pos2[<span class="number">1</span>] = yx * pos[<span class="number">0</span>] + yy * pos[<span class="number">1</span>] + yz * pos[<span class="number">2</span>];</span><br><span class="line">        pos2[<span class="number">2</span>] = zx * pos[<span class="number">0</span>] + zy * pos[<span class="number">1</span>] + zz * pos[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="keyword">int</span> <span class="title">app_star</span><span class="params">(<span class="keyword">double</span> tjd, cat_entry *star, <span class="keyword">double</span> *ra, <span class="keyword">double</span> *dec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tdb, time2, peb[<span class="number">3</span>], veb[<span class="number">3</span>], pes[<span class="number">3</span>], ves[<span class="number">3</span>], pos1[<span class="number">3</span>], pos2[<span class="number">3</span>],</span><br><span class="line">        pos3[<span class="number">3</span>], pos4[<span class="number">3</span>], pos5[<span class="number">3</span>], pos6[<span class="number">3</span>], pos7[<span class="number">3</span>], vel1[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error = get_earth(tjd, &amp;tdb, peb, veb, pes, ves))</span><br><span class="line">    &#123;</span><br><span class="line">        *ra = <span class="number">0.0</span>;</span><br><span class="line">        *dec = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    starvectors(star, pos1, vel1);</span><br><span class="line">    proper_motion(T0, pos1, vel1, tdb, pos2);</span><br><span class="line"></span><br><span class="line">    bary_to_geo(pos2, peb, pos3, &amp;time2);</span><br><span class="line">    sun_field(pos3, pes, pos4);</span><br><span class="line">    aberration(pos4, veb, time2, pos5);</span><br><span class="line">    precession(T0, pos5, tdb, pos6);</span><br><span class="line">    nutate(tdb, FN0, pos6, pos7);</span><br><span class="line"></span><br><span class="line">    vector2radec(pos7, ra, dec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spin</span><span class="params">(<span class="keyword">double</span> st, <span class="keyword">double</span> *pos1, <span class="keyword">double</span> *pos2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> str, cosst, sinst, xx, yx, xy, yy;</span><br><span class="line"></span><br><span class="line">    str = st * <span class="number">15.0</span> * DEG2RAD;</span><br><span class="line">    cosst = <span class="built_in">cos</span>(str);</span><br><span class="line">    sinst = <span class="built_in">sin</span>(str);</span><br><span class="line"></span><br><span class="line">    xx = cosst;</span><br><span class="line">    yx = -sinst;</span><br><span class="line">    xy = sinst;</span><br><span class="line">    yy = cosst;</span><br><span class="line"></span><br><span class="line">    pos2[<span class="number">0</span>] = xx * pos1[<span class="number">0</span>] + yx * pos1[<span class="number">1</span>];</span><br><span class="line">    pos2[<span class="number">1</span>] = xy * pos1[<span class="number">0</span>] + yy * pos1[<span class="number">1</span>];</span><br><span class="line">    pos2[<span class="number">2</span>] = pos1[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pnsw</span><span class="params">(<span class="keyword">double</span> gast, <span class="keyword">double</span> *vece, <span class="keyword">double</span> *vecs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dummy, v1[<span class="number">3</span>], v2[<span class="number">3</span>], v3[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        v1[j] = vece[j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gast == <span class="number">0.0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            v2[j] = v1[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        spin(gast, v1, v2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        vecs[j] = v2[j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sidereal_time</span><span class="params">(<span class="keyword">double</span> jd_high, <span class="keyword">double</span> ee, <span class="keyword">double</span> *gst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> t_hi, t_lo, t, t2, t3, st;</span><br><span class="line"></span><br><span class="line">    t_hi = (jd_high - T0) / <span class="number">36525.0</span>;</span><br><span class="line">    t_lo = <span class="number">0</span>;</span><br><span class="line">    t = t_hi;</span><br><span class="line">    t2 = t * t;</span><br><span class="line">    t3 = t2 * t;</span><br><span class="line"></span><br><span class="line">    st = ee - <span class="number">6.2e-6</span> * t3 + <span class="number">0.093104</span> * t2 + <span class="number">67310.54841</span> + <span class="number">8640184.812866</span> * t_lo + <span class="number">3155760000.0</span> * t_lo + <span class="number">8640184.812866</span> * t_hi + <span class="number">3155760000.0</span> * t_hi;</span><br><span class="line"></span><br><span class="line">    *gst = <span class="built_in">fmod</span>((st / <span class="number">3600.0</span>), <span class="number">24.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*gst &lt; <span class="number">0.0</span>)</span><br><span class="line">        *gst += <span class="number">24.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">equ2hor</span><span class="params">(<span class="keyword">double</span> tjd, site_info *location, <span class="keyword">double</span> ra, <span class="keyword">double</span> dec, <span class="keyword">double</span> *zd, <span class="keyword">double</span> *az, <span class="keyword">double</span> *rar, <span class="keyword">double</span> *decr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ujd, dummy, secdiff, tdb, mobl, tobl, ee, dpsi, deps, gast,</span><br><span class="line">        sinlat, coslat, sinlon, coslon, sindc, cosdc, sinra, cosra,</span><br><span class="line">        uze[<span class="number">3</span>], une[<span class="number">3</span>], uwe[<span class="number">3</span>], uz[<span class="number">3</span>], un[<span class="number">3</span>], uw[<span class="number">3</span>], p[<span class="number">3</span>], pz, pn, pw,</span><br><span class="line">        proj, zd0, zd1, refr, cosr, prlen, rlen, pr[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    ujd = tjd;</span><br><span class="line"></span><br><span class="line">    tdb2tdt(tjd, &amp;dummy, &amp;secdiff);</span><br><span class="line">    tdb = tjd + secdiff / <span class="number">86400.0</span>;</span><br><span class="line"></span><br><span class="line">    earthtilt(tdb, &amp;mobl, &amp;tobl, &amp;ee, &amp;dpsi, &amp;deps);</span><br><span class="line"></span><br><span class="line">    sidereal_time(ujd, ee, &amp;gast);</span><br><span class="line">    *rar = ra;</span><br><span class="line">    *decr = dec;</span><br><span class="line"></span><br><span class="line">    sinlat = <span class="built_in">sin</span>(location-&gt;latitude * DEG2RAD);</span><br><span class="line">    coslat = <span class="built_in">cos</span>(location-&gt;latitude * DEG2RAD);</span><br><span class="line">    sinlon = <span class="built_in">sin</span>(location-&gt;longitude * DEG2RAD);</span><br><span class="line">    coslon = <span class="built_in">cos</span>(location-&gt;longitude * DEG2RAD);</span><br><span class="line">    sindc = <span class="built_in">sin</span>(dec * DEG2RAD);</span><br><span class="line">    cosdc = <span class="built_in">cos</span>(dec * DEG2RAD);</span><br><span class="line">    sinra = <span class="built_in">sin</span>(ra * <span class="number">15.0</span> * DEG2RAD);</span><br><span class="line">    cosra = <span class="built_in">cos</span>(ra * <span class="number">15.0</span> * DEG2RAD);</span><br><span class="line"></span><br><span class="line">    uze[<span class="number">0</span>] = coslat * coslon;</span><br><span class="line">    uze[<span class="number">1</span>] = coslat * sinlon;</span><br><span class="line">    uze[<span class="number">2</span>] = sinlat;</span><br><span class="line">    une[<span class="number">0</span>] = -sinlat * coslon;</span><br><span class="line">    une[<span class="number">1</span>] = -sinlat * sinlon;</span><br><span class="line">    une[<span class="number">2</span>] = coslat;</span><br><span class="line"></span><br><span class="line">    uwe[<span class="number">0</span>] = sinlon;</span><br><span class="line">    uwe[<span class="number">1</span>] = -coslon;</span><br><span class="line">    uwe[<span class="number">2</span>] = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    pnsw(gast, uze, uz);</span><br><span class="line">    pnsw(gast, une, un);</span><br><span class="line">    pnsw(gast, uwe, uw);</span><br><span class="line"></span><br><span class="line">    p[<span class="number">0</span>] = cosdc * cosra;</span><br><span class="line">    p[<span class="number">1</span>] = cosdc * sinra;</span><br><span class="line">    p[<span class="number">2</span>] = sindc;</span><br><span class="line"></span><br><span class="line">    pz = p[<span class="number">0</span>] * uz[<span class="number">0</span>] + p[<span class="number">1</span>] * uz[<span class="number">1</span>] + p[<span class="number">2</span>] * uz[<span class="number">2</span>];</span><br><span class="line">    pn = p[<span class="number">0</span>] * un[<span class="number">0</span>] + p[<span class="number">1</span>] * un[<span class="number">1</span>] + p[<span class="number">2</span>] * un[<span class="number">2</span>];</span><br><span class="line">    pw = p[<span class="number">0</span>] * uw[<span class="number">0</span>] + p[<span class="number">1</span>] * uw[<span class="number">1</span>] + p[<span class="number">2</span>] * uw[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    proj = <span class="built_in">sqrt</span>(pn * pn + pw * pw);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (proj &gt; <span class="number">0.0</span>)</span><br><span class="line">        *az = -<span class="built_in">atan2</span>(pw, pn) * RAD2DEG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*az &lt; <span class="number">0.0</span>)</span><br><span class="line">        *az += <span class="number">360.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*az &gt;= <span class="number">360.0</span>)</span><br><span class="line">        *az -= <span class="number">360.0</span>;</span><br><span class="line"></span><br><span class="line">    *zd = <span class="built_in">atan2</span>(proj, pz) * RAD2DEG;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">julian_date</span><span class="params">(<span class="keyword">short</span> <span class="keyword">int</span> year, <span class="keyword">short</span> <span class="keyword">int</span> month, <span class="keyword">short</span> <span class="keyword">int</span> day, <span class="keyword">double</span> hour)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> jd12h = (<span class="keyword">long</span>)day - <span class="number">32075L</span> + <span class="number">1461L</span> * ((<span class="keyword">long</span>)year + <span class="number">4800L</span> + ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span>) / <span class="number">4L</span> + <span class="number">367L</span> * ((<span class="keyword">long</span>)month - <span class="number">2L</span> - ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span> * <span class="number">12L</span>) / <span class="number">12L</span> - <span class="number">3L</span> * (((<span class="keyword">long</span>)year + <span class="number">4900L</span> + ((<span class="keyword">long</span>)month - <span class="number">14L</span>) / <span class="number">12L</span>) / <span class="number">100L</span>) / <span class="number">4L</span>;</span><br><span class="line">    <span class="keyword">double</span> tjd = (<span class="keyword">double</span>)jd12h - <span class="number">0.5</span> + hour / <span class="number">24.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (tjd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convert(hip_ra, hip_dec, hip_promora, hip_promodec, hip_parallax, fk5_ra, fk5_dec);</span></span><br><span class="line">    cat_entry hip = &#123;<span class="number">113368</span>, <span class="number">6.011119421</span> / TWOPI * <span class="number">360</span>, <span class="number">-0.516998583</span> / TWOPI * <span class="number">360</span>, <span class="number">328.95</span>, <span class="number">-164.67</span>, <span class="number">129.81</span>, <span class="number">0</span>&#125;; <span class="comment">// &quot;hi&quot;, &quot;beiluoshimen&quot;</span></span><br><span class="line">    <span class="comment">// cat_entry hip = &#123;&quot;ho&quot;, &quot;niulang&quot;, 97649, 5.195749333 / TWOPI * 360, 0.15476506 / TWOPI * 360, 536.23, 385.29, 194.95, 0&#125;;</span></span><br><span class="line">    <span class="comment">// cat_entry hip = &#123;&quot;hi&quot;, &quot;tianhezuo&quot;, 109268, 5.79550224 / TWOPI * 360, -0.819617367 / TWOPI * 360, 126.69, -147.47, 32.29, 0&#125;;</span></span><br><span class="line">    cat_entry fk5;</span><br><span class="line">    site_info loc = &#123;<span class="number">32.08</span>, <span class="number">118.8</span>&#125;; <span class="comment">// 温度10摄氏度 高度10米 大气压1013毫巴=1013百帕</span></span><br><span class="line">    transform_hip(&amp;hip, &amp;fk5);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fk5.ra &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fk5.dec &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> now;</span><br><span class="line">    tm *utc;</span><br><span class="line">    <span class="keyword">double</span> tjd, ra, dec, zd, az, rar, decr, rah;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        now = time(<span class="number">0</span>);</span><br><span class="line">        utc = gmtime(&amp;now);</span><br><span class="line">        tjd = julian_date(<span class="number">1900</span> + utc-&gt;tm_year, <span class="number">1</span> + utc-&gt;tm_mon, utc-&gt;tm_mday, utc-&gt;tm_hour + utc-&gt;tm_min / <span class="number">60.0</span> + utc-&gt;tm_sec / <span class="number">3600.0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; tjd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// double tjd = 2459921.90082;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; tjd &quot;</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">10</span>) &lt;&lt; tjd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        app_star(tjd, &amp;fk5, &amp;ra, &amp;dec);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ra &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">             &lt;&lt; dec &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        equ2hor(tjd, &amp;loc, ra, dec, &amp;zd, &amp;az, &amp;rar, &amp;decr);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">90</span> - zd &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">             &lt;&lt; az &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; zd 高度 : &quot;</span> &lt;&lt; <span class="keyword">int</span>(<span class="number">90</span> - zd) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="keyword">int</span>((<span class="number">90</span> - zd - <span class="keyword">int</span>(<span class="number">90</span> - zd)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="number">60</span> * ((<span class="number">90</span> - zd - <span class="keyword">int</span>(<span class="number">90</span> - zd)) * <span class="number">60</span> - <span class="keyword">int</span>((<span class="number">90</span> - zd - <span class="keyword">int</span>(<span class="number">90</span> - zd)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; az 方位 : &quot;</span> &lt;&lt; <span class="keyword">int</span>(az) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="keyword">int</span>((az - <span class="keyword">int</span>(az)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="number">60</span> * ((az - <span class="keyword">int</span>(az)) * <span class="number">60</span> - <span class="keyword">int</span>((az - <span class="keyword">int</span>(az)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// double tdb,</span></span><br><span class="line">    <span class="comment">//     time2, peb[3], veb[3], pes[3], ves[3], pos1[3], pos2[3], pos3[3], pos4[3], pos5[3], pos6[3], pos7[3], vel1[3];</span></span><br><span class="line"></span><br><span class="line">    rah = ra;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot; ra: &quot; &lt;&lt; fk5_ra;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; rah: &quot;</span> &lt;&lt; <span class="keyword">int</span>(rah) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="number">60</span> * ((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span> - <span class="keyword">int</span>((rah - <span class="keyword">int</span>(rah)) * <span class="number">60</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; fk5_dec &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">double</span> dech = dec;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; dech: &quot;</span> &lt;&lt; (dech &lt; <span class="number">0</span> ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) &lt;&lt; <span class="built_in">abs</span>(<span class="keyword">int</span>(dech)) &lt;&lt; <span class="string">&quot; ram: &quot;</span> &lt;&lt; <span class="built_in">abs</span>(<span class="keyword">int</span>((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span>)) &lt;&lt; <span class="string">&quot; ras: &quot;</span> &lt;&lt; <span class="built_in">abs</span>(<span class="number">60</span> * ((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span> - <span class="keyword">int</span>((dech - <span class="keyword">int</span>(dech)) * <span class="number">60</span>))) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在novas库的帮助下，顺利由原始hipparcosJ991.25星表转为 标准的J2000，再转到视赤道坐标系下，再转到地平坐标系下</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>冲毕业第二、三周记录</title>
    <link href="https://tsuiwade.github.io/2022/12/06/blog67-study2/"/>
    <id>https://tsuiwade.github.io/2022/12/06/blog67-study2/</id>
    <published>2022-12-06T16:30:34.000Z</published>
    <updated>2022-12-06T16:30:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>中文网站上介绍星图绘制的文章挺少的，知乎这个系列介绍的挺好的</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221123135230526.png" alt="image-20221123135230526"></p><p><a href="https://zhuanlan.zhihu.com/p/82496762">https://zhuanlan.zhihu.com/p/82496762</a></p><p>下载Hipparcos Catalog，用python进行简单处理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">user_cols = [<span class="string">&#x27;hip&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="string">&#x27;ra&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;plx&#x27;</span>, <span class="string">&#x27;pmra&#x27;</span>, <span class="string">&#x27;pmde&#x27;</span>, <span class="string">&#x27;era&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;ede&#x27;</span>, <span class="string">&#x27;eplx&#x27;</span>, <span class="string">&#x27;epmra&#x27;</span>, <span class="string">&#x27;epmde&#x27;</span>, <span class="string">&#x27;ntr&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;var&#x27;</span>, <span class="string">&#x27;ic&#x27;</span>, <span class="string">&#x27;hpmag&#x27;</span>, <span class="string">&#x27;ehpmag&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df = pd.read_table(<span class="string">&quot;hip2.dat&quot;</span>, sep=<span class="string">&#x27;\s+&#x27;</span>, header=<span class="literal">None</span>,</span><br><span class="line">                   engine=<span class="string">&#x27;python&#x27;</span>, index_col=<span class="number">0</span>, usecols=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">21</span>)), names=user_cols)</span><br><span class="line"></span><br><span class="line">print(df.shape)</span><br><span class="line">print(df.head())</span><br><span class="line">df1 = df[df.hpmag &lt;= <span class="number">6</span>]</span><br><span class="line">print(df1.shape)</span><br><span class="line">print(df1.head())</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(117955, 20)</span><br><span class="line">     a2  a3  a4        ra        de    plx    pmra  pmde   era   ede  eplx  epmra  epmde  ntr    f2  f1  var  ic   hpmag  ehpmag</span><br><span class="line">hip</span><br><span class="line">1     5   0   1  0.000016  0.019007   4.55   -4.55 -1.19  1.29  0.66  1.33   1.25   0.75   90  0.91   0  0.0   0  9.2043  0.0020</span><br><span class="line">2    75   4   1  0.000066 -0.340319  20.85  182.88 -1.31  0.95  0.53  1.13   1.22   0.66  121  0.06   0  0.0   0  9.4017  0.0017</span><br><span class="line">3     5   0   1  0.000087  0.678222   2.26    4.27 -3.43  0.31  0.21  0.36   0.34   0.27  129  1.56   0  0.0   0  6.6081  0.0006</span><br><span class="line">4     5   0   1  0.000146 -0.905713   7.45   62.64  0.19  0.40  0.47  0.77   0.51   0.51  205 -1.50   0  0.0   0  8.1498  0.0011</span><br><span class="line">5     5   0   1  0.000174 -0.708451   3.88    1.89  8.06  0.55  0.50  0.95   0.58   0.64  163  0.36   0  0.0   0  8.7077  0.0018</span><br><span class="line">(4559, 20)</span><br><span class="line">     a2  a3  a4        ra        de    plx   pmra    pmde   era   ede  eplx  epmra  epmde  ntr    f2  f1  var  ic   hpmag  ehpmag</span><br><span class="line">hip</span><br><span class="line">88    5   0   1  0.004698 -0.851893   5.50 -18.36   -5.82  0.26  0.29  0.48   0.46   0.38  157  4.38   0  0.0   0  5.8690  0.0006</span><br><span class="line">107   5   0   1  0.005826 -0.878553   6.01   7.88   11.40  0.21  0.20  0.32   0.25   0.24  170  1.00   0  0.0   0  5.6243  0.0012</span><br><span class="line">122   5   0   1  0.006970 -1.345043  15.02 -57.30 -177.06  0.16  0.14  0.18   0.19   0.15  142 -0.13   1  0.0   0  4.9354  0.0006</span><br><span class="line">124   5   0   1  0.007055  1.068540   1.06  -3.14   -0.74  0.20  0.19  0.27   0.26   0.21  153  1.28   0  0.0   0  5.6725  0.0006</span><br><span class="line">145   5   0   1  0.007959 -0.052839   7.18  19.08   -9.66  0.28  0.17  0.30   0.32   0.16  100  1.86   0  0.0   0  5.0831  0.0006</span><br></pre></td></tr></table></figure><p>完整处理为一个csv文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">user_cols = [<span class="string">&#x27;hip&#x27;</span>, <span class="string">&#x27;a2&#x27;</span>, <span class="string">&#x27;a3&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="string">&#x27;ra&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;plx&#x27;</span>, <span class="string">&#x27;pmra&#x27;</span>, <span class="string">&#x27;pmde&#x27;</span>, <span class="string">&#x27;era&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;ede&#x27;</span>, <span class="string">&#x27;eplx&#x27;</span>, <span class="string">&#x27;epmra&#x27;</span>, <span class="string">&#x27;epmde&#x27;</span>, <span class="string">&#x27;ntr&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;var&#x27;</span>, <span class="string">&#x27;ic&#x27;</span>, <span class="string">&#x27;hpmag&#x27;</span>, <span class="string">&#x27;ehpmag&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df = pd.read_table(<span class="string">&quot;hip2.dat&quot;</span>, sep=<span class="string">&#x27;\s+&#x27;</span>, header=<span class="literal">None</span>,</span><br><span class="line">                   engine=<span class="string">&#x27;python&#x27;</span>, index_col=<span class="number">0</span>, usecols=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">21</span>)), names=user_cols)</span><br><span class="line"></span><br><span class="line">print(df.shape)</span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line">df1 = df[df.hpmag &lt;= <span class="number">6</span>]</span><br><span class="line">print(df1.shape)</span><br><span class="line"><span class="comment"># print(df1.head())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df2 = df1[df1.a4 == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">tmp = df2[<span class="string">&#x27;ra&#x27;</span>] * <span class="number">180</span> / math.pi</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_d&#x27;</span>, tmp)</span><br><span class="line">tmp = df2[<span class="string">&#x27;ra_d&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_dh&#x27;</span>, tmp)</span><br><span class="line">tmp = ((df2[<span class="string">&#x27;ra_d&#x27;</span>] - df2[<span class="string">&#x27;ra_dh&#x27;</span>]) * <span class="number">60</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_dm&#x27;</span>, tmp)</span><br><span class="line">tmp = (((df2[<span class="string">&#x27;ra_d&#x27;</span>] - df2[<span class="string">&#x27;ra_dh&#x27;</span>]) * <span class="number">60</span>-df2[<span class="string">&#x27;ra_dm&#x27;</span>])*<span class="number">60</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_ds&#x27;</span>, tmp)</span><br><span class="line"></span><br><span class="line">tmp = df2[<span class="string">&#x27;ra&#x27;</span>] * <span class="number">24</span> / <span class="number">2</span> / math.pi</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_t&#x27;</span>, tmp)</span><br><span class="line">tmp = df2[<span class="string">&#x27;ra_t&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_th&#x27;</span>, tmp)</span><br><span class="line">tmp = ((df2[<span class="string">&#x27;ra_t&#x27;</span>] - df2[<span class="string">&#x27;ra_th&#x27;</span>]) * <span class="number">60</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_tm&#x27;</span>, tmp)</span><br><span class="line">tmp = (((df2[<span class="string">&#x27;ra_t&#x27;</span>] - df2[<span class="string">&#x27;ra_th&#x27;</span>]) * <span class="number">60</span>-df2[<span class="string">&#x27;ra_tm&#x27;</span>])*<span class="number">60</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;ra_ts&#x27;</span>, tmp)</span><br><span class="line"></span><br><span class="line">tmp = df2[<span class="string">&#x27;de&#x27;</span>] * <span class="number">180</span> / math.pi</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;de_d&#x27;</span>, tmp)</span><br><span class="line">tmp = df2[<span class="string">&#x27;de_d&#x27;</span>].astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;de_dh&#x27;</span>, tmp)</span><br><span class="line">tmp = <span class="built_in">abs</span>((df2[<span class="string">&#x27;de_d&#x27;</span>] - df2[<span class="string">&#x27;de_dh&#x27;</span>]) * <span class="number">60</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;de_dm&#x27;</span>, tmp)</span><br><span class="line">tmp = <span class="built_in">abs</span>(((<span class="built_in">abs</span>(df2[<span class="string">&#x27;de_d&#x27;</span>] - df2[<span class="string">&#x27;de_dh&#x27;</span>]) * <span class="number">60</span>-<span class="built_in">abs</span>(df2[<span class="string">&#x27;de_dm&#x27;</span>]))*<span class="number">60</span>))</span><br><span class="line">df2.insert(df2.shape[<span class="number">1</span>], <span class="string">&#x27;de_ds&#x27;</span>, tmp)</span><br><span class="line"></span><br><span class="line">print(df2.shape)</span><br><span class="line">print(df2.head())</span><br><span class="line"></span><br><span class="line">df2.to_csv(<span class="string">&quot;df2.csv&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221123175438847.png" alt="image-20221123175438847"></p><p>生成4006个星等 小于等于6 的 单星。</p><p>研究换算公式</p><p>坐标系ICRS与ITRS相互转换，时间系统及转换 <a href="https://blog.csdn.net/wokaowokaowokao12345/article/details/127211085">https://blog.csdn.net/wokaowokaowokao12345/article/details/127211085</a></p><p>研究sofa</p><p><a href="https://zhuanlan.zhihu.com/p/226482319">https://zhuanlan.zhihu.com/p/226482319</a></p><p><a href="http://www.iausofa.org/tandc.html">http://www.iausofa.org/tandc.html</a></p><p><a href="http://www.iausofa.org/2021_0512_C.html">http://www.iausofa.org/2021_0512_C.html</a></p><hr><p>处理星表文件 stars_0_0v0_8.cat，136KB -&gt;139524位 </p><p>139524 =32 + 20 <em> 4 + 4979 </em> 28 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221125114703130.png" alt="image-20221125114703130"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221125142052077.png" alt="image-20221125142052077"></p><hr><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[output]</span> = <span class="title">myFunc</span><span class="params">(A, start, num)</span></span></span><br><span class="line">beishu = <span class="number">1</span>;</span><br><span class="line">output = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : num</span><br><span class="line">  output = output + A(start + <span class="built_in">i</span> - <span class="number">1</span>) * beishu;</span><br><span class="line">  beishu = beishu * <span class="number">256</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clear all; close all;</span><br><span class="line">fileID = fopen(<span class="string">&#x27;stars_0_0v0_8.cat&#x27;</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">A = fread(fileID,<span class="string">&#x27;ubit8&#x27;</span>); <span class="comment">% bytes 139524 = 32 + 20 * 4 + 4979 * 28;</span></span><br><span class="line"></span><br><span class="line">FileHeaderRecord = A(<span class="number">1</span>:<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">magic</span> = FileHeaderRecord(<span class="number">1</span>:<span class="number">4</span>);</span><br><span class="line">datatype = myFunc(A, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">MajorVersion = myFunc(A, <span class="number">9</span>, <span class="number">4</span>);</span><br><span class="line">MinorVersion = myFunc(A, <span class="number">13</span>, <span class="number">4</span>);</span><br><span class="line">Level = myFunc(A, <span class="number">17</span>, <span class="number">4</span>);</span><br><span class="line">MagnitudeMinimum = myFunc(A, <span class="number">21</span>, <span class="number">4</span>);</span><br><span class="line">MagnitudeMinimum = MagnitudeMinimum - <span class="number">4294967296</span>;</span><br><span class="line">MagnitudeRange = myFunc(A, <span class="number">25</span>, <span class="number">4</span>);</span><br><span class="line">MagnitudeStep = myFunc(A, <span class="number">29</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">n=<span class="number">1</span>:<span class="number">20</span>;</span><br><span class="line">num(n) = myFunc(A, <span class="number">29</span>+n*<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">sum = sum(num);</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span>:<span class="number">4979</span>;</span><br><span class="line">hip(k) = myFunc(A, <span class="number">85</span> + k *<span class="number">28</span>, <span class="number">3</span>);</span><br><span class="line">component_ids(k) = A(<span class="number">88</span> + k *<span class="number">28</span>);</span><br><span class="line">x0(k)= myFunc(A, <span class="number">89</span> + k *<span class="number">28</span>, <span class="number">4</span>);</span><br><span class="line">x0(x0(k) &gt; intmax) = x0(x0(k) &gt; intmax) - <span class="number">4294967296</span>;</span><br><span class="line">x1(k)= myFunc(A, <span class="number">93</span> + k *<span class="number">28</span>, <span class="number">4</span>);</span><br><span class="line">x1(x1(k) &gt; intmax) = x1(x1(k) &gt; intmax) - <span class="number">4294967296</span>;</span><br><span class="line">b_v(k)= A(<span class="number">97</span> + k *<span class="number">28</span>);</span><br><span class="line">mag(k)= A(<span class="number">98</span>+ k *<span class="number">28</span>);</span><br><span class="line">mag_<span class="built_in">true</span>(k) = mag(k)*<span class="number">0.05</span><span class="number">-2</span>;</span><br><span class="line">sp_int(k) = myFunc(A, <span class="number">99</span>+ k *<span class="number">28</span>, <span class="number">2</span>);</span><br><span class="line">dx0(k) = myFunc(A, <span class="number">101</span>+ k *<span class="number">28</span>, <span class="number">4</span>);</span><br><span class="line">dx1(k) = myFunc(A, <span class="number">105</span>+ k *<span class="number">28</span>, <span class="number">4</span>);</span><br><span class="line">plx(k) = myFunc(A, <span class="number">109</span>+ k *<span class="number">28</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x00 = x0 ./MagnitudeMinimum;</span><br><span class="line">x11 = x1 ./MagnitudeMinimum;</span><br><span class="line"></span><br><span class="line">hebing = [hip.&#x27; component_ids.&#x27; x0.&#x27; x1.&#x27; b_v.&#x27; mag.&#x27; mag_true.&#x27; sp_int.&#x27; dx0.&#x27; dx1.&#x27; plx.&#x27; x00.&#x27; x11.&#x27;];</span><br><span class="line"><span class="comment">% xlswrite(&#x27;test.xlsx&#x27;,hebing);</span></span><br><span class="line"></span><br><span class="line">fclose(fileID);</span><br></pre></td></tr></table></figure><p>20个zone的星数为</p><p>184    174    317    235    209    254    201    210    311    341    179    158    298    383    290    206    165    346    293    225</p><p>总和为4979</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221125230432393.png" alt="image-20221125230432393"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221125153158442.png" alt="image-20221125153158442"></p><p>验证了hip 和星图和星等。</p><hr><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\gui\SkyGui.cpp</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void InfoPanel::setTextFromObjects(const QList&lt; StelObjectP &gt;&amp; selected) &#123;</span><br><span class="line"></span><br><span class="line">  138,28: QString s &#x3D; selected[0]-&gt;getInfoString(core, infoTextFilters);</span><br></pre></td></tr></table></figure><p>StarWrapper.cpp</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">StarWrapper1::getInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *core, <span class="keyword">const</span> InfoStringGroup&amp; flags)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">oss &lt;&lt; getCommonInfoString(core, flags);</span><br></pre></td></tr></table></figure><p>调用StelObject.cpp的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QString StelObject::getCommonInfoString(const StelCore *core, const InfoStringGroup&amp; flags) const &#123;</span><br></pre></td></tr></table></figure><p>StelCore *core = StelApp::getInstance().getCore();</p><p>QFlags<StelObject::InfoStringGroupFlags>(Name|CatalogNumber|Magnitude|RaDecJ2000|RaDecOfDate|AltAzi|Distance|Elongation|Size|Velocity|ProperMotion|Extra|HourAngle|AbsoluteMagnitude|GalacticCoord|SupergalacticCoord|OtherCoord|ObjectType|EclipticCoordJ2000|EclipticCoordOfDate|IAUConstellation|SiderealTime|RTSTime|SolarLunarPosition)</p><p>在wrapper中的getAltAzPosApparent(core) 可以得到， s-&gt;getHip()也能得到 那么select 到底是怎么关联过来的呢</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221126191150684.png" alt="image-20221126191150684"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StelUtils::rectToSphe(&amp;az, &amp;alt, getAltAzPosGeometric(core));</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (flags &amp; AltAzi) &#123;</span><br><span class="line">        <span class="comment">// calculate alt az</span></span><br><span class="line">        <span class="keyword">double</span> az, alt;</span><br><span class="line">        StelUtils::rectToSphe(&amp;az, &amp;alt, getAltAzPosGeometric(core));</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot; 0 &quot;</span> &lt;&lt; az &lt;&lt; alt;</span><br><span class="line">        <span class="keyword">double</span> direction = <span class="number">3.</span>; <span class="comment">// N is zero, E is 90 degrees</span></span><br><span class="line">        <span class="keyword">if</span> (useSouthAzimuth)</span><br><span class="line">            direction = <span class="number">2.</span>;</span><br><span class="line">        az = direction * M_PI - az;</span><br><span class="line">        <span class="keyword">if</span> (az &gt; M_PI * <span class="number">2</span>)</span><br><span class="line">            az -= M_PI * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (withAtmosphere &amp;&amp; (alt_app &gt; <span class="number">-2.0</span> * M_PI / <span class="number">180.0</span>)) &#123; <span class="comment">// Don&#x27;t show refracted altitude much below horizon where model is meaningless.</span></span><br><span class="line">            <span class="keyword">if</span> (withDecimalDegree) &#123;</span><br><span class="line">                firstCoordinate  = StelUtils::radToDecDegStr(az);</span><br><span class="line">                secondCoordinate = StelUtils::radToDecDegStr(alt_app);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                firstCoordinate  = StelUtils::radToDmsStr(az, <span class="literal">true</span>);</span><br><span class="line">                secondCoordinate = StelUtils::radToDmsStr(alt_app, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (withDecimalDegree) &#123;</span><br><span class="line">                firstCoordinate  = StelUtils::radToDecDegStr(az);</span><br><span class="line">                secondCoordinate = StelUtils::radToDecDegStr(alt);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                firstCoordinate  = StelUtils::radToDmsStr(az, <span class="literal">true</span>);</span><br><span class="line">                secondCoordinate = StelUtils::radToDmsStr(alt, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TRANSLATORS: Azimuth/Altitude</span></span><br><span class="line">        <span class="keyword">const</span> QString AzAlt = (withDesignations ? <span class="string">&quot;A/a&quot;</span> : qc_(<span class="string">&quot;Az./Alt.&quot;</span>, <span class="string">&quot;celestial coordinate system&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (withTables)</span><br><span class="line">            res += QString(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;%1:&lt;/td&gt;&lt;td style=&#x27;text-align:right;&#x27;&gt;%2/&lt;/td&gt;&lt;td style=&#x27;text-align:right;&#x27;&gt;%3&lt;/td&gt;&lt;td&gt;%4&lt;/td&gt;&lt;/tr&gt;&quot;</span>).arg(AzAlt, firstCoordinate, secondCoordinate, apparent);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res += QString(<span class="string">&quot;%1: %2/%3 %4&lt;br/&gt;&quot;</span>).arg(AzAlt, firstCoordinate, secondCoordinate, apparent);</span><br><span class="line">        res += getExtraInfoStrings(AltAzi).join(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//        qDebug() &lt;&lt; &quot; 1 &quot; &lt;&lt; res; // 高度方位</span></span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot; 1 &quot;</span> &lt;&lt; QString(<span class="string">&quot;%1: %2/%3 %4&lt;br/&gt;&quot;</span>).arg(AzAlt, firstCoordinate, secondCoordinate, apparent);</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot; 2 &quot;</span> &lt;&lt; az &lt;&lt; alt;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>在SkyGui.cpp中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">        StelCore *core = StelApp::getInstance().getCore();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        qDebug() &lt;&lt; &quot;getAltAzPosGeometric &quot;  &lt;&lt; selected[0]-&gt;getInfoString(core);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> az, alt;</span><br><span class="line">        StelUtils::rectToSphe(&amp;az, &amp;alt, selected[<span class="number">0</span>]-&gt;getAltAzPosGeometric(core));</span><br><span class="line">        <span class="keyword">double</span> direction = <span class="number">3.</span>; <span class="comment">// N is zero, E is 90 degrees</span></span><br><span class="line">        az = direction * M_PI - az;</span><br><span class="line">        <span class="keyword">if</span> (az &gt; M_PI * <span class="number">2</span>)</span><br><span class="line">            az -= M_PI * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">double</span> az_app, alt_app;</span><br><span class="line">        StelUtils::rectToSphe(&amp;az_app, &amp;alt_app, selected[<span class="number">0</span>]-&gt;getAltAzPosApparent(core));</span><br><span class="line">        QString res, firstCoordinate, secondCoordinate;</span><br><span class="line"></span><br><span class="line">        firstCoordinate  = StelUtils::radToDmsStr(az, <span class="literal">true</span>);</span><br><span class="line">        secondCoordinate = StelUtils::radToDmsStr(alt, <span class="literal">true</span>);</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot;AzAlt &quot;</span> &lt;&lt; firstCoordinate &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; secondCoordinate &lt;&lt; <span class="string">&quot; &quot;</span>  &lt;&lt; alt_app &lt;&lt; (alt_app &gt; <span class="number">-2.0</span> * M_PI / <span class="number">180.0</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以显示选中星体的信息。</p><p><strong>getAltAzPosGeometric</strong></p><hr><hr><p><strong>研究 Star1</strong> </p><p>在 C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\util\ConvertCatToNative.C 文件中 </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">  PerformConversion(argv[<span class="number">1</span>],argv[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PerformConversion</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fname_in,<span class="keyword">const</span> <span class="keyword">char</span> *fname_out)</span> </span>&#123;</span><br><span class="line">    Convert&lt;Star1&gt;(f_in,f_out,from_be,nr_of_stars);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Convert</span><span class="params">(FILE *f_in,FILE *f_out,<span class="keyword">bool</span> from_be,<span class="keyword">unsigned</span> <span class="keyword">int</span> nr_of_stars)</span> </span>&#123;</span><br><span class="line">    s.repack(from_be);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Star1::repack</span><span class="params">(<span class="keyword">bool</span> from_be)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _hip  = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>, <span class="number">0</span>,<span class="number">24</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _cids = UnpackUBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">24</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _x0  = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">32</span>,<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _x1  = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">64</span>,<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _b_v = UnpackUBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>, <span class="number">96</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _mag = UnpackUBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">104</span>, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> _sp_int = UnpackUBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">112</span>,<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _dx0 = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">128</span>,<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _dx1 = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">160</span>,<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> _plx = UnpackBits(from_be,(<span class="keyword">const</span> <span class="keyword">char</span>*)<span class="keyword">this</span>,<span class="number">192</span>,<span class="number">32</span>);</span><br><span class="line">  hip = _hip;</span><br><span class="line">  component_ids = _cids;</span><br><span class="line">  x0 = _x0;</span><br><span class="line">  x1 = _x1;</span><br><span class="line">  b_v = _b_v;</span><br><span class="line">  mag = _mag;</span><br><span class="line">  sp_int = _sp_int;</span><br><span class="line">  dx0 = _dx0;</span><br><span class="line">  dx1 = _dx1;</span><br><span class="line">  plx = _plx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Star1</span> &#123;</span> <span class="comment">// 28 byte</span></span><br><span class="line">  <span class="keyword">int</span> hip:<span class="number">24</span>;                  <span class="comment">// 17 bits needed</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> component_ids; <span class="comment">//  5 bits needed</span></span><br><span class="line">  Int32 x0;                    <span class="comment">// 32 bits needed</span></span><br><span class="line">  Int32 x1;                    <span class="comment">// 32 bits needed</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> b_v;           <span class="comment">//  7 bits needed</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> mag;           <span class="comment">//  8 bits needed</span></span><br><span class="line">  Uint16 sp_int;               <span class="comment">// 14 bits needed</span></span><br><span class="line">  Int32 dx0,dx1,plx;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">repack</span><span class="params">(<span class="keyword">bool</span> from_be)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p> 研究s-&gt;getHip() , 哪里的s呢</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">StarWrapper1::getInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *core, <span class="keyword">const</span> InfoStringGroup&amp; flags)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    <span class="keyword">const</span> QString varType </span>= StarMgr::getGcvsVariabilityType(s-&gt;getHip());</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StelObject</span> :</span> <span class="keyword">public</span> StelRegionObject</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarWrapperBase</span> :</span> <span class="keyword">public</span> StelObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">StarWrapperBase(<span class="keyword">void</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">virtual</span> ~StarWrapperBase(<span class="keyword">void</span>) Q_DECL_OVERRIDE &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getType</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> STAR_TYPE;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="title">QString</span>  <span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> N_(<span class="string">&quot;star&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getObjectTypeI18n</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> q_(getObjectType()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getEnglishName</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> QString();&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getNameI18n</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *core, <span class="keyword">const</span> InfoStringGroup&amp; flags)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getBV</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Star</span>&gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">StarWrapper</span> :</span> <span class="keyword">public</span> StarWrapperBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">StarWrapper(<span class="keyword">const</span> SpecialZoneArray&lt;Star&gt; *<span class="built_in">array</span>,</span><br><span class="line"><span class="keyword">const</span> SpecialZoneData&lt;Star&gt; *zone,</span><br><span class="line"><span class="keyword">const</span> Star *star) : a(<span class="built_in">array</span>), z(zone), s(star) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Vec3d <span class="title">getJ2000EquatorialPos</span><span class="params">(<span class="keyword">const</span> StelCore* core)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Vec3f <span class="title">getInfoColor</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getVMagnitude</span><span class="params">(<span class="keyword">const</span> StelCore* core)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">getBV</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span>  Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> s-&gt;getBV();&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getEnglishName</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> QString();&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getNameI18n</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE </span>&#123;<span class="keyword">return</span> s-&gt;getNameI18n();&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">const</span> SpecialZoneArray&lt;Star&gt; *<span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">const</span> SpecialZoneData&lt;Star&gt; *<span class="keyword">const</span> z;</span><br><span class="line"><span class="keyword">const</span> Star *<span class="keyword">const</span> s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarWrapper1</span> :</span> <span class="keyword">public</span> StarWrapper&lt;Star1&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">StarWrapper1(<span class="keyword">const</span> SpecialZoneArray&lt;Star1&gt; *<span class="built_in">array</span>,</span><br><span class="line"><span class="keyword">const</span> SpecialZoneData&lt;Star1&gt; *zone,</span><br><span class="line"><span class="keyword">const</span> Star1 *star) : StarWrapper&lt;Star1&gt;(<span class="built_in">array</span>,zone,star) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//! StarWrapper1 supports the following InfoStringGroup flags: &lt;ul&gt;</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; Name</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; CatalogNumber</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; Magnitude</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; RaDecJ2000</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; RaDec</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; AltAzi</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; Extra (spectral type, parallax)</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; Distance</span></span><br><span class="line"><span class="comment">//! &lt;li&gt; PlainText &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">//! @param core the StelCore object.</span></span><br><span class="line"><span class="comment">//! @param flags a set of InfoStringGroup items to include in the return value.</span></span><br><span class="line"><span class="comment">//! @return a QString containing an HMTL encoded description of the StarWrapper1.</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *core, <span class="keyword">const</span> InfoStringGroup&amp; flags)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="comment">//! In addition to the entries from StelObject::getInfoMap(), StarWrapper1 objects provide</span></span><br><span class="line"><span class="comment">//! - variable-star (no|eruptive|pulsating|rotating|cataclysmic|eclipsing-binary)</span></span><br><span class="line"><span class="comment">//! - star-type (star|double-star)</span></span><br><span class="line"><span class="comment">//! - bV : B-V Color Index</span></span><br><span class="line"><span class="comment">//! A few tags are only present if data known, or for variable or double stars from the WDS catalog</span></span><br><span class="line"><span class="comment">//! - absolute-mag</span></span><br><span class="line"><span class="comment">//! - distance-ly</span></span><br><span class="line"><span class="comment">//! - parallax</span></span><br><span class="line"><span class="comment">//! - spectral-class</span></span><br><span class="line"><span class="comment">//! - period (days)</span></span><br><span class="line"><span class="comment">//! - wds-year (year of validity of wds... fields)</span></span><br><span class="line"><span class="comment">//! - wds-position-angle</span></span><br><span class="line"><span class="comment">//! - wds-separation (arcseconds; 0 for spectroscopic binaries)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QVariantMap <span class="title">getInfoMap</span><span class="params">(<span class="keyword">const</span> StelCore *core)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getEnglishName</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getID</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getObjectType</span><span class="params">()</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> QString <span class="title">getObjectTypeI18n</span><span class="params">()</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>按键按下之后发生的事</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StelMovementMgr::handleMouseClicks</span><span class="params">(QMouseEvent* event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> Qt::LeftButton :</span><br><span class="line">    objectMgr-&gt;findAndSelect(core, event-&gt;x(), event-&gt;y(), event-&gt;modifiers().testFlag(Qt::ControlModifier) ? StelModule::AddToSelection : StelModule::ReplaceSelection);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StelObjectMgr::findAndSelect</span><span class="params">(<span class="keyword">const</span> StelCore* core, <span class="keyword">int</span> x, <span class="keyword">int</span> y, StelModule::StelModuleSelectAction action)</span> </span>&#123;</span><br><span class="line">    StelObjectP tempselect = cleverFind(core, x, y);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">StelObjectP <span class="title">StelObjectMgr::cleverFind</span><span class="params">(<span class="keyword">const</span> StelCore* core, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cleverFind(core, v2000);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">StelObjectP <span class="title">StelObjectMgr::cleverFind</span><span class="params">(<span class="keyword">const</span> StelCore* core, <span class="keyword">const</span> Vec3d&amp; v)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>* m : objectsModules) &#123; <span class="comment">// StelObjectMgr.cpp</span></span><br><span class="line">        candidates += m-&gt;searchAround(v, fov_around, core); <span class="comment">// 点一下</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\modules\StarMgr.cpp</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QList&lt;StelObjectP &gt; <span class="title">StarMgr::searchAround</span><span class="params">(<span class="keyword">const</span> Vec3d&amp; vv, <span class="keyword">double</span> limFov, <span class="keyword">const</span> StelCore* core)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        <span class="title">for</span> <span class="params">(GeodesicSearchBorderIterator it1(*geodesic_search_result, z-&gt;level); (zone = it1.next()) &gt;= <span class="number">0</span>;)</span> </span></span><br><span class="line">            qDebug() &lt;&lt; &quot; 1111 eee &quot; &lt;&lt; eee++;</span><br><span class="line">            z-&gt;searchAround(core, zone, v, f, result);</span><br></pre></td></tr></table></figure><p>qDebug() &lt;&lt; “ 2222 now2 “ &lt;&lt; bbb++; // 2531次<br>        return s-&gt;createStelObject(a, z);</p><p>//            qDebug() &lt;&lt; “ 2222 now “ &lt;&lt; aaa++; //24920次<br>            StelObjectP so = s-&gt;createStelObject(a, z);</p><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\modules\ZoneArray.cpp的result.push_back(s-&gt;createStelObject(this, z)); // 调用27多次 点击也是这里调用</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> SpecialZoneArray&lt;Star&gt;::searchAround(<span class="keyword">const</span> StelCore* core, <span class="keyword">int</span> index, <span class="keyword">const</span> Vec3d &amp;v, <span class="keyword">double</span> cosLimFov, QList&lt;StelObjectP &gt; &amp;result) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> Star* s=z-&gt;getStars();s&lt;z-&gt;getStars()+z-&gt;size;++s)</span><br><span class="line">    result.push_back(s-&gt;createStelObject(<span class="keyword">this</span>, z));</span><br></pre></td></tr></table></figure><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\modules\StarWrapper.cpp中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">StelObjectP <span class="title">Star1::createStelObject</span><span class="params">(<span class="keyword">const</span> SpecialZoneArray&lt;Star1&gt; *a, <span class="keyword">const</span> SpecialZoneData&lt;Star1&gt; *z)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">StelObjectP</span><span class="params">(<span class="keyword">new</span> StarWrapper1(a,z,<span class="keyword">this</span>), <span class="literal">true</span>)</span></span>; <span class="comment">//27479次</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarWrapper1</span> :</span> <span class="keyword">public</span> StarWrapper&lt;Star1&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    StarWrapper1(<span class="keyword">const</span> SpecialZoneArray&lt;Star1&gt; *<span class="built_in">array</span>,</span><br><span class="line">                 <span class="keyword">const</span> SpecialZoneData&lt;Star1&gt; *zone,</span><br><span class="line">                 <span class="keyword">const</span> Star1 *star) : StarWrapper&lt;Star1&gt;(<span class="built_in">array</span>, zone, star) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Star</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarWrapper</span> :</span> <span class="keyword">public</span> StarWrapperBase &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">    StarWrapper(<span class="keyword">const</span> SpecialZoneArray&lt;Star&gt; *<span class="built_in">array</span>,</span><br><span class="line">                <span class="keyword">const</span> SpecialZoneData&lt;Star&gt; *zone,</span><br><span class="line">                <span class="keyword">const</span> Star *star) : a(<span class="built_in">array</span>), z(zone), s(star) &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StarWrapper.s .a .z</span><br></pre></td></tr></table></figure><hr><p>研究如何算j2000的赤经赤纬</p><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\StelObject.cpp文件中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">QString <span class="title">StelObject::getCommonInfoString</span><span class="params">(<span class="keyword">const</span> StelCore *core, <span class="keyword">const</span> InfoStringGroup&amp; flags)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flags &amp; RaDecJ2000) &#123;</span><br><span class="line">        <span class="keyword">double</span> dec_j2000, ra_j2000;</span><br><span class="line">        StelUtils::rectToSphe(&amp;ra_j2000, &amp;dec_j2000, getJ2000EquatorialPos(core));</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot; getJ2000EquatorialPos222 &quot;</span> &lt;&lt; getJ2000EquatorialPos(core);</span><br><span class="line">        <span class="keyword">if</span> (withDecimalDegree) &#123;</span><br><span class="line">            firstCoordinate  = StelUtils::radToDecDegStr(ra_j2000, <span class="number">5</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            secondCoordinate = StelUtils::radToDecDegStr(dec_j2000);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            firstCoordinate  = StelUtils::radToHmsStr(ra_j2000, <span class="literal">true</span>);</span><br><span class="line">            secondCoordinate = StelUtils::radToDmsStr(dec_j2000, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>getJ2000EquatorialPos调用</p><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\modules\StarWrapper.hpp中的</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Star</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StarWrapper</span> :</span> <span class="keyword">public</span> StarWrapperBase</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">StarWrapper(<span class="keyword">const</span> SpecialZoneArray&lt;Star&gt; *<span class="built_in">array</span>, <span class="keyword">const</span> SpecialZoneData&lt;Star&gt; *zone, <span class="keyword">const</span> Star *star) : a(<span class="built_in">array</span>), z(zone), s(star) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Vec3d <span class="title">getJ2000EquatorialPos</span><span class="params">(<span class="keyword">const</span> StelCore* core)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span></span><br><span class="line">        s-&gt;getJ2000Pos(z, (M_PI / 180.) * (0.0001 / 3600.) * ((core-&gt;getJDE() - d2000) / 365.25) / a-&gt;star_position_scale, v);</span><br></pre></td></tr></table></figure><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\modules\Star.hpp</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Star1</span> &#123;</span> <span class="comment">// 28 byte</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getJ2000Pos</span><span class="params">(<span class="keyword">const</span> ZoneData *z,<span class="keyword">float</span> movementFactor, Vec3f&amp; pos)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">pos = z-&gt;axis0;</span><br><span class="line">pos*=(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(getX0())+movementFactor*getDx0());</span><br><span class="line">pos+=(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(getX1())+movementFactor*getDx1())*z-&gt;axis1;</span><br><span class="line">pos+=z-&gt;center;</span><br></pre></td></tr></table></figure><hr><p>C:\Users\hp\Desktop\stellarium-0.22.2\stellarium-0.22.2\src\core\StelGeodesicGrid.cpp中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StelGeodesicGrid::StelGeodesicGrid(<span class="keyword">const</span> <span class="keyword">int</span> lev) : maxLevel(lev &lt; <span class="number">0</span> ? <span class="number">0</span> : lev)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">    initTriangle(<span class="number">0</span>, i, icosahedron_corners[corners[<span class="number">0</span>]], icosahedron_corners[corners[<span class="number">1</span>]], icosahedron_corners[corners[<span class="number">2</span>]]); <span class="comment">// 20次</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> icosahedron_G = <span class="number">0.5f</span> * (<span class="number">1.0f</span> + <span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">5.0f</span>));</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> icosahedron_b = <span class="number">1.0f</span> / <span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">1.0f</span> + icosahedron_G*icosahedron_G);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">float</span> icosahedron_a = icosahedron_b * icosahedron_G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> Vec3f icosahedron_corners[<span class="number">12</span>] = &#123;</span><br><span class="line">    Vec3f( icosahedron_a, -icosahedron_b,            <span class="number">0.0</span>),</span><br><span class="line">    Vec3f( icosahedron_a,  icosahedron_b,            <span class="number">0.0</span>),</span><br><span class="line">    Vec3f(-icosahedron_a,  icosahedron_b,            <span class="number">0.0</span>),</span><br><span class="line">    Vec3f(-icosahedron_a, -icosahedron_b,            <span class="number">0.0</span>),</span><br><span class="line">    Vec3f(           <span class="number">0.0</span>,  icosahedron_a, -icosahedron_b),</span><br><span class="line">    Vec3f(           <span class="number">0.0</span>,  icosahedron_a,  icosahedron_b),</span><br><span class="line">    Vec3f(           <span class="number">0.0</span>, -icosahedron_a,  icosahedron_b),</span><br><span class="line">    Vec3f(           <span class="number">0.0</span>, -icosahedron_a, -icosahedron_b),</span><br><span class="line">    Vec3f(-icosahedron_b,            <span class="number">0.0</span>,  icosahedron_a),</span><br><span class="line">    Vec3f( icosahedron_b,            <span class="number">0.0</span>,  icosahedron_a),</span><br><span class="line">    Vec3f( icosahedron_b,            <span class="number">0.0</span>, -icosahedron_a),</span><br><span class="line">    Vec3f(-icosahedron_b,            <span class="number">0.0</span>, -icosahedron_a)</span><br><span class="line">        </span><br><span class="line"><span class="number">0</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">1</span> [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">2</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">3</span> [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">4</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">5</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">6</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">7</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">8</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">9</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">10</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">11</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line">        </span><br><span class="line"><span class="number">0</span> [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">1</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">2</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">3</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">4</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">5</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span></span><br><span class="line"><span class="number">6</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">7</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">8</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">9</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">10</span> [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">11</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">12</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">13</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">14</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">15</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">16</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">17</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span></span><br><span class="line"><span class="number">18</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span></span><br><span class="line"><span class="number">19</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br></pre></td></tr></table></figure><p>正二十面体(Regular icosahedron ) 是由20个等边三角形所组成的正多面体，共有12个顶点，30条棱，20个面。为五个柏拉图多面体之一。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StelApp::getInstance().getCore()-&gt;getGeodesicGrid(maxGeodesicGridLevel)-&gt;visitTriangles(maxGeodesicGridLevel, initTriangleFunc, <span class="keyword">this</span>); <span class="comment">// 1次</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StelGeodesicGrid::visitTriangles</span><span class="params">(<span class="keyword">int</span> maxVisitLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      VisitFunc *func,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">void</span> *context)</span> <span class="keyword">const</span> </span>&#123; <span class="comment">// 1次</span></span><br><span class="line">    <span class="keyword">if</span> (func &amp;&amp; maxVisitLevel &gt;= <span class="number">0</span>) &#123;  <span class="comment">// 1次</span></span><br><span class="line">        <span class="keyword">if</span> (maxVisitLevel &gt; maxLevel) maxVisitLevel = maxLevel;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123; <span class="comment">// 20次</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> corners = icosahedron_triangles[i].corners;</span><br><span class="line">            visitTriangles(<span class="number">0</span>, i,</span><br><span class="line">                           icosahedron_corners[corners[<span class="number">0</span>]],</span><br><span class="line">                           icosahedron_corners[corners[<span class="number">1</span>]],</span><br><span class="line">                           icosahedron_corners[corners[<span class="number">2</span>]],</span><br><span class="line">                           maxVisitLevel, func, context);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StelGeodesicGrid::visitTriangles</span><span class="params">(<span class="keyword">int</span> lev, <span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">const</span> Vec3f &amp;c0,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">const</span> Vec3f &amp;c1,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">const</span> Vec3f &amp;c2,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">int</span> maxVisitLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      VisitFunc *func,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">void</span> *context)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">&quot; initTriangle maxVisitLevel222 &quot;</span> &lt;&lt; lev &lt;&lt; index &lt;&lt; maxVisitLevel &lt;&lt; maxLevel;</span><br><span class="line">    (*func)(lev, index, c0, c1, c2, context); <span class="comment">// 20 * 调用一次</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Triangle &amp;<span class="title">t</span><span class="params">(triangles[lev][index])</span></span>;</span><br><span class="line">    lev++;</span><br><span class="line">    <span class="keyword">if</span> (lev &lt;= maxVisitLevel) &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">&quot; initTriangle maxVisitLevel333 &quot;</span>  &lt;&lt; maxLevel;</span><br><span class="line">        index *= <span class="number">4</span>;</span><br><span class="line">        visitTriangles(lev, index + <span class="number">0</span>, c0, t.e2, t.e1, maxVisitLevel, func, context);</span><br><span class="line">        visitTriangles(lev, index + <span class="number">1</span>, t.e2, c1, t.e0, maxVisitLevel, func, context);</span><br><span class="line">        visitTriangles(lev, index + <span class="number">2</span>, t.e1, t.e0, c2, maxVisitLevel, func, context);</span><br><span class="line">        visitTriangles(lev, index + <span class="number">3</span>, t.e0, t.e1, t.e2, maxVisitLevel, func, context);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initTriangleFunc</span><span class="params">(<span class="keyword">int</span> lev, <span class="keyword">int</span> index, <span class="keyword">const</span> Vec3f &amp;c0, <span class="keyword">const</span> Vec3f &amp;c1, <span class="keyword">const</span> Vec3f &amp;c2, <span class="keyword">void</span> *context)</span> </span>&#123;  <span class="comment">// 100次调用</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">StarMgr::initTriangle(<span class="keyword">int</span> lev, <span class="keyword">int</span> index, <span class="keyword">const</span> Vec3f &amp;c0, <span class="keyword">const</span> Vec3f &amp;c1, <span class="keyword">const</span> Vec3f &amp;c2) &#123; <span class="comment">// 100次调用</span></span><br></pre></td></tr></table></figure><p>有2层level ，第一层的index为20 第二层为80；</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span> [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">1</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">4</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">5</span> [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">6</span> [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">9</span> <span class="number">1</span> <span class="number">7</span> [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">10</span> <span class="number">0</span> <span class="number">2</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">11</span> <span class="number">1</span> <span class="number">8</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">12</span> <span class="number">1</span> <span class="number">9</span> [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">13</span> <span class="number">1</span> <span class="number">10</span> [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">14</span> <span class="number">1</span> <span class="number">11</span> [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">15</span> <span class="number">0</span> <span class="number">3</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">16</span> <span class="number">1</span> <span class="number">12</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">17</span> <span class="number">1</span> <span class="number">13</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">18</span> <span class="number">1</span> <span class="number">14</span> [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">19</span> <span class="number">1</span> <span class="number">15</span> [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">20</span> <span class="number">0</span> <span class="number">4</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">21</span> <span class="number">1</span> <span class="number">16</span> [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">22</span> <span class="number">1</span> <span class="number">17</span> [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">23</span> <span class="number">1</span> <span class="number">18</span> [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">24</span> <span class="number">1</span> <span class="number">19</span> [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">25</span> <span class="number">0</span> <span class="number">5</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">26</span> <span class="number">1</span> <span class="number">20</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">27</span> <span class="number">1</span> <span class="number">21</span> [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">28</span> <span class="number">1</span> <span class="number">22</span> [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">29</span> <span class="number">1</span> <span class="number">23</span> [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">30</span> <span class="number">0</span> <span class="number">6</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">31</span> <span class="number">1</span> <span class="number">24</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">32</span> <span class="number">1</span> <span class="number">25</span> [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">33</span> <span class="number">1</span> <span class="number">26</span> [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">34</span> <span class="number">1</span> <span class="number">27</span> [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">35</span> <span class="number">0</span> <span class="number">7</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">36</span> <span class="number">1</span> <span class="number">28</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">0.525731</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">37</span> <span class="number">1</span> <span class="number">29</span> [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">38</span> <span class="number">1</span> <span class="number">30</span> [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">39</span> <span class="number">1</span> <span class="number">31</span> [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">40</span> <span class="number">0</span> <span class="number">8</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">41</span> <span class="number">1</span> <span class="number">32</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">42</span> <span class="number">1</span> <span class="number">33</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">43</span> <span class="number">1</span> <span class="number">34</span> [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">44</span> <span class="number">1</span> <span class="number">35</span> [<span class="number">0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line"><span class="number">45</span> <span class="number">0</span> <span class="number">9</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">46</span> <span class="number">1</span> <span class="number">36</span> [<span class="number">0</span>, <span class="number">-0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">47</span> <span class="number">1</span> <span class="number">37</span> [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">48</span> <span class="number">1</span> <span class="number">38</span> [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">49</span> <span class="number">1</span> <span class="number">39</span> [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.309017</span>, <span class="number">-0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.5</span>, <span class="number">-0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">50</span> <span class="number">0</span> <span class="number">10</span> [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">51</span> <span class="number">1</span> <span class="number">40</span> [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">52</span> <span class="number">1</span> <span class="number">41</span> [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">53</span> <span class="number">1</span> <span class="number">42</span> [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">54</span> <span class="number">1</span> <span class="number">43</span> [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">55</span> <span class="number">0</span> <span class="number">11</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">56</span> <span class="number">1</span> <span class="number">44</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">57</span> <span class="number">1</span> <span class="number">45</span> [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>] [<span class="number">-0.850651</span>, <span class="number">-0.525731</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">58</span> <span class="number">1</span> <span class="number">46</span> [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>]</span><br><span class="line"><span class="number">59</span> <span class="number">1</span> <span class="number">47</span> [<span class="number">-0.809017</span>, <span class="number">-0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">60</span> <span class="number">0</span> <span class="number">12</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">61</span> <span class="number">1</span> <span class="number">48</span> [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">62</span> <span class="number">1</span> <span class="number">49</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">63</span> <span class="number">1</span> <span class="number">50</span> [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>]</span><br><span class="line"><span class="number">64</span> <span class="number">1</span> <span class="number">51</span> [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line"><span class="number">65</span> <span class="number">0</span> <span class="number">13</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">66</span> <span class="number">1</span> <span class="number">52</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">67</span> <span class="number">1</span> <span class="number">53</span> [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">68</span> <span class="number">1</span> <span class="number">54</span> [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">69</span> <span class="number">1</span> <span class="number">55</span> [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">70</span> <span class="number">0</span> <span class="number">14</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">71</span> <span class="number">1</span> <span class="number">56</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">72</span> <span class="number">1</span> <span class="number">57</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">73</span> <span class="number">1</span> <span class="number">58</span> [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">74</span> <span class="number">1</span> <span class="number">59</span> [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">75</span> <span class="number">0</span> <span class="number">15</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">76</span> <span class="number">1</span> <span class="number">60</span> [<span class="number">-0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">77</span> <span class="number">1</span> <span class="number">61</span> [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">78</span> <span class="number">1</span> <span class="number">62</span> [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">79</span> <span class="number">1</span> <span class="number">63</span> [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">-0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">-0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">80</span> <span class="number">0</span> <span class="number">16</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">81</span> <span class="number">1</span> <span class="number">64</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>]</span><br><span class="line"><span class="number">82</span> <span class="number">1</span> <span class="number">65</span> [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>]</span><br><span class="line"><span class="number">83</span> <span class="number">1</span> <span class="number">66</span> [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">-0.850651</span>]</span><br><span class="line"><span class="number">84</span> <span class="number">1</span> <span class="number">67</span> [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">-0.5</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">-0.809017</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">85</span> <span class="number">0</span> <span class="number">17</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">86</span> <span class="number">1</span> <span class="number">68</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">-0.525731</span>] [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>]</span><br><span class="line"><span class="number">87</span> <span class="number">1</span> <span class="number">69</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">88</span> <span class="number">1</span> <span class="number">70</span> [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">89</span> <span class="number">1</span> <span class="number">71</span> [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">-0.309017</span>] [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">90</span> <span class="number">0</span> <span class="number">18</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">91</span> <span class="number">1</span> <span class="number">72</span> [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>]</span><br><span class="line"><span class="number">92</span> <span class="number">1</span> <span class="number">73</span> [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>]</span><br><span class="line"><span class="number">93</span> <span class="number">1</span> <span class="number">74</span> [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.850651</span>, <span class="number">0.525731</span>, <span class="number">0</span>]</span><br><span class="line"><span class="number">94</span> <span class="number">1</span> <span class="number">75</span> [<span class="number">0.809017</span>, <span class="number">0.309017</span>, <span class="number">0.5</span>] [<span class="number">0.5</span>, <span class="number">0.809017</span>, <span class="number">0.309017</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">95</span> <span class="number">0</span> <span class="number">19</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">96</span> <span class="number">1</span> <span class="number">76</span> [<span class="number">-0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">97</span> <span class="number">1</span> <span class="number">77</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>] [<span class="number">0.525731</span>, <span class="number">0</span>, <span class="number">0.850651</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>]</span><br><span class="line"><span class="number">98</span> <span class="number">1</span> <span class="number">78</span> [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">0.850651</span>, <span class="number">0.525731</span>]</span><br><span class="line"><span class="number">99</span> <span class="number">1</span> <span class="number">79</span> [<span class="number">0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">-0.309017</span>, <span class="number">0.5</span>, <span class="number">0.809017</span>] [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>自己研究了两周还是没结果，很失落，写不出第二周的总结，因为第二周没有收获。第三周末尾和一位天文学专业的同学请教了，才发现自己这2周方向都错了，顶多算是对c++代码的一次学习。</p>]]></content>
    
    
    <summary type="html">问题定位到自己制作一个星表，需要从星录中计算地平高度角进行显示。第二、三周在研究stellarium源码 想看看如何将stellarium的代码移植，但计算过程非常绕，方式不现实，终究失败了，但细看了一次源码。</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>冲毕业第一周记录</title>
    <link href="https://tsuiwade.github.io/2022/11/22/blog66-study1/"/>
    <id>https://tsuiwade.github.io/2022/11/22/blog66-study1/</id>
    <published>2022-11-22T15:17:15.000Z</published>
    <updated>2022-11-22T15:17:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221122152053959.png" alt="image-20221122152053959"></p><p>秋招开始前卡在一个问题：漫天分布的星点如何筛选，使得筛选星均匀遍布在天球上，以便望远镜可以进行全天球的均匀校正。</p><p>一篇螺旋基准点的文章提供了思路，在各基准点周围找星点，但生成的基准点是固定的位置，就连初始点和旋转角都没有改变，我一直觉得不合适，我在想是否有点匹配方法才是更为合适的解决方法。</p><hr><p>从一个好友那得到我想研究的问题可能是点云配准问题。比如经典的icp方法。</p><p>做了个pcl实验</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221114195929901.png" alt="image-20221114195929901"></p><p>处理了bug，跑起了实验</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221114201720714.png" alt="image-20221114201720714"></p><p>看了icp原理 <a href="https://zhuanlan.zhihu.com/p/107218828">https://zhuanlan.zhihu.com/p/107218828</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221115142324782.png" alt="image-20221115142324782"></p><p>跑起了icp经典实验，但是发现若初始位置偏差较大，配准效果较差，就像第一张图一样，所以作罢，寻找其他方法。</p><p>一方面是寻找更佳的配准方法，另一方面是用粒子群算法寻找全局最优。</p><p>更佳的配准方法看到一个博文  <a href="https://www.cnblogs.com/shushen/p/11676486.html">https://www.cnblogs.com/shushen/p/11676486.html</a> 其中出现了很多配准方法 以及二维点云实验结果 让我很想试试其他方法</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221115220517251.png" alt="image-20221115220517251"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221122154530701.png" alt="image-20221122154530701"></p><p>在搜索rpm方法的时候，找到了一个配准的宝藏网站</p><p>维基 介绍 <a href="https://en.wikipedia.org/wiki/Point-set_registration">https://en.wikipedia.org/wiki/Point-set_registration</a></p><p>github 合集 <a href="https://github.com/gwang-cv/Point-Set-Matching-Registration-Material#mismatch-removalcorrespondence-pruning-methods">https://github.com/gwang-cv/Point-Set-Matching-Registration-Material#mismatch-removalcorrespondence-pruning-methods</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20221115234203726.png" alt="image-20221115234203726"></p><p>做TPS-RPM实验研究不清楚，是进阶版的非刚性变换版本，基础rpm没整起来</p><p><strong>Gold S, Rangarajan A, Lu C P, et al. New algorithms for 2D and 3D point matching: pose estimation and correspondence[J]. Pattern recognition, 1998, 31(8): 1019-1031.</strong> 基础的RPM</p><p><strong>Chui H, Rangarajan A. A new point matching algorithm for non-rigid registration[J]. Computer Vision and Image Understanding, 2003, 89(2-3): 114-141.</strong> 进阶TPS-RPM</p><p><strong><a href="https://www.cise.ufl.edu/~anand/students/chui/tps-rpm.html">https://www.cise.ufl.edu/~anand/students/chui/tps-rpm.html</a></strong> TPS代码</p><hr><p>二维点云配准算法 二维点云ICP <a href="https://blog.csdn.net/weixin_42156097/article/details/106379613">https://blog.csdn.net/weixin_42156097/article/details/106379613</a></p><p>二维点云ICP的C++实现 <a href="https://blog.csdn.net/weixin_42156097/article/details/106827472">https://blog.csdn.net/weixin_42156097/article/details/106827472</a></p><hr><p>粒子群算法！看b站研究了点，做了个实验</p><hr><p>有几篇类似文章，可以参考算法描述</p><p><strong>《陈斯祺, 张海洋, 赵长明, 等. 基于天牛须改进粒子群算法的点云配准方法[J]. 激光技术, 2020, 44(6): 678-683.》</strong></p><p>为了提高激光点云配准精度与配准速度,采用了基于天牛须算法改进的粒子群算法,以点云分布熵为寻优目 标,寻找最优空间变换矩阵的点云粗配准,为点云精配准提供良好的初始条件。 结果表明,点云分布熵较传统的均值平 方差评价方式有更快的计算速度,基于天牛须算法改进的粒子群算法具有全局搜索能力强、计算速度快等特点,与传统 点云粗配准方法相比,该方法配准速度提升了近 25% ;在点云数据量大的条件下,表现出较快的配准速度。 这一方法对 如何提高激光点云配准速度具有参考意义。</p><p><strong>《马卫. 基于布谷鸟优化的三维点云配准算法[J]. 计算机应用与软件, 2020, 37(12): 216-223.》</strong></p><p><a href="http://www.shcas.net/jsjyup/pdf/2020/12/%E5%9F%BA%E4%BA%8E%E5%B8%83%E8%B0%B7%E9%B8%9F%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%89%E7%BB%B4%E7%82%B9%E4%BA%91%E9%85%8D%E5%87%86%E7%AE%97%E6%B3%95.pdf">http://www.shcas.net/jsjyup/pdf/2020/12/%E5%9F%BA%E4%BA%8E%E5%B8%83%E8%B0%B7%E9%B8%9F%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%89%E7%BB%B4%E7%82%B9%E4%BA%91%E9%85%8D%E5%87%86%E7%AE%97%E6%B3%95.pdf</a></p><p><strong>《一种基于改进粒子群算法的点云配准方法》</strong>专利</p><p><strong>《王尔申, 孙彩苗, 黄煜峰, 等. 改进粒子群优化的卫星导航选星算法[J]. 北京航空航天大学学报, 2021.》</strong></p><hr><p>最后总结，其实没必要研究复杂的配准方法。<strong>只需要结合以前看的螺旋基准点搜索点方法即可，再加以粒子群算法进行最优搜索即可。</strong> <strong>可能最近点搜索可以结合icp 和 kd-tree方法（目标函数不是mse 应该是分布熵）。</strong></p><p>上周周赛做完缓到今天周二……</p>]]></content>
    
    
    <summary type="html">秋招结束后的科研一周记录</summary>
    
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="科研" scheme="https://tsuiwade.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>状压总结</title>
    <link href="https://tsuiwade.github.io/2022/08/25/blog65-stateCompressionDP/"/>
    <id>https://tsuiwade.github.io/2022/08/25/blog65-stateCompressionDP/</id>
    <published>2022-08-25T14:05:05.000Z</published>
    <updated>2022-08-25T14:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LC464-单词拆分-II"><a href="#LC464-单词拆分-II" class="headerlink" title="LC464. 单词拆分 II"></a>LC464. <a href="https://leetcode.cn/problems/word-break-ii/">单词拆分 II</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; memo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">backtracking</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> start, <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; <span class="built_in">set</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == s.size())</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (memo.count(start))</span><br><span class="line">        <span class="keyword">return</span> memo[start];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                    start = &quot;</span> &lt;&lt; start &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len + start &lt;= s.size(); len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str = s.substr(start, len);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>.count(str))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; next = backtracking(s, start + len, <span class="built_in">set</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ss : next)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;   ss =  &quot;</span> &lt;&lt; ss &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span> (ss == <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    ret.push_back(str);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ret.push_back(str + <span class="string">&quot; &quot;</span> + ss);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    memo[start] = ret;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;  start &quot;</span> &lt;&lt; start &lt;&lt; <span class="string">&quot; memo[start] &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; memo[start].size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; memo[start][i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">&quot;catsanddog&quot;</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; wordDict = &#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cats&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;sand&quot;</span>, <span class="string">&quot;dog&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line">        <span class="built_in">set</span>(wordDict.begin(), wordDict.end());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans = backtracking(s, <span class="number">0</span>, <span class="built_in">set</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LC464. 我能赢吗</p><p>记忆化搜索+状态压缩</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; memo;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> maxChoosableInteger, <span class="keyword">int</span> usedNum, <span class="keyword">int</span> desiredTotal, <span class="keyword">int</span> currSum, <span class="keyword">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!memo[usedNum])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxChoosableInteger; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (((usedNum &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123; <span class="comment">// 若此数没被选择 就继续</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; usedNum &quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;12&gt;(usedNum) &lt;&lt; <span class="string">&quot; currSum &quot;</span> &lt;&lt; currSum</span><br><span class="line">                     &lt;&lt; <span class="string">&quot; i &quot;</span> &lt;&lt; i &lt;&lt; (flag ? <span class="string">&quot; me  &quot;</span> : <span class="string">&quot; you &quot;</span>) &lt;&lt; <span class="built_in">bitset</span>&lt;12&gt;(usedNum | (<span class="number">1</span> &lt;&lt; i)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> + currSum &gt;= desiredTotal || !dfs(maxChoosableInteger, usedNum | (<span class="number">1</span> &lt;&lt; i), desiredTotal, currSum + i + <span class="number">1</span>, !flag))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; win &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                    ret = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; usedNum &quot;</span> &lt;&lt; <span class="built_in">bitset</span>&lt;12&gt;(usedNum) &lt;&lt; <span class="string">&quot; ret &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        memo[usedNum] = ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo[usedNum];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxChoosableInteger = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> desiredTotal = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">if</span> (desiredTotal &lt; maxChoosableInteger)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (maxChoosableInteger * (maxChoosableInteger + <span class="number">1</span>) &lt; <span class="number">2</span> * desiredTotal)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs(maxChoosableInteger, <span class="number">0</span>, desiredTotal, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220825172848204.png" alt="image-20220825172848204"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() : val(<span class="number">0</span>), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x, ListNode next) : val(x), next(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>LC1349</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; &amp;seats)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = seats.size();</span><br><span class="line">        <span class="keyword">int</span> n = seats[<span class="number">0</span>].size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; n)); <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= m; row++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++)</span><br><span class="line">            &#123;                    <span class="comment">//遍历 2^n 个状态</span></span><br><span class="line">                <span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">bs</span><span class="params">(s)</span></span>; <span class="comment">//记录对应状态的bit位</span></span><br><span class="line">                <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((bs[j] &amp;&amp; seats[row - <span class="number">1</span>][j] == <span class="string">&#x27;#&#x27;</span>) || (j &lt; n - <span class="number">1</span> &amp;&amp; bs[j] &amp;&amp; bs[j + <span class="number">1</span>]))</span><br><span class="line">                    &#123; <span class="comment">//不能坐在坏椅子上也不能在同一行相邻坐</span></span><br><span class="line">                        ok = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!ok)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[row][s] = <span class="number">-1</span>; <span class="comment">//说明坐在坏椅子上或相邻坐了，该状态舍弃</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> last = <span class="number">0</span>; last &lt; (<span class="number">1</span> &lt;&lt; n); last++)</span><br><span class="line">                &#123;                                <span class="comment">//找到一种当前行的可行状态后，遍历上一行的所有状态</span></span><br><span class="line">                    <span class="keyword">if</span> (dp[row - <span class="number">1</span>][last] == <span class="number">-1</span>) <span class="comment">//上一行的状态被舍弃了，那就直接下一个状态</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="function"><span class="built_in">bitset</span>&lt;8&gt; <span class="title">lbs</span><span class="params">(last)</span></span>;</span><br><span class="line">                    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lbs[j] &amp;&amp; ((j &gt; <span class="number">0</span> &amp;&amp; bs[j - <span class="number">1</span>]) || (j &lt; n - <span class="number">1</span> &amp;&amp; bs[j + <span class="number">1</span>])))</span><br><span class="line">                        &#123;                 <span class="comment">//如果找到的这个上一行状态的j位置坐了人，</span></span><br><span class="line">                            flag = <span class="literal">false</span>; <span class="comment">//下一行的j+1位置或j-1位置也坐了人，那么该状态不合法，舍弃</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (flag)</span><br><span class="line">                    &#123;                                                                      <span class="comment">// flag为真说明这个last状态的每个位置都合法</span></span><br><span class="line">                        dp[row][s] = max(dp[row][s], dp[row - <span class="number">1</span>][last] + (<span class="keyword">int</span>)bs.count()); <span class="comment">//转移方程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">        &#123; <span class="comment">//在最后一行的所有状态中找出最大的</span></span><br><span class="line">            <span class="keyword">if</span> (dp[m][i] &gt; res)</span><br><span class="line">            &#123;</span><br><span class="line">                res = dp[m][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度M*2^(2N)</p><p>空间复杂度M*2^(N)</p><p>华为0824</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// vector&lt;vector&lt;int&gt;&gt; seats = &#123;&#123;1, 0, 0, 0, 0, 1&#125;, &#123;0, 0, 0, 0, 0, 0&#125;, &#123;0, 1, 0, 0, 0, 1&#125;, &#123;0, 0, 0, 0, 0, 0&#125;&#125;;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; seats = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = seats.size();</span><br><span class="line">    <span class="keyword">int</span> n = seats[<span class="number">0</span>].size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; n)); <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= m; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> state = <span class="number">0</span>; state &lt; (<span class="number">1</span> &lt;&lt; n); state++)</span><br><span class="line">        &#123;                         <span class="comment">//遍历 2^n 个状态</span></span><br><span class="line">            <span class="function"><span class="built_in">bitset</span>&lt;20&gt; <span class="title">bs</span><span class="params">(state)</span></span>; <span class="comment">//记录对应状态的bit位</span></span><br><span class="line">            <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((seats[row - <span class="number">1</span>][j] == <span class="number">1</span>) &amp;&amp; (bs[j] == <span class="number">0</span>) || (j &lt; n - <span class="number">1</span> &amp;&amp; bs[j] &amp;&amp; bs[j + <span class="number">1</span>])) <span class="comment">//状态一定要是1 也不能在同一行相邻坐</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ok)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[row][state] = <span class="number">-1</span>; <span class="comment">//说明该状态不包含原有位置，该状态舍弃</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lastState = <span class="number">0</span>; lastState &lt; (<span class="number">1</span> &lt;&lt; n); lastState++)</span><br><span class="line">            &#123;                                     <span class="comment">//找到一种当前行的可行状态后，遍历上一行的所有状态</span></span><br><span class="line">                <span class="keyword">if</span> (dp[row - <span class="number">1</span>][lastState] == <span class="number">-1</span>) <span class="comment">//上一行的状态被舍弃了，那就直接下一个状态</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="function"><span class="built_in">bitset</span>&lt;20&gt; <span class="title">lbs</span><span class="params">(lastState)</span></span>;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lbs[j] &amp;&amp; bs[j])</span><br><span class="line">                    &#123; <span class="comment">//如果找到的这个上一行状态的j位置坐了人，，那么该状态不合法，舍弃</span></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                    dp[row][state] = max(dp[row][state], dp[row - <span class="number">1</span>][lastState] + (<span class="keyword">int</span>)bs.count()); <span class="comment">//转移方程</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">    &#123; <span class="comment">//在最后一行的所有状态中找出最大的</span></span><br><span class="line">        <span class="keyword">if</span> (dp[m][i] &gt; res)</span><br><span class="line">        &#123;</span><br><span class="line">            res = dp[m][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (seats[i][j] == <span class="number">1</span>)</span><br><span class="line">                total++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res - total;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LC464-单词拆分-II&quot;&gt;&lt;a href=&quot;#LC464-单词拆分-II&quot; class=&quot;headerlink&quot; title=&quot;LC464. 单词拆分 II&quot;&gt;&lt;/a&gt;LC464. &lt;a href=&quot;https://leetcode.cn/problems/w</summary>
      
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>面试记录</title>
    <link href="https://tsuiwade.github.io/2022/08/23/blog61-interviewRecord/"/>
    <id>https://tsuiwade.github.io/2022/08/23/blog61-interviewRecord/</id>
    <published>2022-08-23T12:25:35.000Z</published>
    <updated>2022-08-23T12:25:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>2022.8.2 15:00 </p><p>1、接雨水问题</p><p>2、进程间通信有哪些方式 7种（匿名管道、有名管道、信号、信号量、共享内存、消息队列、socket）</p><p>3、程序、进程、线程有什么区别（背的不好，有点瞎编，面试官皱眉了）</p><ul><li><code>定义</code><br><strong>程序</strong>是含有代码和数据的文件，存储在磁盘中，也就是说程序是静态的代码。<br><strong>进程</strong> 运行可执行文件后，会被装载到内存中，运行的程序就是进程。<br><strong>线程</strong>是进程的子任务，可以理解为轻量级的进程。</li><li><code>根本区别</code> 进程是操作系统<strong>资源分配</strong>的基本单位，而线程是<strong>CPU调度和程序执行</strong>的基本单位</li><li><code>包含关系</code>  一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程依赖于进程而存在。</li></ul><ul><li><code>资源</code> 每个进程都有独立的代码和数据空间（程序上下文），进程间切换开销大；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</li><li><code>内存分配</code>  进程在执行过程中拥有独立的内存单元，而多个线程共享进程的内存。</li><li><code>共享</code><br>进程间信息难以共享。由于除去只读代码段外，父子进程并未共享内存，因为必须采用一些进程间通信（IPC）方式，在进程间进行信息交换。<br>线程之间能够方便，快速地共享信息。只需将数据复制到共享（全局或堆）变量中即可。不过，要避免出现多个线程同时修改同一份信息的情况，这就需要使用到线程同步（同步就是协同步调，按预定的先后次序进行运行）技术（临界区、互斥量mutex、信号量semaphore、实物对象events）。</li></ul><ul><li><p><code>创建</code> 调用fork()来创建进程的代价相对较高，即便使用copy-on-write技术，仍然需要复制<strong>内存页表</strong>（page table）和<strong>文件描述符表</strong>（file descriptor table)之类的进程属性，这意味着fork()调用在时间上的开销依然不菲。创建线程比创建进程通常要快十倍甚至更多。线程的创建之所以快，是因为所需复制的诸多属性，在线程间本来就是<strong>共享</strong>的，无需采用写时复制（copy-on-write）来复制内存页，也无需复制页表。</p></li><li><p><code>执行过程</code> 每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</p></li><li><p><code>通信</code> 进程间通信用IPC，线程间通信直接读写数据段（但需要一些同步和互斥的方法）。</p></li><li><p><code>影响关系</code> 一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</p></li></ul><hr><p>4、HTTP状态码（504 404 301）是什么意思，（就简答重定向、成功、客户端、服务器错误，没具体背，他问我4打头都是客户端报错吗，3打头都是重定向吗）</p><div class="table-container"><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">分类描述</th></tr></thead><tbody><tr><td style="text-align:left">1**</td><td style="text-align:left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left">2**</td><td style="text-align:left">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left">3**</td><td style="text-align:left">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left">4**</td><td style="text-align:left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left">5**</td><td style="text-align:left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table></div><p>200 OK 请求成功。一般用于GET与POST请求。</p><p>301 永久移动 Moved Permanently。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</p><p>302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</p><p>304  Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</p><p>400  Bad Request 客户端请求的语法错误，服务器无法理解</p><p>401  Unauthorized 请求要求用户的身份认证</p><p>403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求</p><p>404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</p><p>504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求</p><hr><p>5、HTTP的header里面包含哪些key，分别是什么意思（以为问post get，面试官知道我不会直接过了</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220803155421787.png" alt="image-20220803155421787"></p><p>灰体都是key</p><hr><p>6、写sql，班级里 姓名重复的人的数量（不会</p><p>7、（a,b）联合索引 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; ? and c &#x3D; ?,</span><br><span class="line"></span><br><span class="line">b &#x3D; ? and c &#x3D; ?</span><br><span class="line"></span><br><span class="line">a &#x3D; ? and b &#x3D; ?</span><br></pre></td></tr></table></figure><p>不会</p><p>8、设计一个登录模块，考虑注意哪些安全问题，怎么避免（不会</p><p>我问能不能给建议和评价，他问你自己觉得怎么样</p><p>（后端肯定是需要数据库的）</p><p>网页登录和手机登录的问题 缓存存在哪，换了网络和地点网页还能登上吗 扫码登录怎么解决。。</p><p>2022.8.3 17:00</p><p>1、自我介绍学习能力强，举例</p><p>2、实习经历里的公司选择</p><p>3、实习收获</p><p>4、Flutter、qt学习看法，偏向C++还是js，（其实米哈游也在招前端</p><p>10min</p><p>5、指针和引用的区别，本质区别，定义 描述 使用，什么场景下用引用 什么场景下用指针，什么场景下只能用指针、什么场景下只能用引用。</p><blockquote><p>指针是一个存放内存地址的整数，是一个实体，这个整数表示的是被指向的变量的地址。</p><p>引用其实就是变量的别名，一定要有本体</p></blockquote><p>都是地址的概念</p><ul><li>程序为指针变量分配内存区域，而引用不需要分配内存区域；</li><li>指针在声明时可以暂时不<strong>初始化</strong>，pointer = nullptr，引用永远都不会为<strong>空</strong>，它得代表某个对象，引用在创建的同时必须被初始化</li><li>指针的值在初始化后<strong>可以被重新赋值</strong>，即指向其它的存储单元，而引用在进行初始化后就不会再改变了，从一而终。</li><li>”sizeof(运算符)引用”得到的是所指向的变量(对象)的大小，而”sizeof指针”得到的是指针本身的大小；指针和引用的自增(++)运算意义不一样；指针有多级，引用没有。可以有const指针，但是没有const引用；</li></ul><p>使用场景：</p><p>指针：存在不指向任何对象的可能，改变指针的指向</p><p>引用：引用的主要功能就是作为函数的参数和返回值，当你需要指向某个东西，而且一定专一，绝不会让其指向其它东西，例如有些函数参数为了避免拷贝可以使用引用。重载某个操作符。有些函数参数为了避免拷贝可以使用引用，或者实现一个操作符，指针可以毫无约束的操作内存中的任何东西，功能十分强大，但是也很危险，所以可以在恰当的时机使用引用。</p><p>6、NULL和nullptr的区别</p><p>7、vector push_back()的复杂度</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220807153912590.png" alt="image-20220807153912590"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220807154212477.png" alt="image-20220807154212477"></p><p>8、虚函数、模板函数，虚函数机制，虚函数表，虚表指针。</p><p>9、计算机基础，锁的用处，有哪些锁。锁的类型，悲观锁和乐观锁的区别。</p><p>10、线程和进程的区别，进程是资源分配的最小单元 怎么理解，线程是CPU调度的最小单元。</p><p>理解 举例 <a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html</a> （进程、线程、共享内存、互斥锁、信号量的解释）</p><p>11、TCP三次握手四次挥手，举例。</p><p>12、TCP状态</p><p>13、DNS</p><p>14、哈夫曼树拿来做什么（前缀编码）</p><p>19min</p><p>完全背包硬币凑数 13min</p><p>8min反问</p><hr><p>2022.8.3 15:00</p><p>1、项目的TCP/UDP</p><p>2、socket通信的特点、实现机制</p><p>3、了解linux内核吗、进程线程内存管理</p><p>4、上下文切换会有哪些东西</p><hr><p>大疆08.07笔试</p><p>1、<strong>static</strong></p><p><strong>生存周期</strong>: 变量从定义到销毁的时间范围。<strong>静态数据存放在全局数据区</strong>(不会导致堆栈溢出)的变量的生存周期存在于整个程序运行期间，而局部变量存放在栈中的数据则随着函数等的作用域结束导致出栈而销毁。</p><p><strong>作用域</strong>: 变量的可见代码域（块作用域，函数作用域，类作用域，程序全局作用域）。</p><ul><li><p>局部变量m存放在栈中，当test函数结束，m将被销毁；静态变量i不存放在栈中，而是存放于程序的全局变量区域，因此随着函数test的结束，它并不随着出栈操作而被销毁，它的生存周期存在于程序的整个运行期。static局部变量只被初始化一次，下一次依据上一次结果值；</p></li><li><p>再举一个全局声明的例子。在文件A 中定义静态变量j：<br>int n=3; //默认为extern<br>static int j=5;  //声明为static<br>全局变量和静态变量j都存放于程序的全局数据区域，它们的生存周期都是程序的整个运行期，但是n的作用域为全局作用域，可以通过extern在其他文件中使用，而j只能在文件A中使用，例如在文件B中：<br>extern int n;  //ok</p><p>extern int j;  //error: j在文件B中不可见</p></li></ul><p><strong>static全局变量与普通的全局变量有什么区别</strong> </p><p>这两者的区别在于<u>非静态全局变量</u>的作用域是<u>整个源程序</u>， 当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 而<u>静态全局变量则限制了其作用域</u>， 即只在定义该变量的源文件内有效， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其它源文件中引起错误。 </p><p>static全局变量只初始化一次，防止在其他文件单元中被引用; 　（静态数据不初始化会被自动初始化为0）</p><p><strong>static局部变量和普通局部变量有什么区别 ？</strong></p><p>把局部变量改变为<a href="https://so.csdn.net/so/search?q=静态变量&amp;spm=1001.2101.3001.7020">静态变量</a>后是改变了它的存储方式即改变了它的<strong>生存期</strong>。把全局变量改变为静态变量后是改变了它的<strong>作用域</strong>，限制了它的使用范围。 静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用不再进行初始化；</p><p>static局部变量只被初始化一次，下一次依据上一次结果值； 其他文件可以定义同名函数，不会冲突。</p><p><strong>static函数与普通函数有什么区别？</strong></p><p>static函数与普通函数<strong>作用域</strong>不同,仅在本文件。只在当前源文件中使用的函数应该说明为<strong>内部函数</strong>(static修饰的函数)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件.</p><p>static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。其它文件中可以定义相同名字的函数，不会发生冲突；</p><p><strong>静态数据成员</strong></p><p>非静态数据成员，每个类对象都有自己的拷贝。静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，静态数据成员在程序中也只有一份拷贝，由该类型的所有对象共享访问，值可以更新。节省存储空间。需要改的时候改的很快。没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性； </p><p>静态数据成员初始化与一般数据成员初始化不同。</p><p>静态数据成员初始化的格式为： </p><p>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞ </p><p>类的静态数据成员有两种访问形式： </p><p>＜类对象名＞.＜静态数据成员名＞ 或 ＜类类型名＞::＜静态数据成员名＞ </p><p><strong>静态成员函数</strong> </p><p>它为类的全部服务而不是为某一个类的具体对象服务。静态成员函数由于不是与任何的对象相联系，因此它不具有this指针。从这个意义上讲，静态成员函数<strong>无法访问属于类对象的非静态数据成员</strong>，也无法访问<strong>非静态成员函数，它只能调用其余的静态成员函数</strong>。 必须定义在类体内部！</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">C程序一直由下列部分组成：</span><br><span class="line"><span class="number">1</span>）正文段（代码段）——CPU执行的机器指令部分；一个程序只有一个副本；只读，防止程序由于意外事故而修改自身指令；    </span><br><span class="line"><span class="number">2</span>）初始化数据段（数据段）——在程序中所有赋了初值的全局变量，存放在这里。    </span><br><span class="line"><span class="number">3</span>）非初始化数据段（bss段）——在程序中没有初始化的全局变量；内核将此段初始化为<span class="number">0</span>。（这就是为什么全局内置类型变量会初始化，而局部变量就为未初始化的未知值）     </span><br><span class="line"><span class="number">4</span>）栈——增长方向：自顶向下增长；自动变量以及每次函数调用时所需要保存的信息（返回地址；环境信息）。      </span><br><span class="line"><span class="number">5</span>）堆——动态存储部分。</span><br></pre></td></tr></table></figure><p>程序在内存中申请了代码段，全局数据段（初始化和未初始化），栈和堆：程序代码放于代码段，全局变量和静态变量存放在全局数据段中，一直存在直到程序结束，而局部变量都放于临时的栈中，随着作用域的结束随着出栈操作而销毁。malloc和new出来的内存不属于上面提到的程序申请的内存中，而是在系统中申请到的内存，所以如果在程序中没有明确free和delete的话，程序结束后该内存仍不会被释放，造成内存泄漏。</p><p>2、reinterpret_cast</p><p>reinterpret_cast运算符是用来处理无关类型之间的转换；它会产生一个新的值，这个值会有与原始参数（expressoin）有完全相同的比特位。可以将int *转为long long 同是8bits</p><ul><li><strong>从指针类型到一个足够大的整数类型</strong></li><li>从整数类型或者枚举类型到指针类型</li><li>从一个指向函数的指针到另一个不同类型的指向函数的指针</li><li>从一个指向对象的指针到另一个不同类型的指向对象的指针</li><li>从一个指向类函数成员的指针到另一个指向不同类型的函数成员的指针</li><li>从一个指向类数据成员的指针到另一个指向不同类型的数据成员的指针</li></ul><p>还有</p><ul><li><p><strong>static_cast&lt;类型说明符&gt;(表达式）</strong>用于进行比较“自然”和低风险的转换，如整型和浮点型、字符型之间的互相转换</p></li><li><p><strong>dynamic_cast&lt;类型说明符&gt;(表达式）</strong>专门用于将多态基类的指针或引用强制转换为派生类的指针或引用 </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Base* pBase = <span class="keyword">new</span> Derived(); <span class="comment">// 转为基类</span></span><br><span class="line">pBase-&gt;print();  <span class="comment">// 虚函数 在运行时的类型来决定运行结果 Derived print!</span></span><br><span class="line">pBase-&gt;work();   <span class="comment">// 普通成员函数 编译期间决定 Base do work...</span></span><br><span class="line"></span><br><span class="line">Derived* pDerived = <span class="keyword">dynamic_cast</span>&lt;Derived*&gt;(pBase);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>const_cast&lt;类型说明符&gt;(表达式）</strong> 去掉const性质（没有真正去除），将 常量转换成非常量，如果原对象本身是常量，</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> constant = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* const_p = &amp;constant;</span><br><span class="line"><span class="keyword">int</span>* modifier = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(const_p);</span><br><span class="line">*modifier = <span class="number">7</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">constant: 21</span></span><br><span class="line"><span class="comment">*const_p: 7</span></span><br><span class="line"><span class="comment">*modifier: 7</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure></li></ul><p>3、智能指针</p><ul><li>shared_ptr 允许多指针指向同一个对象：允许拷贝和移动构造函数。</li><li>unique_ptr 独占所指向的对象：不允许拷贝和赋值构造函数。</li><li>weak_ptr 伴随类“允许默认、拷贝构造函数。</li></ul><p>4、C++11 auto关键字</p><p>4、类、函数模板 全特化、偏特化</p><p>5、右值引用</p><p>6、线性数据结构：线性表 栈 队列 双端队列 数组 串  ，非线性：树 图</p><p>7、排序过程正确的有</p><p>8、缩窄转换</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220808204639298.png" alt="image-20220808204639298"></p><p>9、STL迭代器</p><p>queue、stack没有迭代器，对于根据定义不允许顺序或随机访问的数据结构，迭代器没有任何意义。这就是<strong>堆栈和队列</strong>没有迭代器的原因，另一方面，<strong>向量和列表</strong>允许对元素进行顺序和/或随机访问，因此迭代器对于导航这些数据结构是有意义的。</p><p>10、在C++程序中调用被C 编译器编译后的函数，为什么要加extern “C”  <strong>实现 C++ 与 C 的混合编程。 解决名字匹配问题</strong></p><p>extern “C”是连接声明。被extern “C”修饰的变量和函数是按照C语言方式编译和连接的。作为一种面向对象的语言，C++支持函数重载，而过程式语言C则不支持。函数被C++编译后在符号库中的名字与C语言的不同。例如，假设某个函数的原型为：void foo( int x, int y );该函数被C编译器编译后在符号库中的名字为_foo，而C++编译器则会产生像_foo_int_int之类的名字。这样的名字包含了函数名、函数参数数量及类型信息，C++就是靠这种机制来实现<strong>函数重载</strong>的。</p><p>2022.8.12 10:00  </p><p>1、反转链表②</p><p>链表出现野指针问题，野指针不可为next赋值，释放指针。30min</p><p>2、vector的遍历 使用for循环和迭代器的优劣 34min</p><p>for需要知道集合或数组的大小，而且需要是有序的，不然无法遍历；</p><p>iterator都不需要知道集合或数组的大小，他们都是得到集合内的每个元素然后进行处理</p><p>iterator是最强大的，他可以随时修改或者删除集合内部的元素，并且是在不需要知道元素和集合的大小的情况下进行的，当你需要对不同的容器实现同样的遍历方式时，迭代器是最好的选择！</p><p><a href="https://blog.51cto.com/shijianfeng/4896110">https://blog.51cto.com/shijianfeng/4896110</a></p><p>当容器中的一个元素被删除时，指向该元素后续的迭代器变得无效。上面的代码中，只要执行了erase(it),那么it就会变得无效，那么执行it++就肯定会出错。</p><ol><li><p>对于节点式容器(map, list, set)元素的删除，插入操作会导致指向该元素的迭代器失效，其他元素迭代器不受影响</p></li><li><p>对于顺序式容器(vector，string，deque)元素的删除、插入操作会导致指向该元素以及后面的元素的迭代器失效</p></li></ol><p>3、两个线程之间的同步 40min</p><p>条件变量+锁</p><p>4、项目</p><p>2022.8.12 16:00 </p><p>商业架构部 广告投放 商业相关 检索架构c++</p><p>1、2min13s 输入网址 请求发起到结束流程：DNS检查浏览器缓存、系统缓存hosts缓存，本地域名服务器，根域名服务器，顶级域名服务器，权威域名服务器。</p><p>2、http的header都有什么</p><ol><li><p>General通用信息</p><p>请求url地址， 请求方法， 状态码</p></li><li><p>请求头Request Headers</p><ul><li>User-Agent : 客户端信息</li><li>cookie : 浏览器端cookie</li><li>Origin : 目标地址</li><li>Referer : 包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</li><li>Host : 客户端地址</li></ul></li><li><p>Response Headers 响应头</p><ul><li>Cache-Control 缓存哪种类型</li><li>Content-Language 响应体的语言</li></ul></li></ol><p>3、xss攻击原理</p><p>跨站脚本攻击（Cross-site scripting，XSS）是一种安全漏洞，攻击者可以利用这种漏洞在网站上注入恶意的客户端代码。</p><p>XSS的重点不在于跨站点，而在于脚本的执行。 XSS的原理是： 恶意攻击者在web页面中会插入一些恶意的script代码。 当用户浏览该页面的时候，那么嵌入到web页面中script代码会执行，因此会达到恶意攻击用户的目的。</p><p>Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。</p><p>4、进程，线程</p><p>IPC7种方式</p><p>信号怎么给另一个程序发送信号</p><p>5、C++编译流程</p><p>6、一般用什么编译、g++编译选项</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">-D&#123;=|#&#125; 定义宏 define macro</span><br></pre></td></tr></table></figure><p>-O0 不进行优化处理。</p><p>-O 或 -O1 优化生成代码。</p><p>-O2 进一步优化。</p><p>-O3 比 -O2 更进一步优化，包括 inline 函数。</p><p>7、CPU cache 结构、如何提升代码的cache命中率</p><p>代码优化目标是提升 CPU 缓存的命中率</p><p>19min 算法题 五子棋 二维数组表示棋盘 </p><p>53min完成 </p><p>并发度比较高，提交场景下，贴吧发帖并发度高，提交多，mysql数据库性能没那么强；</p><p>2022.8.16 14:30</p><p>2min C++智能指针、什么工具排查内存泄漏</p><p>Valgrind具是一个用于调试和分析Linux程序的GPL系统。使用Valgrind的工套件，您可以自动检测许多内存管理和线程错误，使程序更稳定。还可以执行详细的分析以帮助加速程序的执行。下面我们介绍Valgrind工具集中的内存检测工具Memcheck的用法，以提高内存错误的查找效率。</p><p>2022.08.24 zk二面</p><p>1、抽象类怎么定义的，从软件工程角度讲，c++引入抽象类的作用是什么</p><p>2、定义了一个int类的指针，定义为0，然后又去访问它，编译的时候有没有问题</p><p>3、操作系统引入虚拟地址空间的作用</p><p>2022.09.02 10：00</p><p>1、hexo博客后端是什么</p><p>是nodejs</p><p>2、web服务器项目 高性能高并发是怎么体现出来的</p><p>3、select/poll/epoll区别</p><p>4、http报文格式</p><p>request</p><p>5、301 和 302 区别</p><p>6、线程池、核心线程 非核心线程</p><p>7、B树和B+树区别</p><p>8、快排思想</p><p>9、linux运维了解吗</p><p>10、服务器性能指令、cpu memory指标 df</p><ul><li><p>top：查看内存/显示系统当前进程信息</p></li><li><p>df -h：查看磁盘储存状况</p></li><li><p>iotop：查看IO读写（yum install iotop安装）</p></li><li><p>iotop -o：直接查看比较高的磁盘读写程序</p></li><li><p>netstat -tunlp | grep 端口号：查看端口号占用情况（1）</p></li><li><p>lsof -i:端口号：查看端口号占用情况（2）</p></li><li><p>uptime：查看报告系统运行时长及平均负载</p></li><li><p>ps aux：查看进程</p></li></ul><p>11、sql索引失效的情况</p><p>12、读未提交有什么问题</p><p>13、BIO和NIO</p><p>2022.09.03 17:00 </p><p>1、c11你认为最大的更新是什么</p><p><strong>类对象</strong>，在默认情况下，将一个对象赋给同类型的另外一个对象时，C++将源对象的每个数据成员复制到目标对象中相应的数据成员中</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    Test()</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Test t1;</span><br><span class="line">    t1.a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    Test t2;</span><br><span class="line">    t2.a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; &amp;t1 &lt;&lt; <span class="string">&quot; a = 10 &quot;</span> &lt;&lt; t1.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; &amp;t2 &lt;&lt; <span class="string">&quot; a = 5 &quot;</span> &lt;&lt; t2.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    t2 = t1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; &amp;t1 &lt;&lt; <span class="string">&quot; &amp;t1:0x61fe1c a = 10 &quot;</span> &lt;&lt; t1.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; &amp;t2 &lt;&lt; <span class="string">&quot; &amp;t2:0x61fe18 a = 10 &quot;</span> &lt;&lt; t2.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    t1.a = <span class="number">111</span>;</span><br><span class="line">    t2.a = <span class="number">222</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; &amp;t1 &lt;&lt; <span class="string">&quot; &amp;t1:0x61fe1c a = 111 &quot;</span> &lt;&lt; t1.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; &amp;t2 &lt;&lt; <span class="string">&quot; &amp;t2:0x61fe18 a = 222 &quot;</span> &lt;&lt; t2.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类指针</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    Test()</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Test *t1 = <span class="keyword">new</span> Test();</span><br><span class="line">    t1-&gt;a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    Test *t2 = <span class="keyword">new</span> Test();</span><br><span class="line">    t2-&gt;a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; t1 &lt;&lt; <span class="string">&quot; a = 10 &quot;</span> &lt;&lt; t1-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; t2 &lt;&lt; <span class="string">&quot; a = 5 &quot;</span> &lt;&lt; t2-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    t2 = t1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; t1 &lt;&lt; <span class="string">&quot; &amp;t1:0xfd3f20 a = 10 &quot;</span> &lt;&lt; t1-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; t2 &lt;&lt; <span class="string">&quot; &amp;t2:0xfd3f20 a = 10 &quot;</span> &lt;&lt; t2-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    t1-&gt;a = <span class="number">111</span>;</span><br><span class="line">    t2-&gt;a = <span class="number">222</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t1:&quot;</span> &lt;&lt; t1 &lt;&lt; <span class="string">&quot; &amp;t1:0xfd3f20 a = 222 &quot;</span> &lt;&lt; t1-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&amp;t2:&quot;</span> &lt;&lt; t2 &lt;&lt; <span class="string">&quot; &amp;t2:0xfd3f20 a = 222 &quot;</span> &lt;&lt; t2-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类对象和类指针区别：</p><ul><li><p>定义对象实例时，分配了内存，指针变量则未分配类对象所需内存。</p></li><li><p>指针变量是间接访问，但可实现多态（通过父类指针可调用子类对象），并且没有调用构造函数。<br>直接声明可直接访问，但不能实现多态，声明即调用了构造函数（已分配了内存）。</p></li><li><p>类的对象:用的是内存栈,是个局部的临时变量.<br>类的指针:用的是内存堆,是个永久变量,除非你释放它.  </p></li><li><p>类指针的优点：<br>第一实现多态。<br>第二，在函数调用，传指针参数。不管你的对象或结构参数多么庞大，你用指针，传过去的就是4个字节。如果用对象，参数传递占用的资源就太大了</p></li><li><p><strong>当类是有虚函数的基类,Func是它的一个虚函数,则调用Func时:<br>类的对象:调用的是它自己的Func;<br>类的指针:调用的是分配给它空间时那种类的Func;</strong> </p></li></ul><p>通过基类对象的指针（或引用）访问“同名虚函数”——&gt;动态联编</p><p>通过派生类对象访问同名函数——&gt;静态联编</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;animal sleep&quot;</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;animal breathe&quot;</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fish</span>:</span><span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;fish bubble&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       fish fh;</span><br><span class="line">       animal *pAn=&amp;fh; <span class="comment">// 隐式类型转换</span></span><br><span class="line">       pAn-&gt;breathe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别于这个</p><p>编译的角度<br>C++编译器在编译的时候，要确定每个对象调用的函数（要求此函数是非虚函数）的地址，这称为<strong>早期绑定</strong>（early binding），当我们将fish类的对象fh的地址赋给pAn时，C++编译器进行了<strong>类型转换</strong>，此时C++编译器认为变量pAn保存的就是animal对象的地址。当在main()函数中执行pAn-&gt;breathe()时，调用的当然就是animal对象的breathe函数。</p><p>2、手写体现多态的例子</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; a &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; b &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; aa &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; bb &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> B();</span><br><span class="line">    a-&gt;run();  <span class="comment">// 多态执行aa</span></span><br><span class="line">    a-&gt;run2(); <span class="comment">// b 执行基类函数；若基类没函数 仍然调用基类函数 因此报错；</span></span><br><span class="line">    A a2 = B();</span><br><span class="line">    a2.run(); <span class="comment">// a 执行基类函数</span></span><br><span class="line">    a2.run2(); <span class="comment">// b 执行基类函数</span></span><br><span class="line">    B a3 = B();</span><br><span class="line">    a3.run();  <span class="comment">// aa</span></span><br><span class="line">    a3.run2(); <span class="comment">// bb</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数隐藏</strong>和函数覆盖只会发生在基类和派生类之间。</p><p>函数隐藏是指派生类中函数与基类中的函数同名，但是这个函数在基类中并没有被定义为虚函数，这种情况就是函数的隐藏。<br>所谓隐藏是指使用常规的调用方法，派生类对象访问这个函数时，会优先访问派生类中的这个函数，基类中的这个函数对派生类对象来说是隐藏起来的。 但是隐藏并不意味这不存在或完全不可访问。通过 d-&gt;Base::func()访问基类中被隐藏的函数。</p><p>函数覆盖特指由基类中定义的虚函数引发的一种多态现象。在某基类中声明为 virtual 并在一个或多个派生类中被重新定义的成员函数，用法格式为：virtual 函数返回类型 函数名（参数表） {函数体}；实现多态性，通过指向派生类的基类指针或引用，访问派生类中同名覆盖成员函数。</p><p><strong>基类指针指向派生类对象</strong></p><p><strong>一、 函数在基类和派生类中都存在</strong></p><p>这时通过“指向派生类对象的基类指针”调用成员函数，调用的是基类的成员函数。</p><p><strong>二、函数在基类中不存在，在派生类中存在</strong></p><p>由于调用的还是基类中的成员函数，试图通过基类指针调用派生类才有的成员函数，则编译器会报错。</p><p><strong>三、 将基类指针强制转换为派生类指针</strong></p><p>这种是向下的强制<a href="https://so.csdn.net/so/search?q=类型转换&amp;spm=1001.2101.3001.7020">类型转换</a>，转换之后“指向派生类的基类指针”就可以访问派生类的成员函数。但是这种强制转换操作是一种<strong>潜在的危险操作</strong>。</p><p><strong>四、基类中存在虚函数的情况</strong></p><p>3、手写链表模板类</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// linklist.h</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T t;</span><br><span class="line">Node&lt;T&gt; *next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LinkList();</span><br><span class="line">~LinkList();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T &amp;t, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> pos, T &amp;t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> pos, T &amp;t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">Node&lt;T&gt; *header;</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">LinkList&lt;T&gt;::LinkList()</span><br><span class="line">&#123;</span><br><span class="line">header = <span class="keyword">new</span> Node &lt; T &gt; ;</span><br><span class="line">header-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">LinkList&lt;T&gt;::~LinkList()</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;T&gt; *tmp = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (header) &#123;</span><br><span class="line">tmp = header-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> header;</span><br><span class="line">header = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> LinkList&lt;T&gt;::clear()</span><br><span class="line">&#123;</span><br><span class="line">~LinkList();</span><br><span class="line">LinkList();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> LinkList&lt;T&gt;::insert(T &amp;t, <span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;T&gt; *cur = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 对pos的容错处理</span></span><br><span class="line"><span class="keyword">if</span> (pos &gt;= length) &#123;</span><br><span class="line">pos = length;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">cur = header;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 把上层应用的t结点缓存到容器中</span></span><br><span class="line">Node&lt;T&gt; *node = <span class="keyword">new</span> Node &lt; T &gt; ;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;t = t; <span class="comment">// 把t缓存到容器中</span></span><br><span class="line"> </span><br><span class="line">node-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = node;</span><br><span class="line"> </span><br><span class="line">++length;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> LinkList&lt;T&gt;::get(<span class="keyword">int</span> pos, T &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;T&gt; *cur = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (pos &gt;= length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">cur = header;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">t = cur-&gt;next-&gt;t; <span class="comment">// 把pos位置的结点赋值给t</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> LinkList&lt;T&gt;::del(<span class="keyword">int</span> pos, T &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;T&gt; *cur = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (pos &gt;= length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">cur = header;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;T&gt; *ret = <span class="literal">NULL</span>;</span><br><span class="line">ret = cur-&gt;next;</span><br><span class="line">t = ret-&gt;t; <span class="comment">// 把缓存的结点给上层应用t</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line">cur-&gt;next = ret-&gt;next;</span><br><span class="line">--length;</span><br><span class="line"><span class="keyword">delete</span> ret; <span class="comment">// 注意释放内存，因为insert的时候new Node&lt;T&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> LinkList&lt;T&gt;::getLen()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2022.8.2 15:00 &lt;/p&gt;
&lt;p&gt;1、接雨水问题&lt;/p&gt;
&lt;p&gt;2、进程间通信有哪些方式 7种（匿名管道、有名管道、信号、信号量、共享内存、消息队列、socket）&lt;/p&gt;
&lt;p&gt;3、程序、进程、线程有什么区别（背的不好，有点瞎编，面试官皱眉了）&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="work" scheme="https://tsuiwade.github.io/categories/work/"/>
    
    
    <category term="work" scheme="https://tsuiwade.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>c++11新特性</title>
    <link href="https://tsuiwade.github.io/2022/08/18/blog64-smartptr/"/>
    <id>https://tsuiwade.github.io/2022/08/18/blog64-smartptr/</id>
    <published>2022-08-18T14:05:05.000Z</published>
    <updated>2022-08-18T14:05:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转换构造函数"><a href="#转换构造函数" class="headerlink" title="转换构造函数"></a>转换构造函数</h2><p>将其它类型转换为当前类类型需要借助转换构造函数（Conversion constructor）</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>拷贝是在初始化阶段进行的，也就是用其它对象的数据来初始化新对象的内存。</p><ol><li>​    Student stu2 = stu1;  //调用拷贝构造函数</li><li>​    Student stu3(stu1);  //调用拷贝构造函数</li></ol><p>拷贝构造函数只有一个参数，它的类型是当前类的引用，而且一般都是 const 引用。</p><h3 id="为什么是-const-引用呢？"><a href="#为什么是-const-引用呢？" class="headerlink" title="为什么是 const 引用呢？"></a>为什么是 const 引用呢？</h3><p>添加 const 限制后，可以将 const 对象和非 const 对象传递给形参了，因为非 const 类型可以转换为 const 类型。</p><h2 id="拷贝赋值构造函数"><a href="#拷贝赋值构造函数" class="headerlink" title="拷贝赋值构造函数"></a>拷贝赋值构造函数</h2><h2 id="移动构造"><a href="#移动构造" class="headerlink" title="移动构造"></a>移动构造</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">demo <span class="title">get_demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> demo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    demo a = get_demo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 执行 get_demo() 函数内部的 demo() 语句，即调用 demo 类的默认构造函数生成一个匿名对象；</span></span><br><span class="line"><span class="comment">// 2 执行 return demo() 语句，会调用拷贝构造函数复制一份之前生成的匿名对象，并将其作为 get_demo() 函数的返回值（函数体执行完毕之前，匿名对象会被析构销毁）；</span></span><br><span class="line"><span class="comment">// 3 执行 a = get_demo() 语句，再调用一次拷贝构造函数，将之前拷贝得到的临时对象复制给 a（此行代码执行完毕，get_demo() 函数返回的对象会被析构）；</span></span><br><span class="line"><span class="comment">// 4 程序执行结束前，会自行调用 demo 类的析构函数销毁 a。</span></span><br></pre></td></tr></table></figure><p>目前多数编译器都会对程序中发生的拷贝操作进行优化，因此如果我们使用 VS 2017、codeblocks 等这些编译器运行此程序时，看到的往往是优化后的输出结果：</p><p>-fno-elide-constructors</p><p><strong>利用拷贝构造函数实现对 a 对象的初始化，底层实际上进行了 2 次拷贝（而且是深拷贝）操作</strong></p><p><strong>所谓移动语义，指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。简单的理解，移动语义指的就是将其他对象（通常是临时对象）拥有的内存资源“移为已用”。</strong></p><p>可以看到，在之前 demo 类的基础上，我们又手动为其添加了一个构造函数。和其它构造函数不同，此构造函数<strong>使用右值引用</strong>形式的参数，又称为移动构造函数。并且在此构造函数中，num 指针变量采用的是<strong>浅拷贝</strong>的复制方式，同时在函数内部重置了 d.num，有效避免了“同一块对空间被释放多次”情况的发生。</p><ol><li>​    demo(demo &amp;&amp;d):num(d.num){</li><li>​        d.num = NULL;</li><li>​        cout&lt;&lt;”move construct!”&lt;&lt;endl;</li><li>​    }</li></ol><p>当为 demo 类添加移动构造函数之后，使用临时对象初始化 a 对象过程中产生的 <strong>2 次</strong>拷贝操作，都转由<strong>移动构造</strong>函数完成。</p><p>当类中同时包含拷贝构造函数和移动构造函数时，如果使用临时对象初始化当前类的对象，编译器会<strong>优先</strong>调用移动构造函数来完成此操作。只有当类中没有合适的移动构造函数时，编译器才会退而求其次，调用拷贝构造函数。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220819003402549.png" alt="image-20220819003402549"></p><hr><p><a href="https://zhuanlan.zhihu.com/p/335994370">https://zhuanlan.zhihu.com/p/335994370</a></p><p><strong>左值</strong>：左值可以取地址，位于等号左边，具有名字的.包括</p><ul><li>变量名</li><li>返回左值引用的函数调用</li><li>int a = 0; int b = a; </li><li>前置自增。</li><li>赋值运算或复合赋值运算 ( i = 9) = 100; ( i += 10 ) = 1000;</li><li>解引用</li></ul><p><strong>右值</strong>：右值只能在等号右边，不能取地址，不具有名字。</p><ol><li><p>纯右值</p><ul><li>字面值</li><li>返回非引用类型的函数调用</li><li>后置自增</li><li>算术表达式/比较表达式/逻辑表达式</li></ul></li><li><p>将亡值（c11新引入的 与右值引用（移动语义）相关的值类型） 将亡值用来触发移动构造或移动赋值构造，并进行资源转移，之后值将调用析构函数</p></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A a = A();</span><br></pre></td></tr></table></figure><ul><li>同样的，a可以通过 &amp; 取地址，位于等号左边，所以a是左值。</li><li>A()是个临时值，没法通过 &amp; 取地址，位于等号右边，所以A()是个右值。</li></ul><p><strong>左值引用</strong>是对左值的引用；<strong>右值引用</strong>是对右值的引用。</p><p><strong>引用是变量的别名，由于右值没有地址，没法被修改，所以左值引用无法指向右值。</strong></p><p><strong>const左值引用</strong>是可以指向右值的，<strong>const左值引用不会修改指向值，因此可以指向右值。但是引用又需要修改变量值，因此引出右值引用。</strong></p><p><strong>右值引用</strong>，右值引用的标志是&amp;&amp;，可以指向右值，不能指向左值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp;ref_a_right = <span class="number">5</span>; <span class="comment">// ok</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp;ref_a_left = a; <span class="comment">// 编译不过，右值引用不可以指向左值</span></span><br><span class="line"></span><br><span class="line">ref_a_right = <span class="number">6</span>; <span class="comment">// 右值引用的用途：可以修改右值</span></span><br></pre></td></tr></table></figure><h3 id="右值引用有办法指向左值吗？std-move"><a href="#右值引用有办法指向左值吗？std-move" class="headerlink" title="右值引用有办法指向左值吗？std::move"></a><strong>右值引用有办法指向左值吗？</strong>std::move</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>; <span class="comment">// a是个左值</span></span><br><span class="line"><span class="keyword">int</span> &amp;ref_a_left = a; <span class="comment">// 左值引用指向左值</span></span><br><span class="line"><span class="keyword">int</span> &amp;&amp;ref_a_right = <span class="built_in">std</span>::move(a); <span class="comment">// 通过std::move将左值转化为右值，可以被右值引用指向</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a; <span class="comment">// 打印结果：5</span></span><br></pre></td></tr></table></figure><p>看上去是左值a通过std::move移动到了右值ref_a_right中，<strong>但事实上std::move移动不了什么，唯一的功能是把左值强制转化为右值</strong>，让右值引用可以指向左值。其实现等同于一个类型转换：<code>static_cast&lt;T&amp;&amp;&gt;(lvalue)</code></p><p>同样的，右值引用能指向右值，本质上也是把右值提升为一个左值，并定义一个右值引用通过std::move指向该左值：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp;ref_a = <span class="number">5</span>;</span><br><span class="line">ref_a = <span class="number">6</span>; </span><br><span class="line"> </span><br><span class="line">等同于以下代码：</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp;ref_a = <span class="built_in">std</span>::move(temp);</span><br><span class="line">ref_a = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p><strong>被声明出来的左、右值引用都是左值</strong>，std::move会返回一个右值引用<code>int &amp;&amp;</code>，它是左值还是右值呢？ 从表达式<code>int &amp;&amp;ref = std::move(a)</code>来看，右值引用<code>ref</code>指向的必须是右值，所以move返回的<code>int &amp;&amp;</code>是个右值。所以右值引用既可能是左值，又可能是右值吗？ 确实如此：<strong>右值引用既可以是左值也可以是右值，如果有名称则为左值，否则是右值</strong>。</p><p>或者说：<strong>作为函数返回值的 &amp;&amp; 是右值，直接声明出来的 &amp;&amp; 是左值</strong>。 这同样也符合第一章对左值，右值的判定方式：其实引用和普通变量是一样的，<code>int &amp;&amp;ref = std::move(a)</code>和 <code>int a = 5</code>没有什么区别，等号左边就是左值，右边就是右值。</p><hr><p>最后，从上述分析中我们得到如下结论：</p><ol><li><strong>从性能上讲，左右值引用没有区别，传参使用左右值引用都可以避免拷贝。</strong>左值引用和右值引用都是左值。</li><li><strong>右值引用可以直接指向右值，也可以通过std::move指向左值；而左值引用只能指向左值(const左值引用也能指向右值)。</strong></li><li><strong>作为函数形参时，右值引用更灵活。虽然const左值引用也可以做到左右值都接受，但它无法修改，有一定局限性。</strong>const右值可以修改。</li></ol><h3 id="3-右值引用和std-move的应用场景"><a href="#3-右值引用和std-move的应用场景" class="headerlink" title="3. 右值引用和std::move的应用场景"></a><strong>3. 右值引用和std::move的应用场景</strong></h3><p>在实际场景中，右值引用和std::move被广泛用于在STL和自定义类中<strong>实现移动语义，避免拷贝，从而提升程序性能</strong>。 在没有右值引用之前，一个简单的数组类通常实现如下，有<code>构造函数</code>、<code>拷贝构造函数</code>、<code>赋值运算符重载</code>、<code>析构函数</code>等。深拷贝/浅拷贝在此不做讲解。</p><p>在STL的很多容器中，都实现了以<strong>右值引用为参数</strong>的<code>移动构造函数</code>和<code>移动赋值重载函数</code>，或者其他函数，最常见的如std::vector的<code>push_back</code>和<code>emplace_back</code>。参数为左值引用意味着拷贝，为右值引用意味着移动。</p><h3 id="完美转发-std-forward"><a href="#完美转发-std-forward" class="headerlink" title="完美转发 std::forward"></a><strong>完美转发 std::forward</strong></h3><p>与move相比，forward更强大，move只能转出来右值，forward都可以。</p><blockquote><p>std::forward(u)有两个参数：T与 u。 a. 当T为左值引用类型时，u将被转换为T类型的左值； b. 否则u将被转换为T类型右值。</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span>&amp;&amp; ref_r)</span> </span>&#123;</span><br><span class="line">    ref_r = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// A、B的入参是右值引用</span></span><br><span class="line"><span class="comment">// 有名字的右值引用是左值，因此ref_r是左值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span>&amp;&amp; ref_r)</span> </span>&#123;</span><br><span class="line">    B(ref_r);  <span class="comment">// 错误，B的入参是右值引用，需要接右值，ref_r是左值，编译失败</span></span><br><span class="line">     </span><br><span class="line">    B(<span class="built_in">std</span>::move(ref_r)); <span class="comment">// ok，std::move把左值转为右值，编译通过</span></span><br><span class="line">    B(<span class="built_in">std</span>::forward&lt;<span class="keyword">int</span>&gt;(ref_r));  <span class="comment">// ok，std::forward的T是int类型，属于条件b，因此会把ref_r转为右值</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    A(<span class="built_in">std</span>::move(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左值引用和右值引用功能差异"><a href="#左值引用和右值引用功能差异" class="headerlink" title="左值引用和右值引用功能差异"></a>左值引用和右值引用功能差异</h3><ol><li><p>左值引用避免对象拷贝：函数传参和函数返回值。</p><p>T&amp; f()：返回类的引用可以作为左值，并且返回的类类型引用可以直接调用成员函数来修改，返回的类类型不会调用复制构造函数。</p></li><li><p>右值引用：实现移动语义和完美转发。</p><p>移动语义：</p><ul><li>对象赋值的时候，避免资源的重新分配。</li><li>移动构造以及移动拷贝构造</li><li>stl应用 alist.push_back(A()) 用了移动构造</li><li>std::unique_ptr</li></ul><p>实现完美转发：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revoke</span><span class="params">(T &amp;&amp;t)</span> </span>&#123;</span><br><span class="line">    func(forward&lt;T&gt;(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数模板可以将自己的参数完美地转发给内部调用的其他函数。</li><li>完美指不仅能转发参数的值，还能保证被转发的参数的左右值属性不变。</li><li>借用万能引用，通过引用的方式接收左右值。</li><li>引用折叠规则，参数为左值或者左值引用T&amp;&amp;会转化为int &amp;，右值或右值引用转为int &amp;&amp;</li><li>std::forwad<T>(v) T为左值引用，v将转为T类型的左值；T为右值引用，V将转为T类型的右值。forward作用是解引用。</li></ul><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220819101639616.png" alt="image-20220819101639616"></p></li></ol><hr><p><a href="https://www.bilibili.com/video/BV1bG411n79V?spm_id_from=333.880.my_history.page.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8">https://www.bilibili.com/video/BV1bG411n79V?spm_id_from=333.880.my_history.page.click&amp;vd_source=6c92aa3e5d0f2e0347ec135013a906d8</a></p><hr><p><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbaike.baidu.com%2Flink%3Furl%3DEYX-dODwSQw-1pxK8PiUviIBypeiZemhztsktVj85DByLHqTUiAvzFdorWB9HqEUvztZX_uecf7ZIQaUBWr_A3FPzlQYuz-9MFJQthsrXvr5OYQkXnGVwjTjMxjRy6VM">core dump</a>(核心转储/吐核)：是操作系统在进程收到某些信号而终止运行时，将此时进程地址空间的内容以及有关进程状态的其他信息写出的一个磁盘文件。这种信息往往用于调试。<br>C/C++程序常见coredump总结：</p><p>无效指针引起的程序coredump,大致可以分为4种原因引起异常。<br> (1)对空指针进行了操作。<br> (2)对一个未初始化的指针进行了操作。<br> (3)对一个已经调用了delete释放了内存的指针再次调用了delete去重复释放。<br> (4)多线程访问全局变量，导致内存值异常。</p><p>注:</p><ol><li>存放Coredump的目录即进程的当前目录。(1)/proc/sys /kernel/core_uses_pid可以控制core文件的文件名中是否添加pid作为扩展。(2)proc/sys/kernel/core_pattern可以控制core文件保存位置和文件名格式。</li><li>core文件的生成开关和大小限制：<code>ulimit</code>。</li><li>用gdb查看core文件：<code>gdb [exec file] [core file]</code>。</li></ol><hr><h2 id="指针管理的困境"><a href="#指针管理的困境" class="headerlink" title="指针管理的困境"></a>指针管理的困境</h2><ol><li>资源释放了，指针没有置空：<ul><li>野指针：如果未来接着使用这个内存，会判断存在。指针没初始化，不确定指向哪。未初始化的指针被称为野指针，可能是null，也可能指向合法内存（野）。</li><li>指针悬挂：多个指针指向同一个资源，其中一个指针将资源删除且置空了，但其他指针不知道，还在使用。指针所指的内存空间已经删除，指针指向空间就不确定了。当指针所指向的对象被释放，但是该指针没有任何改变，以至于其仍然指向已经被回收的内存地址，这种情况下该指针被称为悬挂指针；</li><li>踩内存：访问了不应该访问的内存</li></ul></li><li>没有释放内存导致内存泄漏</li><li>重复释放资源引发coredump</li></ol><p>怎么解决：RAII</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;转换构造函数&quot;&gt;&lt;a href=&quot;#转换构造函数&quot; class=&quot;headerlink&quot; title=&quot;转换构造函数&quot;&gt;&lt;/a&gt;转换构造函数&lt;/h2&gt;&lt;p&gt;将其它类型转换为当前类类型需要借助转换构造函数（Conversion constructor）&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://tsuiwade.github.io/2022/08/08/blog62-sort/"/>
    <id>https://tsuiwade.github.io/2022/08/08/blog62-sort/</id>
    <published>2022-08-08T18:08:50.000Z</published>
    <updated>2022-08-08T18:08:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html</a></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/1656597367-EDjKrb-%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png" alt="十大经典排序算法.png"></p><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><p>从前往后 两两交换，最大的浮到最后</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(T arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">                                swap(arr[j], arr[j + <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h2 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h2><p>找到最小 和位置0换，找到次小，和位置1换</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.size(); j++)</span><br><span class="line">                        <span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">                                min = j;</span><br><span class="line">                <span class="built_in">std</span>::swap(arr[i], arr[min]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h2><p>一把牌，后面没排序的，一张张换到前面来。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> key=arr[i];</span><br><span class="line">                <span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>((j&gt;=<span class="number">0</span>) &amp;&amp; (key&lt;arr[j]))&#123;</span><br><span class="line">                        arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                        j--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j+<span class="number">1</span>]=key;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h2><p>希尔排序是基于插入排序.</p><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。D=1时退化成插入排序。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> D = nums.size() / <span class="number">2</span>; D &gt; <span class="number">0</span>; D /= <span class="number">2</span> ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = D; i &lt; nums.size(); i++ ) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = nums[i];</span><br><span class="line">            <span class="keyword">int</span> j = i ;</span><br><span class="line">            <span class="keyword">for</span> ( ; j &gt;= D &amp;&amp; nums[j-D] &gt;key; j -= D ) &#123;</span><br><span class="line">                nums[j] = nums[j-D];</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h2><p>1和2先排序，3和4排序，1234排序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergeSort(nums, left, mid);</span><br><span class="line">    mergeSort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="keyword">int</span> i = left, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt;= nums[j]) &#123;</span><br><span class="line">            tmp[cnt++] = nums[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[cnt++] = nums[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        tmp[cnt++] = nums[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        tmp[cnt++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right - left + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        nums[i + left] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、堆排序"><a href="#6、堆排序" class="headerlink" title="6、堆排序"></a>6、堆排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> i, <span class="keyword">int</span> end)</span> </span>&#123; <span class="comment">// 和子比 大子往上 一步步循环往下</span></span><br><span class="line">    <span class="keyword">for</span> ( ; i * <span class="number">2</span> + <span class="number">1</span> &lt;= end; ) &#123;</span><br><span class="line">        <span class="keyword">int</span> leftSon = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightSon = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> large = i;</span><br><span class="line">        <span class="keyword">if</span> ( leftSon &lt;= end &amp;&amp; nums[leftSon] &gt; nums[i] ) large = leftSon;</span><br><span class="line">        <span class="keyword">if</span> ( rightSon &lt;= end &amp;&amp; nums[rightSon] &gt; nums[large] ) large = rightSon;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( large != i ) &#123;</span><br><span class="line">            swap( nums[i], nums[large] );</span><br><span class="line">            i = large;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = (len - <span class="number">1</span>) / <span class="number">2</span> ; i &gt;= <span class="number">0</span>; i-- ) <span class="comment">// 从最后一个父节点（独生子也行）开始往回</span></span><br><span class="line">        maxHeapify(nums, i, len - <span class="number">1</span>); <span class="comment">// 最大值在最上</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i-- ) &#123;</span><br><span class="line">        swap( nums[i], nums[<span class="number">0</span>] );</span><br><span class="line">        len -= <span class="number">1</span>;</span><br><span class="line">        maxHeapify(nums, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、快速排序"><a href="#7、快速排序" class="headerlink" title="7、快速排序"></a>7、快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sortArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    quickSort( nums, <span class="number">0</span>, nums.size() - <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( left &lt; right ) &#123;</span><br><span class="line">        <span class="keyword">int</span> randVal = rand() % ( right - left + <span class="number">1</span> ) + left;</span><br><span class="line">        swap( nums[randVal], nums[right] );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot = nums[right];</span><br><span class="line">        <span class="keyword">int</span> i = left - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> j = left; j &lt; right; j++ ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( nums[j] &lt; pivot ) &#123; <span class="comment">//j遇小则换</span></span><br><span class="line">                i = i + <span class="number">1</span>;</span><br><span class="line">                swap( nums[j], nums[i] );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap( nums[right], nums[i+<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">int</span> pos = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        quickSort(nums, left, pos - <span class="number">1</span>);</span><br><span class="line">        quickSort(nums, pos + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html&quot;&gt;https://www.cs.usfca.edu/~galles/visualization/ComparisonSor</summary>
      
    
    
    
    <category term="算法" scheme="https://tsuiwade.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://tsuiwade.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL基础记录</title>
    <link href="https://tsuiwade.github.io/2022/08/02/blog60-mysql/"/>
    <id>https://tsuiwade.github.io/2022/08/02/blog60-mysql/</id>
    <published>2022-08-02T10:09:56.000Z</published>
    <updated>2022-08-02T10:09:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。  </p><h2 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h2><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><p>上述就是事务的四大特性，简称ACID。</p><h2 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h2><ul><li>赃读：一个事务读到另外一个事务还没有提交的数据。  </li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读  </li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 “幻影”。  </li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220802101439343.png" alt="image-20220802101439343"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。  &lt;/p&gt;
&lt;h2 id=&quot;事务四大特性&quot;&gt;&lt;a href=&quot;#事务四大特性&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="mysql" scheme="https://tsuiwade.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://tsuiwade.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>C++构造析构顺序问题</title>
    <link href="https://tsuiwade.github.io/2022/07/30/blog59-baseDerived/"/>
    <id>https://tsuiwade.github.io/2022/07/30/blog59-baseDerived/</id>
    <published>2022-07-30T10:37:17.000Z</published>
    <updated>2022-07-30T10:37:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A, <span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~B()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>先构造父类，再构造子类，其中父类的构造顺序是从左到右。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Construct A</span><br><span class="line">Construct C</span><br><span class="line">Construct B</span><br><span class="line">Destruct B</span><br><span class="line">Destruct C</span><br><span class="line">Destruct A</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/abc1.png" alt="类图"></p><hr><h2 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h2><p>现在ABC之间<strong>不再是继承关系</strong>，而是<strong>组合关系</strong>。B类中有A和C两个类型的变量。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Notice</span></span><br><span class="line">B(): a(A()), c(C()) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~B()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">C c;</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>列表初始化是先于构造函数的调用的，而且列表初始化是与初始化顺序无关，只与数据成员定义的顺序有关</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Construct C</span><br><span class="line">Construct A</span><br><span class="line">Construct B</span><br><span class="line">Destruct B</span><br><span class="line">Destruct A</span><br><span class="line">Destruct C</span><br></pre></td></tr></table></figure><h2 id="继承与列表初始化"><a href="#继承与列表初始化" class="headerlink" title="继承与列表初始化"></a>继承与列表初始化</h2><p>下面的例子中B类继承了A和C，然后又拥有一个A和C类型的成员变量，虽然不符合设计模式，但是就将就看了。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A, <span class="keyword">public</span> C</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Notice: List initialize</span></span><br><span class="line">B(): a(A()), c(C()) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~B()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">C c;</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类在<strong>构造</strong>的时候会先从左到右调用父类的构造函数，然后根据类中<strong>数据成员</strong>的定义依次构造</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Construct A</span><br><span class="line">Construct C</span><br><span class="line">Construct C</span><br><span class="line">Construct A</span><br><span class="line">Construct B</span><br><span class="line">Destruct B</span><br><span class="line">Destruct A</span><br><span class="line">Destruct C</span><br><span class="line">Destruct C</span><br><span class="line">Destruct A</span><br></pre></td></tr></table></figure><h2 id="虚拟继承，继承，与列表初始化"><a href="#虚拟继承，继承，与列表初始化" class="headerlink" title="虚拟继承，继承，与列表初始化"></a>虚拟继承，继承，与列表初始化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~A()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct A&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~C()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct C&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Notice: C is a virtual public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A, <span class="keyword">public</span> <span class="keyword">virtual</span> C</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(): a(A()), c(C()) &#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Construct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">~B()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Destruct B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">C c;</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先执行<strong>虚拟继承</strong>的父类的构造函数，然后从左到右执行普通<strong>继承</strong>的父类的构造函数，然后按照定义的顺序执行<strong>数据成员</strong>的初始化，最后是<strong>自身的构造函数</strong>的调用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Construct C</span><br><span class="line">Construct A</span><br><span class="line">Construct C</span><br><span class="line">Construct A</span><br><span class="line">Construct B</span><br><span class="line">Destruct B</span><br><span class="line">Destruct A</span><br><span class="line">Destruct C</span><br><span class="line">Destruct A</span><br><span class="line">Destruct C</span><br></pre></td></tr></table></figure><hr><p>一个例子</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Base() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is Base&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VBase1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  VBase1() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is VBase1&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VBase2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  VBase2() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is VBase2&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span> <span class="keyword">public</span> Base, <span class="keyword">virtual</span> <span class="keyword">public</span> VBase1, <span class="keyword">virtual</span> <span class="keyword">public</span> VBase2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  A() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is A &quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  B() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is B&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  C() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is C&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  E() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is E &quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  D() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; this is D&quot;</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  C c;</span><br><span class="line">  E e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  D d = D();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/20190815113449656.png" alt="在这里插入图片描述"></p><p>执行虚基类的构造函数（不管是几重继承），执行的顺序是虚基类继承的顺序</p><p>B比Base优先；</p><hr><p>再来一个例子</p><p><a href="https://blog.csdn.net/qq_45532226/article/details/105278043">https://blog.csdn.net/qq_45532226/article/details/105278043</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  X() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;X &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Y() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Y &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Z() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Z &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  A() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  B() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;B &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B, <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  C() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;C &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  D() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;D &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> :</span> <span class="keyword">public</span> C, <span class="keyword">virtual</span> <span class="keyword">public</span> D, <span class="keyword">virtual</span> <span class="keyword">public</span> Z &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  X objX;</span><br><span class="line">  Y objY;</span><br><span class="line">  E() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;E &quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  E obj;</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>B A.    B A.</p><p> C         D.       Z.</p><p>​        (XY)E</p><p>A B！ D Z   B C   X Y E</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++函数指针/数组指针</title>
    <link href="https://tsuiwade.github.io/2022/07/28/blog58-funcPtr/"/>
    <id>https://tsuiwade.github.io/2022/07/28/blog58-funcPtr/</id>
    <published>2022-07-28T15:22:25.000Z</published>
    <updated>2022-07-28T15:22:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/lixd1210/article/details/104847089">https://blog.csdn.net/lixd1210/article/details/104847089</a></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Func</span><span class="params">(<span class="keyword">int</span> x)</span></span>;   <span class="comment">/*声明一个函数*/</span></span><br><span class="line"><span class="keyword">int</span> (*p) (<span class="keyword">int</span> x);  <span class="comment">/*定义一个函数指针*/</span></span><br><span class="line">p = Func;          <span class="comment">/*将Func函数的首地址赋给指针变量p*/</span></span><br></pre></td></tr></table></figure><hr><p>方式1</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func(int, int)&quot;</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1 :声明一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(MY_FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">MY_FUNC *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = func;</span><br><span class="line">fp(<span class="number">15</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>方式2：函数指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式2 :声明一种函数类型的指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*MY_FUNC_P)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.方式2举例</span></span><br><span class="line">MY_FUNC_P fp1 = <span class="literal">NULL</span>;</span><br><span class="line">fp1 = func;</span><br><span class="line">fp1(<span class="number">25</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>方式3</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式3 :直接通过指针类型创建，不需用typedef预定义。</span></span><br><span class="line"><span class="keyword">int</span> (*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">fp3 = func;</span><br><span class="line">fp3(<span class="number">27</span>, <span class="number">89</span>);</span><br></pre></td></tr></table></figure></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">下列对函数指针声明描述正确的是</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">fptr</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">fptr</span><span class="params">(<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="keyword">void</span> (*fptr)(<span class="keyword">int</span>*); <span class="comment">//是</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*fptr)</span><span class="params">(<span class="keyword">int</span>*)</span></span>; <span class="comment">//是</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* (*fptr)(<span class="keyword">int</span>*); <span class="comment">//是</span></span><br></pre></td></tr></table></figure></h2><p><strong>数组指针</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">99</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">888</span>, <span class="number">252</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*p)[n]; <span class="comment">// 数组指针（也称行指针）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*a)[<span class="number">10</span>] = &amp;arr; <span class="comment">// a指向一个含有10个整数的数组</span></span><br><span class="line"><span class="keyword">int</span> (&amp;b)[<span class="number">10</span>] = arr; <span class="comment">// b引用一个含有10个证书的数组</span></span><br></pre></td></tr></table></figure><p>指针数组</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p[n];</span><br></pre></td></tr></table></figure></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如要表示数组中i行j列一个元素：</span></span><br><span class="line">*(p[i]+j)</span><br><span class="line">*(*(p+i)+j)</span><br><span class="line">(*(p+i))[j]</span><br><span class="line">p[i][j]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p1[<span class="number">3</span>]; <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">int</span> *p2[<span class="number">3</span>];     <span class="comment">// 指针数组，数组里的元素是指针类型，是一个由返回整型数据的指针所组成的数组</span></span><br><span class="line"><span class="keyword">int</span>(*p3)[<span class="number">3</span>]; <span class="comment">// 数组指针 指向了一个数组，数组有3个指针元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">p4</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">// p4是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">p5</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">// p5是一个函数，返回一个指针，所以是指针函数。</span></span><br><span class="line"><span class="keyword">int</span> (*p6)(<span class="keyword">int</span>); <span class="comment">// p6是一个函数指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*p7)(<span class="keyword">int</span>)[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *(*p9(<span class="keyword">int</span>))[<span class="number">3</span>]; <span class="comment">// = int* A[3] A是个指针数组 , A调用 (*p(int))指针函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *(*(*p10)(<span class="keyword">int</span>))[<span class="number">3</span>]; <span class="comment">// p 是一个函数指针，这个函数接收一个int 参数，返回一个指针，指向数组，数组有3个元素，元素是 int *</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>(*p11(<span class="keyword">int</span>))[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/lixd1210/article/details/104847089&quot;&gt;https://blog.csdn.net/lixd1210/article/details/104847089&lt;/a&gt;&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>sizeof总结</title>
    <link href="https://tsuiwade.github.io/2022/07/26/blog57-sizeof/"/>
    <id>https://tsuiwade.github.io/2022/07/26/blog57-sizeof/</id>
    <published>2022-07-26T11:22:20.000Z</published>
    <updated>2022-07-26T11:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>sizeof运算符返回一条表达式（表达式结果类型的大小）或一个类型名字所占的字节数。</p><p>32位系统指针是4字节，64位系统指针是8字节</p><hr><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>没有成员的结构体占用的空间是多少个字节？</p><pre><code> 答案是：1个字节。 这就是实例化的原因（空类同样可以被实例化），每个实例在内存中都有一个独一无二的地址，为了达到这个目的，编译器往往会给一个空类或空结构体（C++中结构体也可看为类）隐含的加一个字节，这样空类或空结构体在实例化后在内存得到了独一无二的地址，所以空类所占的内存大小是1个字节。</code></pre><p>sizeof求结构体大小的问题</p><p><a href="https://www.bilibili.com/video/BV1be411x7ah?share_source=copy_web&amp;vd_source=17cdeb76122f8dc86347b37ac29fd89d">https://www.bilibili.com/video/BV1be411x7ah?share_source=copy_web&amp;vd_source=17cdeb76122f8dc86347b37ac29fd89d</a> 看懂了</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220726142031151.png" alt="image-20220726142031151"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220726142349090.png" alt="image-20220726142349090"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu1</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">     <span class="keyword">int</span> i;  <span class="comment">// 对齐单位是：4，[0]~[3]</span></span><br><span class="line">     <span class="keyword">char</span> c;  <span class="comment">// 对齐单位是：1，[4]~[5]</span></span><br><span class="line">     <span class="keyword">int</span> j;  <span class="comment">// 对齐单位是：4，[8]~[11]</span></span><br><span class="line">&#125;; <span class="comment">//总长度应为对齐单位(4)的倍数:12</span></span><br></pre></td></tr></table></figure><p>4 + 4 + 4 = 12 </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu1</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> *i;  <span class="comment">// 对齐单位是：8，[0]~[7]</span></span><br><span class="line">  <span class="keyword">int</span> j;   <span class="comment">// 对齐单位是：4，[8]~[11]</span></span><br><span class="line">  <span class="keyword">short</span> c; <span class="comment">// 对齐单位是：2，[12]~[13]</span></span><br><span class="line">&#125;;<span class="comment">//总长度应为对齐单位(4)的倍数:16</span></span><br></pre></td></tr></table></figure><p>12-&gt;16</p><hr><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>   <span class="title">s</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">int</span>   x: <span class="number">3</span>; </span><br><span class="line">   <span class="keyword">int</span>   y: <span class="number">4</span>; </span><br><span class="line">   <span class="keyword">int</span>   z: <span class="number">5</span>; <span class="comment">// 对齐单位是：4，[0]~[3]</span></span><br><span class="line">   <span class="keyword">double</span>   a; <span class="comment">// 对齐单位是：8，[8]~[15]</span></span><br><span class="line">&#125; <span class="comment">//总长度应为对齐单位(8)的倍数:16</span></span><br></pre></td></tr></table></figure><p>C语言的语法：位域。需要看清楚该结构体中是位操作，三个变量共占用一个int类型的大小，int类型占用4个字节，double占用8个字节。为了实现内存对齐，int类型需要填充4个字节的长度。前面补4位，4+4+8=16  </p><p>答案16字节</p><hr><p><strong>结构体嵌套</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student4</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;        <span class="comment">//对齐单位是：4，[0]~[3]</span></span><br><span class="line"><span class="keyword">double</span> weight; <span class="comment">//对齐单位是：8，[8]~[15]</span></span><br><span class="line"><span class="keyword">float</span> height;  <span class="comment">//[16]~[19]</span></span><br><span class="line">&#125;Stu4;                 <span class="comment">//总长度应为对齐单位(8)的倍数:24</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体作为成员：如果一个结构体中同时包含结构体成员，则结构体成员要<strong>从其内部最大元素大小的整数倍地址</strong>开始存储（如struct  a中有struct b，而b中有char,int,double等元素，那么b应该从8(double类型的大小）的整数倍开始存储。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体内嵌结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student5</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;        <span class="comment">//对齐单位是：4，[0]~[3]</span></span><br><span class="line"><span class="keyword">double</span> score;  <span class="comment">//对齐单位是：8，[8]~[15]</span></span><br><span class="line"><span class="keyword">short</span> grade;   <span class="comment">//[16]~[17]</span></span><br><span class="line">Stu4 aa;       <span class="comment">//对齐单位是：8，[24]~[47]</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">2</span>];  <span class="comment">//[48]~[49]</span></span><br><span class="line">&#125;Stu5;             <span class="comment">//总长度应为对齐单位(8)的倍数:56</span></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220726145422755.png" alt="image-20220726145422755"></p><p>2-&gt;4 + 1-&gt;4 + 4 + 4 = 16</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu5</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">      <span class="keyword">char</span> i;   <span class="comment">//对齐单位是：1，[0]~[1]</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span>   </span></span><br><span class="line"><span class="class">      &#123;</span>  </span><br><span class="line">           <span class="keyword">char</span> c;  <span class="comment">//对齐单位是：1，[0]~[1]</span></span><br><span class="line">           <span class="keyword">int</span> j;  <span class="comment">//对齐单位是：4，[4]~[8]</span></span><br><span class="line">      &#125; ss;   <span class="comment">//对齐单位是：4，长度8 [4]~[11]</span></span><br><span class="line">      <span class="keyword">char</span> a;   <span class="comment">//对齐单位是：1，[12]~[13]</span></span><br><span class="line">      <span class="keyword">char</span> b;  </span><br><span class="line">      <span class="keyword">char</span> d;  </span><br><span class="line">      <span class="keyword">char</span> e;  </span><br><span class="line">      <span class="keyword">char</span> f;   <span class="comment">//对齐单位是：1，[16]~[17]</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>1-&gt;4 + 1-&gt;4 + 4 + 5  = 17-&gt; 20 </p><hr><h2 id="联合体-共用体"><a href="#联合体-共用体" class="headerlink" title="联合体/共用体"></a>联合体/共用体</h2><p><a href="https://codeantenna.com/a/V2wGOueu0U">https://codeantenna.com/a/V2wGOueu0U</a></p><p>长度为联合中元类型（如数组，取其类型的数据长度）最大的变量长度(对齐单位)的整数倍，且要大于等于其最大成员所占的存储空间。<strong>大于等于各种成员总长度，且为对齐单位的整数倍。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;         <span class="comment">//对齐单位：4，总长度：4</span></span><br><span class="line"><span class="keyword">double</span> d;      <span class="comment">//对齐单位：8，总长度：8</span></span><br><span class="line">&#125;Foo1;       <span class="comment">//对齐单位：8，最大存储长度8，因此联合体的长度应为对齐单位的倍数：8</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];    <span class="comment">//对齐单位：1，总长度：10</span></span><br><span class="line"><span class="keyword">int</span> a;         <span class="comment">//对齐单位：4，总长度：4</span></span><br><span class="line">&#125;Foo1;                 <span class="comment">//对齐单位：8，最大存储长度10，因此联合体的长度应为对齐单位4的倍数：12</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//联合体</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">foo</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];    <span class="comment">//对齐单位：1，总长度：10</span></span><br><span class="line"><span class="keyword">int</span> a;         <span class="comment">//对齐单位：4，总长度：4</span></span><br><span class="line"><span class="keyword">double</span> d;      <span class="comment">//对齐单位：8，总长度：8</span></span><br><span class="line">&#125;Foo1;                 <span class="comment">//对齐单位：8，最大存储长度10，因此联合体的长度应为对齐单位8的倍数：16</span></span><br></pre></td></tr></table></figure><p>2、联合体内嵌结构体</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student4</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;        <span class="comment">//对齐单位是：4，[0]~[3]</span></span><br><span class="line"><span class="keyword">double</span> weight; <span class="comment">//对齐单位是：8，[8]~[15]</span></span><br><span class="line"><span class="keyword">float</span> height;  <span class="comment">//[16]~[19]</span></span><br><span class="line">&#125;Stu4;                 <span class="comment">//总长度应为对齐单位(8)的倍数:24</span></span><br><span class="line"><span class="comment">//联合体包含结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">foo2</span>&#123;</span></span><br><span class="line">Stu4 bb;       <span class="comment">//对齐单位：8，总长度：24</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];    <span class="comment">//对齐单位：1，总长度：10</span></span><br><span class="line"><span class="keyword">int</span> a;         <span class="comment">//对齐单位：4，总长度：4</span></span><br><span class="line"><span class="keyword">double</span> d;      <span class="comment">//对齐单位：8，总长度：8</span></span><br><span class="line">&#125;Foo2;             <span class="comment">//对齐单位：8，长度应为对齐单位的倍数：24</span></span><br></pre></td></tr></table></figure><p>​    3、结构体内嵌联合体</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体包含联合体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student6</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">10</span>];  <span class="comment">//对齐单位：1，[0]~[9]</span></span><br><span class="line"><span class="keyword">int</span> no[<span class="number">10</span>];    <span class="comment">//对齐单位：4，[12]~[51]</span></span><br><span class="line">Foo2 cc;       <span class="comment">//对齐单位：8，[56]~[79]</span></span><br><span class="line"><span class="keyword">char</span> a;        <span class="comment">//对齐单位：1，[80]</span></span><br><span class="line"><span class="keyword">double</span> a1;     <span class="comment">//对齐单位：8，[88]~[95]</span></span><br><span class="line"><span class="keyword">int</span> a2;        <span class="comment">//对齐单位：4，[96]~[99]</span></span><br><span class="line">&#125;Stu6;             <span class="comment">//对齐单位：8，长度应为对齐单位的倍数：104</span></span><br></pre></td></tr></table></figure><h2 id="枚举enum"><a href="#枚举enum" class="headerlink" title="枚举enum"></a>枚举enum</h2><p>​    1、enum只是定义了一个常量集合，里面没有“元素”，而枚举类型是当做int来存储的，所以枚举类型的sizeof值都为4。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Day</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">    saturday,</span><br><span class="line"></span><br><span class="line">    sunday = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    monday,</span><br><span class="line"></span><br><span class="line">    tuesday,</span><br><span class="line"></span><br><span class="line">    wednesday,</span><br><span class="line"></span><br><span class="line">    thursday,</span><br><span class="line"></span><br><span class="line">    friday</span><br><span class="line"></span><br><span class="line">&#125; workday; <span class="comment">//变量workday的类型为枚举型enum DAY</span></span><br></pre></td></tr></table></figure></h2><hr><h2 id="char数组"><a href="#char数组" class="headerlink" title="char数组"></a>char数组</h2><p>sizeof不是函数，仅仅是一个操作符</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">char</span> char1[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">char</span> char2[<span class="number">9</span>] = &#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">char</span> *char3 = (<span class="keyword">char</span> *)<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">  <span class="built_in">string</span> char4 = <span class="string">&quot;this is a string.this is a string.this is a string.&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char1[] = &#123;&#x27;a&#x27;,&#x27;b&#x27;&#125;        -&gt; sizeof:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(char1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char2[9] = &#123;&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;&#125; -&gt; sizeof:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(char2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char3 \&quot;hello world\&quot;        -&gt; sizeof:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(char3) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char4 string \&quot;this is a string.\&quot;-&gt; sizeof:&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(char4)</span><br><span class="line">       &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char1[10] = &#123;&#x27;a&#x27;,&#x27;b&#x27;&#125;        -&gt; strlen:&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(char1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char2[9] = &#123;&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;&#125; -&gt; strlen:&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(char2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char3 \&quot;hello world\&quot;        -&gt; strlen:&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(char3) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="comment">//    cout&lt;&lt; &quot;char4 -&gt; strlen:&quot;&lt;&lt;strlen(char4)&lt;&lt;endl;       //编译不通过</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char4 string \&quot;this is a string.\&quot;-&gt; length:&quot;</span> &lt;&lt; char4.length()</span><br><span class="line">       &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;char4 string \&quot;this is a string.\&quot;-&gt; size:&quot;</span> &lt;&lt; char4.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">char1[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;        -&gt; <span class="keyword">sizeof</span>:<span class="number">2</span></span><br><span class="line">char2[<span class="number">9</span>] = &#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125; -&gt; <span class="keyword">sizeof</span>:<span class="number">9</span></span><br><span class="line">char3 <span class="string">&quot;hello world&quot;</span>        -&gt; <span class="keyword">sizeof</span>:<span class="number">8</span>  <span class="comment">// 指针！</span></span><br><span class="line">char4 <span class="built_in">string</span> <span class="string">&quot;this is a string.&quot;</span>-&gt; <span class="keyword">sizeof</span>:<span class="number">32</span> <span class="comment">// string 多长都是32</span></span><br><span class="line"></span><br><span class="line">char1[<span class="number">10</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;        -&gt; <span class="built_in">strlen</span>:<span class="number">2</span></span><br><span class="line">char2[<span class="number">9</span>] = &#123;<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>&#125; -&gt; <span class="built_in">strlen</span>:<span class="number">4</span></span><br><span class="line">char3 <span class="string">&quot;hello world&quot;</span>        -&gt; <span class="built_in">strlen</span>:<span class="number">11</span></span><br><span class="line"></span><br><span class="line">char4 <span class="built_in">string</span> <span class="string">&quot;this is a string.&quot;</span>-&gt; length:<span class="number">51</span></span><br><span class="line">char4 <span class="built_in">string</span> <span class="string">&quot;this is a string.&quot;</span>-&gt; size:<span class="number">51</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对于<strong>字符数组</strong>：sizeof得到的是字符数组的容量，strlen是的到的字符的长度<br>对于<strong>字符指针</strong>：sizeof得到的是指针的字节数8，strlen得到的是指针指向的字符的个数</p><p>对于<strong>string</strong>：sizeof得到的变量的字符大小32，而length和size得到的是变量中字符串的长度。</p><hr><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[] = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> m = <span class="built_in">strlen</span>(buffer); <span class="comment">/*m = 5*/</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(buffer); <span class="comment">/*n = 6*/</span></span><br></pre></td></tr></table></figure><p>以遇到的第一个’\0’为结束标志；n = 6，这是因为字符串以’\0’为结束标志，’\0’也需要占用一个字节，所以sizeof测得的结果为6。</p><p>所以char s[8] = “newcoder”是错的 需要s[9]</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 100  (str的容量为100)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(*str) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1    (*str是一个字符数据)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 7    (字符串str的长度)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">&quot;abcdefg&quot;</span>; <span class="comment">//  </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str1) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str1) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">&quot;abcde0fg&quot;</span>; <span class="comment">//  (里面是字符&#x27;0&#x27;,不等于&#x27;\0&#x27;)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">char</span> str3[] = <span class="string">&quot;abcde\0fg&quot;</span>;  </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str3) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 9</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str3) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str4[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str4) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str4) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 7  (数值不确定)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str6[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str6) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str6) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 21  (数值不确定)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str7[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str7) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str7) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str8[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str8) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str8) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str9[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(str9) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">strlen</span>(str9) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>][<span class="number">9</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 90</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dji 08.07</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(T)</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">sizeof</span>(T); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">b</span><span class="params">(T &amp;&amp;)</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">sizeof</span>(T); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sizeof</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">int</span> aa[<span class="number">100</span>] = &#123;i&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = aa;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a(i) &lt;&lt; <span class="built_in">endl</span>  <span class="comment">// 4</span></span><br><span class="line">         &lt;&lt; a(aa) &lt;&lt; <span class="built_in">endl</span> <span class="comment">// 8</span></span><br><span class="line">         &lt;&lt; a(p) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b(i) &lt;&lt; <span class="built_in">endl</span>  <span class="comment">// 4</span></span><br><span class="line">         &lt;&lt; b(aa) &lt;&lt; <span class="built_in">endl</span> <span class="comment">// 400</span></span><br><span class="line">         &lt;&lt; b(p) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(i) &lt;&lt; <span class="built_in">endl</span> <span class="comment">// 4</span></span><br><span class="line">         &lt;&lt; <span class="keyword">sizeof</span>(aa) &lt;&lt; <span class="built_in">endl</span> <span class="comment">// 400</span></span><br><span class="line">         &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">    <span class="keyword">char</span> aaa[<span class="number">15</span>]; </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(aaa) &lt;&lt; <span class="built_in">endl</span> <span class="comment">// 15</span></span><br><span class="line">         &lt;&lt; f(aaa) &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 8</span></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h2><p>计算需要考虑成员变量大小，内存对齐，是否有虚函数，是否有虚继承等</p><ol><li>空类</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B&#123;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">C c;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of a:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(a)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of b:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of c:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(c)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>仅有常规函数、无成员变量类</p><p>扩展1：如果在该类型中添加一个构造函数和析构函数，再求sizeof，得到的结果是多少？<br>答案：还是1。调用构造函数和析构函数只需要知道函数的地址即可，而这些地址只与类型相关，而与类型的实例无关， 编译器也不会因为这两个函数而在实例内添加任何额外的信息。<br>注：不管添加的是构造函数还是析构函数还是其它任何类型的函数，都是这个结果。</p></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello B&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C() &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello C&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">C c;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of a:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(a)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of b:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of c:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(c)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 1 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅包含一般成员函数(即没有<a href="https://so.csdn.net/so/search?q=虚函数&amp;spm=1001.2101.3001.7020">虚函数</a>)，不含成员变量时，运行结果和(一)是一样的，系统也只是为对象创建了1个字节的占位符。因此，我们可以得出结论是，一般成员函数不会对类的大小造成影响。</p><ol><li><p>含有一般成员变量类</p><p>普通的继承就是基类的大小+派生类自身的大小。</p></li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello B&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello C&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">C c;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of a:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(a)&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">// 8 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of b:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of c:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(c)&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">// 24</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次继承的三个类中含有相同数量，相同类型的一般成员变量(不含静态成员变量)。此种情况下，类对象大小=基类对象大小+自身成员大小。A当中三个字符变量3个字节，一个整形变量4个字节，考虑内存对齐因素(默认为4)，A类对象大小为8。B类对象大小为A类对象大小基础上再加8，C类对象大小在B类对象大小基础上再加8。</p><ol><li>含静态成员变量的类</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> Data3;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;B&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello B&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> Data3;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C(<span class="keyword">int</span> x=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;C&quot;</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello C&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> Data1[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> Data2;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> Data3;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a;</span><br><span class="line">B b;</span><br><span class="line">C c;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of a:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(a)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of b:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(b)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 16 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;size of c:&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(c)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 24</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，类对象大小没有因为增加了静态成员而变化。因为静态成员是属于类成员共有的，不单独属于任何一个对象，对静态成员的存储不会选择在某个对象空间，而是存在于堆当中，因此不会对对象的大小造成影响。</p><ol><li>虚函数</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  B b;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(B) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">char</span> b;</span><br><span class="line">  <span class="keyword">double</span> a;</span><br><span class="line">  <span class="keyword">short</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">char</span> a;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">short</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 24</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(B) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8 + 1-&gt;2 + 2 = 12-&gt;16</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了效率问题，编译器(gcc 和 微软)一般会把虚指针放在类的内存空间的最前面的位置，不管虚函数声明的位置。考虑对齐，大小都是 4 +1+1+2 = 8.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; <span class="comment">// 虚基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(B) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(C) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8</span></span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类继承了基类的虚指针，所以大小为4。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(ivec) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="number">3</span>个指针 = <span class="number">24</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">总结一下sizeof的考法</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第五章项目实战与总结</title>
    <link href="https://tsuiwade.github.io/2022/07/17/blog56-nowcoderProject5/"/>
    <id>https://tsuiwade.github.io/2022/07/17/blog56-nowcoderProject5/</id>
    <published>2022-07-17T23:26:16.000Z</published>
    <updated>2022-07-17T23:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-阻塞-非阻塞、同步-异步-网络IO"><a href="#1-阻塞-非阻塞、同步-异步-网络IO" class="headerlink" title="1.阻塞/非阻塞、同步/异步(网络IO)"></a>1.阻塞/非阻塞、同步/异步(网络IO)</h1><blockquote><p>阻塞/非阻塞、同步/异步(网络IO)  </p></blockquote><p>数据就绪：根据系统IO操作的就绪状态</p><ul><li><p>阻塞</p></li><li><p>非阻塞</p></li></ul><p>数据读写：根据应用程序和内核的交互方式</p><ul><li><p>同步</p></li><li><p>异步</p></li></ul><p>陈硕：在处理 IO 的时候，阻塞和非阻塞都是同步 IO，只有使用了特殊的 API 才是异步 IO。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717233456139.png" alt="image-20220717233456139"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717234840065.png" alt="image-20220717234840065"></p><p>一个典型的网络IO接口调用，分为两个阶段，分别是“数据就绪” 和 “数据读写”，数据就绪阶段分为阻塞和非阻塞，表现得结果就是，阻塞当前线程或是直接返回。</p><p><strong>同步</strong>表示A向B请求调用一个网络IO接口时（或者调用某个业务逻辑API接口时），数据的读写都是由请求方A自己来完成的（不管是阻塞还是非阻塞）；<strong>异步</strong>表示A向B请求调用一个网络IO接口时（或者调用某个业务逻辑API接口时），向B传入请求的事件以及事件发生时通知的方式，A就可以处理其它逻辑了，当B监听到事件处理完成后，会用事先约定好的通知方式，通知A处理结果。  </p><h1 id="5-2-Unix-Linux上的5种IO模型"><a href="#5-2-Unix-Linux上的5种IO模型" class="headerlink" title="5.2 Unix/Linux上的5种IO模型"></a>5.2 Unix/Linux上的5种IO模型</h1><h3 id="a-阻塞-blocking-（BIO"><a href="#a-阻塞-blocking-（BIO" class="headerlink" title="a.阻塞 blocking  （BIO)"></a>a.阻塞 blocking  （BIO)</h3><p>调用者调用了某个函数，等待这个函数返回，期间什么也不做，不停的去检查这个函数有没有返回，必须等这个函数返回才能进行下一步动作。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717235855889.png" alt="image-20220717235855889"></p><h3 id="b-非阻塞-non-blocking（NIO）"><a href="#b-非阻塞-non-blocking（NIO）" class="headerlink" title="b.非阻塞 non-blocking（NIO）"></a>b.非阻塞 non-blocking（NIO）</h3><p>非阻塞等待，每隔一段时间就去检测IO事件是否就绪。没有就绪就可以做其他事。非阻塞I/O执行系统调用总是立即返回，不管事件是否已经发生，若事件没有发生，则返回-1，此时可以根据 errno 区分这两种情况，对于accept，recv 和 send，事件未发生时，errno 通常被设置成 EAGAIN。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718000028084.png" alt="image-20220718000028084"></p><h3 id="c-IO复用（IO-multiplexing）"><a href="#c-IO复用（IO-multiplexing）" class="headerlink" title="c.IO复用（IO multiplexing）"></a>c.IO复用（IO multiplexing）</h3><p>Linux 用 select/poll/epoll 函数实现 IO 复用模型，这些函数也会使进程阻塞，但是和阻塞IO所不同的是这些函数可以同时阻塞多个IO操作。而且可以同时对多个读操作、写操作的IO函数进行检测。直到有数    据可读或可写时，才真正调用IO操作函数  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718000243045.png" alt="image-20220718000243045"></p><h3 id="d-信号驱动（signal-driven）"><a href="#d-信号驱动（signal-driven）" class="headerlink" title="d.信号驱动（signal-driven）"></a>d.信号驱动（signal-driven）</h3><p>Linux 用套接口进行信号驱动 IO，安装一个信号处理函数，进程继续运行并不阻塞，当IO事件就绪，进程收到SIGIO 信号，然后处理 IO 事件。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718000404751.png" alt="image-20220718000404751"></p><p>内核在第一个阶段是异步，在第二个阶段是同步；与非阻塞IO的区别在于它提供了消息通知机制，不需要用户进程不断的轮询检查，减少了系统API的调用次数，提高了效率。  </p><h3 id="e-异步（asynchronous）"><a href="#e-异步（asynchronous）" class="headerlink" title="e.异步（asynchronous）"></a>e.异步（asynchronous）</h3><p>Linux中，可以调用 aio_read 函数告诉内核描述字缓冲区指针和缓冲区的大小、文件偏移及通知的方式，然后立即返回，当内核将数据拷贝到缓冲区后，再通知应用程序  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718000534332.png" alt="image-20220718000534332"></p><h1 id="5-3-Web服务器简介及Http协议"><a href="#5-3-Web服务器简介及Http协议" class="headerlink" title="5.3 Web服务器简介及Http协议"></a>5.3 Web服务器简介及Http协议</h1><p>一个 Web Server 就是一个服务器软件（程序），或者是运行这个服务器软件的硬件（计算机）。其主要功能是通过 HTTP 协议与客户端（通常是浏览器（Browser））进行通信，来接收，存储，处理来自客户端的 HTTP 请求，并对其请求做出 HTTP 响应，返回给客户端其请求的内容（文件、网页等）或返回一个 Error 信息  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718001127832.png" alt="image-20220718001127832"></p><p>通常用户使用 Web 浏览器与相应服务器进行通信。在浏览器中键入“域名”或“IP地址:端口号”，浏览器则先将你的域名解析成相应的 IP 地址或者直接根据你的IP地址向对应的 Web 服务器发送一个 HTTP 请求。这一过程首先要通过 TCP 协议的三次握手建立与目标 Web 服务器的连接，然后 HTTP 协议生成针对目标 Web 服务器的 HTTP 请求报文，通过 TCP、IP 等协议发送到目标 Web 服务器上。  </p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的CS的请求 - 响应协议，它通常运行在TCP 之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以 ASCII 形式给出；而消息内容则具有一个类似 MIME 的格式。HTTP是万维网的数据通信的基础。</p><p>HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering TaskForce，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。  </p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>HTTP 是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如 HTML 文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p><p>尽管 TCP/IP 协议是互联网上最流行的应用，HTTP 协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP 假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在 TCP/IP 协议族使用 TCP 作为其传输层。</p><p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口（默认是80端口）的 TCP 连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如”HTTP/1.1 200 OK”，以及返回的内容，如请求的文件、错误消息、或者其它信息。  </p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>HTTP 协议定义 Web 客户端如何从 Web 服务器请求 Web 页面，以及服务器如何把 Web 页面传送给客户端。HTTP 协议采用了<strong>请求/响应模型</strong>。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。  </p><p>以下是 HTTP 请求/响应的步骤：</p><ol><li><p>客户端连接到 Web 服务器<br>一个HTTP客户端，通常是浏览器，与 Web 服务器的 HTTP 端口（默认为 80 ）建立一个 TCP 套接字连接。例如，<a href="http://www.baidu.com。（URL）">http://www.baidu.com。（URL）</a></p></li><li><p>发送 HTTP 请求<br>通过 TCP 套接字，客户端向 Web 服务器发送一个文本的请求报文，一个<strong>请求报文</strong>由<strong>请求行、请求头部、空行和请求数据 4 部分</strong>组成。</p></li><li><p>服务器接受请求并返回 HTTP 响应<br>Web 服务器解析请求，定位请求资源。服务器将资源复本写到 TCP 套接字，由客户端读取。一个<strong>响应</strong>由<strong>状态行、响应头部、空行和响应数据 4 部分</strong>组成。</p></li><li><p>释放连接 TCP 连接<br>若 connection 模式为 close，则服务器主动关闭 TCP连接，客户端被动关闭连接，释放 TCP 连接；若connection 模式为 keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p></li><li><p>客户端浏览器解析 HTML 内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应<br>头告知以下为若干字节的 HTML 文档和文档的字符集。客户端浏览器读取响应数据 HTML，根据<br>HTML 的语法对其进行格式化，并在浏览器窗口中显示。</p></li></ol><p>例如：<strong>在浏览器地址栏键入URL</strong>，按下回车之后会经历以下流程：</p><ol><li>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</li><li>解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立 TCP 连接;</li><li>浏览器发出读取文件（ URL 中域名后面部分对应的文件）的 HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</li><li>服务器对浏览器请求作出响应，并把对应的 HTML 文本发送给浏览器;</li><li>释放 TCP 连接;</li><li>浏览器将该 HTML 文本并显示内容。</li></ol><p>HTTP 协议是基于 TCP/IP 协议之上的应用层协议，基于 请求-响应 的模式。HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718095202692.png" alt="image-20220718095202692"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718095153165.png" alt="image-20220718095153165"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718095213622.png" alt="image-20220718095213622"></p><h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><p>HTTP/1.1 协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源：  </p><ol><li>GET：向指定的资源发出“显示”请求。使用 GET 方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在 Web Application 中。其中一个原因是 GET 可能会被网络蜘蛛等随意访问。</li><li>HEAD：与 GET 方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li><li>POST：向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</li><li>PUT：向指定资源位置上传其最新内容。</li><li>DELETE：请求服务器删除 Request-URI 所标识的资源。</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li><li>OPTIONS：这个方法可使服务器传回该资源所支持的所有 HTTP 请求方法。用’*’来代替资源名称，向 Web 服务器发送 OPTIONS 请求，可以测试服务器功能是否正常运作。</li><li>CONNECT：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的 HTTP 代理服务器）。  </li></ol><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>所有HTTP响应的第一行都是状态行，依次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。</p><p>状态代码的第一个数字代表当前响应的类型：</p><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误  </li></ul><p>虽然 RFC 2616 中已经推荐了描述状态的短语，例如”200 OK”，”404 Not Found”，但是WEB开发者仍然能够自行决定采用何种短语，用以显示本地化的状态描述或者自定义信息。  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718102726568.png" alt="image-20220718102726568"></p><hr><h1 id="5-4-服务器编程基本框架"><a href="#5-4-服务器编程基本框架" class="headerlink" title="5.4 服务器编程基本框架"></a>5.4 服务器编程基本框架</h1><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718103155738.png" alt="image-20220718103155738"></p><div class="table-container"><table><thead><tr><th>模块</th><th>功能</th></tr></thead><tbody><tr><td>IO处理单元</td><td>处理客户连接，读写网络数据</td></tr><tr><td>逻辑单元</td><td>业务进程或线程</td></tr><tr><td>网络存储单元</td><td>数据库、文件或缓存</td></tr><tr><td>请求队列</td><td>各单元之间的通信方式</td></tr></tbody></table></div><p><strong>I/O 处理单元</strong>是服务器管理客户连接的模块。它通常要完成以下工作：等待并接受新的客户连接，接收客户数据，将服务器响应数据返回给客户端。但是数据的收发不一定在 I/O 处理单元中执行，也可能在逻辑单元中执行，具体在何处执行取决于事件处理模式。</p><p>一个<strong>逻辑单元</strong>通常是一个进程或线程。它分析并处理客户数据，然后将结果传递给 I/O 处理单元或者直接发送给客户端（具体使用哪种方式取决于事件处理模式）。服务器通常拥有多个逻辑单元，以实现对多个客户任务的并发处理。</p><p>网络存储单元可以是数据库、缓存和文件，但不是必须的。</p><p><strong>请求队列</strong>是各单元之间的通信方式的抽象。I/O 处理单元接收到客户请求时，需要以某种方式通知一个逻辑单元来处理该请求。同样，多个逻辑单元同时访问一个存储单元时，也需要采用某种机制来协调处理竞态条件。请求队列通常被实现为池的一部分。  </p><h3 id="两种高效的事件处理模式"><a href="#两种高效的事件处理模式" class="headerlink" title="两种高效的事件处理模式"></a>两种高效的事件处理模式</h3><p>服务器程序通常需要处理三类事件：<strong>I/O 事件、信号及定时事件</strong>。有两种高效的事件处理模式：Reactor和 Proactor，<strong>同步 I/O 模型</strong>通常用于实现 Reactor 模式，<strong>异步 I/O 模型</strong>通常用于实现 Proactor 模式。  </p><h4 id="Reactor模式-（反应堆）"><a href="#Reactor模式-（反应堆）" class="headerlink" title="Reactor模式  （反应堆）"></a>Reactor模式  （反应堆）</h4><p>要求主线程（I/O处理单元）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元），将 socket 可读可写事件放入请求队列，交给工作线程处理。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。</p><p>使用同步 I/O（以 epoll_wait 为例）实现的 Reactor 模式的工作流程是：</p><ol><li>主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。</li><li>主线程调用 epoll_wait 等待 socket 上有数据可读。</li><li>当 socket 上有数据可读时， epoll_wait 通知主线程。主线程则将 socket 可读事件放入请求队列。</li><li>睡眠在请求队列上的某个工作线程被唤醒，它从 socket 读取数据，并处理客户请求，然后往 epoll内核事件表中注册该 socket 上的写就绪事件。</li><li>当主线程调用 epoll_wait 等待 socket 可写。</li><li>当 socket 可写时，epoll_wait 通知主线程。主线程将 socket 可写事件放入请求队列。</li><li>睡眠在请求队列上的某个工作线程被唤醒，它往 socket 上写入服务器处理客户请求的结果。  </li></ol><p>Reactor 模式的工作流程：  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718104011617.png" alt="image-20220718104011617"></p><h4 id="Proactor模式"><a href="#Proactor模式" class="headerlink" title="Proactor模式"></a>Proactor模式</h4><p>Proactor 模式将所有 I/O 操作都交给主线程和内核来处理（进行读、写），工作线程仅仅负责业务逻辑。使用<strong>异步</strong> I/O 模型（以 aio_read 和 aio_write 为例）实现的 Proactor 模式的工作流程是：</p><ol><li>主线程调用 aio_read 函数向内核注册 socket 上的读完成事件，并告诉内核用户读缓冲区的位置，以及读操作完成时如何通知应用程序（这里以信号为例）。</li><li>主线程继续处理其他逻辑。</li><li>当 socket 上的数据被读入用户缓冲区后，内核将向应用程序发送一个信号，以通知应用程序数据已经可用。</li><li>应用程序预先定义好的信号处理函数选择一个工作线程来处理客户请求。工作线程处理完客户请求后，调用 aio_write 函数向内核注册 socket 上的写完成事件，并告诉内核用户写缓冲区的位置，以及写操作完成时如何通知应用程序。</li><li>主线程继续处理其他逻辑。</li><li>当用户缓冲区的数据被写入 socket 之后，内核将向应用程序发送一个信号，以通知应用程序数据已经发送完毕。</li><li>应用程序预先定义好的信号处理函数选择一个工作线程来做善后处理，比如决定是否关闭 socket。</li></ol><p>Proactor 模式的工作流程：  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718110332425.png" alt="image-20220718110332425"></p><h2 id="模拟Proactor模式"><a href="#模拟Proactor模式" class="headerlink" title="模拟Proactor模式"></a>模拟Proactor模式</h2><p>使用同步 I/O 方式模拟出 Proactor 模式。原理是：主线程执行数据读写操作，读写完成之后，主线程向工作线程通知这一”完成事件“。那么从工作线程的角度来看，它们就直接获得了数据读写的结果，接下来要做的只是对读写的结果进行逻辑处理。</p><p>使用同步 I/O 模型（以 epoll_wait为例）模拟出的 Proactor 模式的工作流程如下：</p><ol><li>主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。</li><li>主线程调用 epoll_wait 等待 socket 上有数据可读。</li><li>当 socket 上有数据可读时，epoll_wait 通知主线程。主线程从 socket 循环读取数据，直到没有更多数据可读，然后将读取到的数据封装成一个请求对象并插入请求队列。</li><li>睡眠在请求队列上的某个工作线程被唤醒，它获得请求对象并处理客户请求，然后往 epoll 内核事件表中注册 socket 上的写就绪事件。</li><li>主线程调用 epoll_wait 等待 socket 可写。</li><li>当 socket 可写时，epoll_wait 通知主线程。主线程往 socket 上写入服务器处理客户请求的结果。</li></ol><p>同步 I/O 模拟 Proactor 模式的工作流程：  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718110517234.png" alt="image-20220718110517234"></p><hr><h1 id="5-5线程池"><a href="#5-5线程池" class="headerlink" title="5.5线程池"></a>5.5线程池</h1><p>线程池是由服务器预先创建的一组子线程，线程池中的线程数量应该和 CPU 数量差不多。线程池中的所有子线程都运行着相同的代码。当有新的任务到来时，主线程将通过某种方式选择线程池中的某一个子线程来为之服务。相比与动态的创建子线程，选择一个已经存在的子线程的代价显然要小得多。至于主线程选择哪个子线程来为新任务服务，则有多种方式：  </p><ul><li>主线程使用某种算法来主动选择子线程。最简单、最常用的算法是随机算法和 Round Robin（轮流选取）算法，但更优秀、更智能的算法将使任务在各个工作线程中更均匀地分配，从而减轻服务器的整体压力。</li><li>主线程和所有子线程通过一个共享的工作队列来同步，子线程都睡眠在该工作队列上。当有新的任务到来时，主线程将任务添加到工作队列中。这将唤醒正在等待任务的子线程，不过只有一个子线程将获得新任务的”接管权“，它可以从工作队列中取出任务并执行之，而其他子线程将继续睡眠在工作队列上。  </li></ul><p>线程池的一般模型为：  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220718110732722.png" alt="image-20220718110732722"></p><blockquote><p>线程池中的线程数量最直接的限制因素是中央处理器(CPU)的处理器(processors/cores)的数量N ：如果你的CPU是4-cores的，对于CPU密集型的任务(如视频剪辑等消耗CPU计算资源的任务)来说，那线程池中的线程数量最好也设置为4（或者+1防止其他因素造成的线程阻塞）；对于IO密集型的任务，一般要多于CPU的核数，因为线程间竞争的不是CPU的计算资源而是IO，IO的处理一般较慢，多于cores数的线程将为CPU争取更多的任务，不至在线程处理IO的过程造成CPU空闲导致资源浪费。  </p></blockquote><ul><li>空间换时间，浪费服务器的硬件资源，换取运行效率。</li><li>池是一组资源的集合，这组资源在服务器启动之初就被完全创建好并初始化，这称为静态资源。</li><li>当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配。</li><li>当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。  </li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// locker.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOCKER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCKER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程同步机制封装类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">locker</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    locker() &#123;</span><br><span class="line">        <span class="keyword">if</span>(pthread_mutex_init(&amp;m_mutex, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~locker() &#123;</span><br><span class="line">        pthread_mutex_destroy(&amp;m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pthread_mutex_lock(&amp;m_mutex) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pthread_mutex_unlock(&amp;m_mutex) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">pthread_mutex_t</span> *<span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">pthread_mutex_t</span> m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件变量类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cond</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    cond()&#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_cond_init(&amp;m_cond, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~cond() &#123;</span><br><span class="line">        pthread_cond_destroy(&amp;m_cond);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wait</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *m_mutex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        ret = pthread_cond_wait(&amp;m_cond, m_mutex);</span><br><span class="line">        <span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">timewait</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *m_mutex, struct timespec t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        ret = pthread_cond_timedwait(&amp;m_cond, m_mutex, &amp;t);</span><br><span class="line">        <span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pthread_cond_signal(&amp;m_cond) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">broadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pthread_cond_broadcast(&amp;m_cond) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">pthread_cond_t</span> m_cond;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号量类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sem</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    sem() &#123;</span><br><span class="line">        <span class="keyword">if</span>( sem_init( &amp;m_sem, <span class="number">0</span>, <span class="number">0</span> ) != <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sem(<span class="keyword">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">if</span>( sem_init( &amp;m_sem, <span class="number">0</span>, num ) != <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ~sem() &#123;</span><br><span class="line">        sem_destroy( &amp;m_sem );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待信号量</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sem_wait( &amp;m_sem ) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加信号量</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sem_post( &amp;m_sem ) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">sem_t</span> m_sem;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// threadpool.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> THREADPOOL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREADPOOL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;locker.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程池类，将它定义为模板类是为了代码复用，模板参数T是任务类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadpool</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*thread_number是线程池中线程的数量，max_requests是请求队列中最多允许的、等待处理的请求的数量*/</span></span><br><span class="line">    threadpool(<span class="keyword">int</span> thread_number = <span class="number">8</span>, <span class="keyword">int</span> max_requests = <span class="number">10000</span>);</span><br><span class="line">    ~threadpool();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">append</span><span class="params">(T* request)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*工作线程运行的函数，它不断从工作队列中取出任务并执行之*/</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">worker</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 线程的数量</span></span><br><span class="line">    <span class="keyword">int</span> m_thread_number;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 描述线程池的数组，大小为m_thread_number    </span></span><br><span class="line">    <span class="keyword">pthread_t</span> * m_threads;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求队列中最多允许的、等待处理的请求的数量  </span></span><br><span class="line">    <span class="keyword">int</span> m_max_requests; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 请求队列</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt; T* &gt; m_workqueue;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保护请求队列的互斥锁</span></span><br><span class="line">    locker m_queuelocker;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否有任务需要处理</span></span><br><span class="line">    sem m_queuestat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否结束线程          </span></span><br><span class="line">    <span class="keyword">bool</span> m_stop;                    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line">threadpool&lt; T &gt;::threadpool(<span class="keyword">int</span> thread_number, <span class="keyword">int</span> max_requests) : </span><br><span class="line">        m_thread_number(thread_number), m_max_requests(max_requests), </span><br><span class="line">        m_stop(<span class="literal">false</span>), m_threads(<span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((thread_number &lt;= <span class="number">0</span>) || (max_requests &lt;= <span class="number">0</span>) ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_threads = <span class="keyword">new</span> <span class="keyword">pthread_t</span>[m_thread_number];</span><br><span class="line">    <span class="keyword">if</span>(!m_threads) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建thread_number 个线程，并将他们设置为脱离线程。</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; thread_number; ++i ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;create the %dth thread\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">if</span>(pthread_create(m_threads + i, <span class="literal">NULL</span>, worker, <span class="keyword">this</span> ) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>( pthread_detach( m_threads[i] ) ) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line">threadpool&lt; T &gt;::~threadpool() &#123;</span><br><span class="line">    <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">    m_stop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">bool</span> threadpool&lt; T &gt;::append( T* request )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 操作工作队列时一定要加锁，因为它被所有线程共享。</span></span><br><span class="line">    m_queuelocker.lock();</span><br><span class="line">    <span class="keyword">if</span> ( m_workqueue.size() &gt; m_max_requests ) &#123;</span><br><span class="line">        m_queuelocker.unlock();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_workqueue.push_back(request);</span><br><span class="line">    m_queuelocker.unlock();</span><br><span class="line">    m_queuestat.post();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">void</span>* threadpool&lt; T &gt;::worker( <span class="keyword">void</span>* arg )</span><br><span class="line">&#123;</span><br><span class="line">    threadpool* pool = ( threadpool* )arg;</span><br><span class="line">    pool-&gt;run();</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">void</span> threadpool&lt; T &gt;::run() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!m_stop) &#123;</span><br><span class="line">        m_queuestat.wait();</span><br><span class="line">        m_queuelocker.lock();</span><br><span class="line">        <span class="keyword">if</span> ( m_workqueue.empty() ) &#123;</span><br><span class="line">            m_queuelocker.unlock();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T* request = m_workqueue.front();</span><br><span class="line">        m_workqueue.pop_front();</span><br><span class="line">        m_queuelocker.unlock();</span><br><span class="line">        <span class="keyword">if</span> ( !request ) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        request-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;locker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;threadpool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;http_conn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_FD 65536   <span class="comment">// 最大的文件描述符个数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_EVENT_NUMBER 10000  <span class="comment">// 监听的最大的事件数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">addfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> one_shot )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">removefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addsig</span><span class="params">(<span class="keyword">int</span> sig, <span class="keyword">void</span>( handler )(<span class="keyword">int</span>))</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>( &amp;sa, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>( sa ) );</span><br><span class="line">    sa.sa_handler = handler;</span><br><span class="line">    sigfillset( &amp;sa.sa_mask );</span><br><span class="line">    assert( sigaction( sig, &amp;sa, <span class="literal">NULL</span> ) != <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[] )</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s port_number\n&quot;</span>, basename(argv[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取端口号</span></span><br><span class="line">    <span class="keyword">int</span> port = atoi( argv[<span class="number">1</span>] );</span><br><span class="line">    <span class="comment">// 对SIGPIE信号进行处理</span></span><br><span class="line">    addsig( SIGPIPE, SIG_IGN );</span><br><span class="line"></span><br><span class="line">    threadpool&lt; http_conn &gt;* pool = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pool = <span class="keyword">new</span> threadpool&lt;http_conn&gt;;</span><br><span class="line">    &#125; <span class="keyword">catch</span>( ... ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http_conn* users = <span class="keyword">new</span> http_conn[ MAX_FD ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> listenfd = socket( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_port = htons( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 端口复用</span></span><br><span class="line">    <span class="keyword">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    setsockopt( listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="keyword">sizeof</span>( reuse ) );</span><br><span class="line">    ret = bind( listenfd, ( struct sockaddr* )&amp;address, <span class="keyword">sizeof</span>( address ) );</span><br><span class="line">    ret = listen( listenfd, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建epoll对象，和事件数组，添加</span></span><br><span class="line">    epoll_event events[ MAX_EVENT_NUMBER ];</span><br><span class="line">    <span class="keyword">int</span> epollfd = epoll_create( <span class="number">5</span> );</span><br><span class="line">    <span class="comment">// 添加到epoll对象中</span></span><br><span class="line">    addfd( epollfd, listenfd, <span class="literal">false</span> );</span><br><span class="line">    http_conn::m_epollfd = epollfd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> number = epoll_wait( epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span> );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( ( number &lt; <span class="number">0</span> ) &amp;&amp; ( errno != EINTR ) ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;epoll failure\n&quot;</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number; i++ ) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>( sockfd == listenfd ) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_address</span>;</span></span><br><span class="line">                <span class="keyword">socklen_t</span> client_addrlength = <span class="keyword">sizeof</span>( client_address );</span><br><span class="line">                <span class="keyword">int</span> connfd = accept( listenfd, ( struct sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>( http_conn::m_user_count &gt;= MAX_FD ) &#123;</span><br><span class="line">                    <span class="comment">// 目前 连接数满了， 给客户端写一个服务器正忙的信息</span></span><br><span class="line">                    close(connfd);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将新的客户的数据初始化，放到数组里</span></span><br><span class="line">                users[connfd].init( connfd, client_address);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>( events[i].events &amp; ( EPOLLRDHUP | EPOLLHUP | EPOLLERR ) ) &#123;</span><br><span class="line">                <span class="comment">// 对方异常断开</span></span><br><span class="line">                users[sockfd].close_conn();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN) &#123;</span><br><span class="line">               <span class="comment">// 一次性把所有数据都读完</span></span><br><span class="line">                <span class="keyword">if</span>(users[sockfd].read()) &#123;</span><br><span class="line">                    pool-&gt;append(users + sockfd);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    users[sockfd].close_conn();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="keyword">else</span> <span class="keyword">if</span>( events[i].events &amp; EPOLLOUT ) &#123;</span><br><span class="line">                <span class="comment">// 一次性写完所有数据</span></span><br><span class="line">                <span class="keyword">if</span>( !users[sockfd].write() ) &#123;</span><br><span class="line">                    users[sockfd].close_conn();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close( epollfd );</span><br><span class="line">    close( listenfd );</span><br><span class="line">    <span class="keyword">delete</span> [] users;</span><br><span class="line">    <span class="keyword">delete</span> pool;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http_conn.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HTTPCONNECTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HTTPCONNECTION_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;locker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">http_conn</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> FILENAME_LEN = <span class="number">200</span>;        <span class="comment">// 文件名的最大长度</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> READ_BUFFER_SIZE = <span class="number">2048</span>;   <span class="comment">// 读缓冲区的大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> WRITE_BUFFER_SIZE = <span class="number">1024</span>;  <span class="comment">// 写缓冲区的大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// HTTP请求方法，这里只支持GET</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">METHOD</span> &#123;</span>GET = <span class="number">0</span>, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        解析客户端请求时，主状态机的状态</span></span><br><span class="line"><span class="comment">        CHECK_STATE_REQUESTLINE:当前正在分析请求行</span></span><br><span class="line"><span class="comment">        CHECK_STATE_HEADER:当前正在分析头部字段</span></span><br><span class="line"><span class="comment">        CHECK_STATE_CONTENT:当前正在解析请求体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CHECK_STATE</span> &#123;</span> CHECK_STATE_REQUESTLINE = <span class="number">0</span>, CHECK_STATE_HEADER, CHECK_STATE_CONTENT &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        服务器处理HTTP请求的可能结果，报文解析的结果</span></span><br><span class="line"><span class="comment">        NO_REQUEST          :   请求不完整，需要继续读取客户数据</span></span><br><span class="line"><span class="comment">        GET_REQUEST         :   表示获得了一个完成的客户请求</span></span><br><span class="line"><span class="comment">        BAD_REQUEST         :   表示客户请求语法错误</span></span><br><span class="line"><span class="comment">        NO_RESOURCE         :   表示服务器没有资源</span></span><br><span class="line"><span class="comment">        FORBIDDEN_REQUEST   :   表示客户对资源没有足够的访问权限</span></span><br><span class="line"><span class="comment">        FILE_REQUEST        :   文件请求,获取文件成功</span></span><br><span class="line"><span class="comment">        INTERNAL_ERROR      :   表示服务器内部错误</span></span><br><span class="line"><span class="comment">        CLOSED_CONNECTION   :   表示客户端已经关闭连接了</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">HTTP_CODE</span> &#123;</span> NO_REQUEST, GET_REQUEST, BAD_REQUEST, NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST, INTERNAL_ERROR, CLOSED_CONNECTION &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从状态机的三种可能状态，即行的读取状态，分别表示</span></span><br><span class="line">    <span class="comment">// 1.读取到一个完整的行 2.行出错 3.行数据尚且不完整</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">LINE_STATUS</span> &#123;</span> LINE_OK = <span class="number">0</span>, LINE_BAD, LINE_OPEN &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    http_conn()&#123;&#125;</span><br><span class="line">    ~http_conn()&#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; addr)</span></span>; <span class="comment">// 初始化新接受的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close_conn</span><span class="params">()</span></span>;  <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>; <span class="comment">// 处理客户端请求</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">read</span><span class="params">()</span></span>;<span class="comment">// 非阻塞读</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">write</span><span class="params">()</span></span>;<span class="comment">// 非阻塞写</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;    <span class="comment">// 初始化连接</span></span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">process_read</span><span class="params">()</span></span>;    <span class="comment">// 解析HTTP请求</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">process_write</span><span class="params">( HTTP_CODE ret )</span></span>;    <span class="comment">// 填充HTTP应答</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这一组函数被process_read调用以分析HTTP请求</span></span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">parse_request_line</span><span class="params">( <span class="keyword">char</span>* text )</span></span>;</span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">parse_headers</span><span class="params">( <span class="keyword">char</span>* text )</span></span>;</span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">parse_content</span><span class="params">( <span class="keyword">char</span>* text )</span></span>;</span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">do_request</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">char</span>* <span class="title">get_line</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_read_buf + m_start_line; &#125;</span><br><span class="line">    <span class="function">LINE_STATUS <span class="title">parse_line</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这一组函数被process_write调用以填充HTTP应答。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unmap</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_response</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_content</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* content )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_content_type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_status_line</span><span class="params">( <span class="keyword">int</span> status, <span class="keyword">const</span> <span class="keyword">char</span>* title )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_headers</span><span class="params">( <span class="keyword">int</span> content_length )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_content_length</span><span class="params">( <span class="keyword">int</span> content_length )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_linger</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">add_blank_line</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_epollfd;       <span class="comment">// 所有socket上的事件都被注册到同一个epoll内核事件中，所以设置成静态的</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_user_count;    <span class="comment">// 统计用户的数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_sockfd;           <span class="comment">// 该HTTP连接的socket和对方的socket地址</span></span><br><span class="line">    sockaddr_in m_address;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> m_read_buf[ READ_BUFFER_SIZE ];    <span class="comment">// 读缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> m_read_idx;                         <span class="comment">// 标识读缓冲区中已经读入的客户端数据的最后一个字节的下一个位置</span></span><br><span class="line">    <span class="keyword">int</span> m_checked_idx;                      <span class="comment">// 当前正在分析的字符在读缓冲区中的位置</span></span><br><span class="line">    <span class="keyword">int</span> m_start_line;                       <span class="comment">// 当前正在解析的行的起始位置</span></span><br><span class="line"></span><br><span class="line">    CHECK_STATE m_check_state;              <span class="comment">// 主状态机当前所处的状态</span></span><br><span class="line">    METHOD m_method;                        <span class="comment">// 请求方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> m_real_file[ FILENAME_LEN ];       <span class="comment">// 客户请求的目标文件的完整路径，其内容等于 doc_root + m_url, doc_root是网站根目录</span></span><br><span class="line">    <span class="keyword">char</span>* m_url;                            <span class="comment">// 客户请求的目标文件的文件名</span></span><br><span class="line">    <span class="keyword">char</span>* m_version;                        <span class="comment">// HTTP协议版本号，我们仅支持HTTP1.1</span></span><br><span class="line">    <span class="keyword">char</span>* m_host;                           <span class="comment">// 主机名</span></span><br><span class="line">    <span class="keyword">int</span> m_content_length;                   <span class="comment">// HTTP请求的消息总长度</span></span><br><span class="line">    <span class="keyword">bool</span> m_linger;                          <span class="comment">// HTTP请求是否要求保持连接</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> m_write_buf[ WRITE_BUFFER_SIZE ];  <span class="comment">// 写缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> m_write_idx;                        <span class="comment">// 写缓冲区中待发送的字节数</span></span><br><span class="line">    <span class="keyword">char</span>* m_file_address;                   <span class="comment">// 客户请求的目标文件被mmap到内存中的起始位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">m_file_stat</span>;</span>                <span class="comment">// 目标文件的状态。通过它我们可以判断文件是否存在、是否为目录、是否可读，并获取文件大小等信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">m_iv</span>[2];</span>                   <span class="comment">// 我们将采用writev来执行写操作，所以定义下面两个成员，其中m_iv_count表示被写内存块的数量。</span></span><br><span class="line">    <span class="keyword">int</span> m_iv_count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bytes_to_send;              <span class="comment">// 将要发送的数据的字节数</span></span><br><span class="line">    <span class="keyword">int</span> bytes_have_send;            <span class="comment">// 已经发送的字节数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http_conn.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;http_conn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义HTTP响应的一些状态信息</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ok_200_title = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_400_title = <span class="string">&quot;Bad Request&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_400_form = <span class="string">&quot;Your request has bad syntax or is inherently impossible to satisfy.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_403_title = <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_403_form = <span class="string">&quot;You do not have permission to get file from this server.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_404_title = <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_404_form = <span class="string">&quot;The requested file was not found on this server.\n&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_500_title = <span class="string">&quot;Internal Error&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* error_500_form = <span class="string">&quot;There was an unusual problem serving the requested file.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站的根目录</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* doc_root = <span class="string">&quot;/home/nowcoder/webserver/resources&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="keyword">int</span> fd )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old_option = fcntl( fd, F_GETFL );</span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    fcntl( fd, F_SETFL, new_option );</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向epoll中添加需要监听的文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">bool</span> one_shot )</span> </span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLRDHUP;</span><br><span class="line">    <span class="keyword">if</span>(one_shot) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 防止同一个通信被不同的线程处理</span></span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    epoll_ctl(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line">    <span class="comment">// 设置文件描述符非阻塞</span></span><br><span class="line">    setnonblocking(fd);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从epoll中移除监听的文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span> </span>&#123;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, <span class="number">0</span> );</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文件描述符，重置socket上的EPOLLONESHOT事件，以确保下一次可读时，EPOLLIN事件能被触发</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modfd</span><span class="params">(<span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">int</span> ev)</span> </span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_MOD, fd, &amp;event );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的客户数</span></span><br><span class="line"><span class="keyword">int</span> http_conn::m_user_count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 所有socket上的事件都被注册到同一个epoll内核事件中，所以设置成静态的</span></span><br><span class="line"><span class="keyword">int</span> http_conn::m_epollfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::close_conn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_sockfd != <span class="number">-1</span>) &#123;</span><br><span class="line">        removefd(m_epollfd, m_sockfd);</span><br><span class="line">        m_sockfd = <span class="number">-1</span>;</span><br><span class="line">        m_user_count--; <span class="comment">// 关闭一个连接，将客户总数量-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接,外部调用初始化套接字地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::init</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; addr)</span></span>&#123;</span><br><span class="line">    m_sockfd = sockfd;</span><br><span class="line">    m_address = addr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 端口复用</span></span><br><span class="line">    <span class="keyword">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    setsockopt( m_sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="keyword">sizeof</span>( reuse ) );</span><br><span class="line">    addfd( m_epollfd, sockfd, <span class="literal">true</span> );</span><br><span class="line">    m_user_count++;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    bytes_to_send = <span class="number">0</span>;</span><br><span class="line">    bytes_have_send = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m_check_state = CHECK_STATE_REQUESTLINE;    <span class="comment">// 初始状态为检查请求行</span></span><br><span class="line">    m_linger = <span class="literal">false</span>;       <span class="comment">// 默认不保持链接  Connection : keep-alive保持连接</span></span><br><span class="line"></span><br><span class="line">    m_method = GET;         <span class="comment">// 默认请求方式为GET</span></span><br><span class="line">    m_url = <span class="number">0</span>;              </span><br><span class="line">    m_version = <span class="number">0</span>;</span><br><span class="line">    m_content_length = <span class="number">0</span>;</span><br><span class="line">    m_host = <span class="number">0</span>;</span><br><span class="line">    m_start_line = <span class="number">0</span>;</span><br><span class="line">    m_checked_idx = <span class="number">0</span>;</span><br><span class="line">    m_read_idx = <span class="number">0</span>;</span><br><span class="line">    m_write_idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    bzero(m_read_buf, READ_BUFFER_SIZE);</span><br><span class="line">    bzero(m_write_buf, READ_BUFFER_SIZE);</span><br><span class="line">    bzero(m_real_file, FILENAME_LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环读取客户数据，直到无数据可读或者对方关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_read_idx &gt;= READ_BUFFER_SIZE ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> bytes_read = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 从m_read_buf + m_read_idx索引出开始保存数据，大小是READ_BUFFER_SIZE - m_read_idx</span></span><br><span class="line">        bytes_read = recv(m_sockfd, m_read_buf + m_read_idx, </span><br><span class="line">        READ_BUFFER_SIZE - m_read_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> (bytes_read == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK ) &#123;</span><br><span class="line">                <span class="comment">// 没有数据</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bytes_read == <span class="number">0</span>) &#123;   <span class="comment">// 对方关闭连接</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_read_idx += bytes_read;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析一行，判断依据\r\n</span></span><br><span class="line"><span class="function">http_conn::LINE_STATUS <span class="title">http_conn::parse_line</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> ( ; m_checked_idx &lt; m_read_idx; ++m_checked_idx ) &#123;</span><br><span class="line">        temp = m_read_buf[ m_checked_idx ];</span><br><span class="line">        <span class="keyword">if</span> ( temp == <span class="string">&#x27;\r&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ( m_checked_idx + <span class="number">1</span> ) == m_read_idx ) &#123;</span><br><span class="line">                <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( m_read_buf[ m_checked_idx + <span class="number">1</span> ] == <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>( temp == <span class="string">&#x27;\n&#x27;</span> )  &#123;</span><br><span class="line">            <span class="keyword">if</span>( ( m_checked_idx &gt; <span class="number">1</span>) &amp;&amp; ( m_read_buf[ m_checked_idx - <span class="number">1</span> ] == <span class="string">&#x27;\r&#x27;</span> ) ) &#123;</span><br><span class="line">                m_read_buf[ m_checked_idx<span class="number">-1</span> ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析HTTP请求行，获得请求方法，目标URL,以及HTTP版本号</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_request_line</span><span class="params">(<span class="keyword">char</span>* text)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GET /index.html HTTP/1.1</span></span><br><span class="line">    m_url = <span class="built_in">strpbrk</span>(text, <span class="string">&quot; \t&quot;</span>); <span class="comment">// 判断第二个参数中的字符哪个在text中最先出现</span></span><br><span class="line">    <span class="keyword">if</span> (! m_url) &#123; </span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// GET\0/index.html HTTP/1.1</span></span><br><span class="line">    *m_url++ = <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 置位空字符，字符串结束符</span></span><br><span class="line">    <span class="keyword">char</span>* method = text;</span><br><span class="line">    <span class="keyword">if</span> ( strcasecmp(method, <span class="string">&quot;GET&quot;</span>) == <span class="number">0</span> ) &#123; <span class="comment">// 忽略大小写比较</span></span><br><span class="line">        m_method = GET;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment">// 检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标。</span></span><br><span class="line">    m_version = <span class="built_in">strpbrk</span>( m_url, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">    <span class="keyword">if</span> (!m_version) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    *m_version++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (strcasecmp( m_version, <span class="string">&quot;HTTP/1.1&quot;</span>) != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://192.168.110.129:10000/index.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (strncasecmp(m_url, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span> ) &#123;   </span><br><span class="line">        m_url += <span class="number">7</span>;</span><br><span class="line">        <span class="comment">// 在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置。</span></span><br><span class="line">        m_url = <span class="built_in">strchr</span>( m_url, <span class="string">&#x27;/&#x27;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !m_url || m_url[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    m_check_state = CHECK_STATE_HEADER; <span class="comment">// 检查状态变成检查头</span></span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析HTTP请求的一个头部信息</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_headers</span><span class="params">(<span class="keyword">char</span>* text)</span> </span>&#123;   </span><br><span class="line">    <span class="comment">// 遇到空行，表示头部字段解析完毕</span></span><br><span class="line">    <span class="keyword">if</span>( text[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span> ) &#123;</span><br><span class="line">        <span class="comment">// 如果HTTP请求有消息体，则还需要读取m_content_length字节的消息体，</span></span><br><span class="line">        <span class="comment">// 状态机转移到CHECK_STATE_CONTENT状态</span></span><br><span class="line">        <span class="keyword">if</span> ( m_content_length != <span class="number">0</span> ) &#123;</span><br><span class="line">            m_check_state = CHECK_STATE_CONTENT;</span><br><span class="line">            <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则说明我们已经得到了一个完整的HTTP请求</span></span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( strncasecmp( text, <span class="string">&quot;Connection:&quot;</span>, <span class="number">11</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Connection 头部字段  Connection: keep-alive</span></span><br><span class="line">        text += <span class="number">11</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        <span class="keyword">if</span> ( strcasecmp( text, <span class="string">&quot;keep-alive&quot;</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">            m_linger = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( strncasecmp( text, <span class="string">&quot;Content-Length:&quot;</span>, <span class="number">15</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Content-Length头部字段</span></span><br><span class="line">        text += <span class="number">15</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        m_content_length = atol(text);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( strncasecmp( text, <span class="string">&quot;Host:&quot;</span>, <span class="number">5</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Host头部字段</span></span><br><span class="line">        text += <span class="number">5</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        m_host = text;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;oop! unknow header %s\n&quot;</span>, text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们没有真正解析HTTP请求的消息体，只是判断它是否被完整的读入了</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_content</span><span class="params">( <span class="keyword">char</span>* text )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( m_read_idx &gt;= ( m_content_length + m_checked_idx ) )</span><br><span class="line">    &#123;</span><br><span class="line">        text[ m_content_length ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主状态机，解析请求</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::process_read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LINE_STATUS line_status = LINE_OK;</span><br><span class="line">    HTTP_CODE ret = NO_REQUEST;</span><br><span class="line">    <span class="keyword">char</span>* text = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (((m_check_state == CHECK_STATE_CONTENT) &amp;&amp; (line_status == LINE_OK))</span><br><span class="line">                || ((line_status = parse_line()) == LINE_OK)) &#123;</span><br><span class="line">        <span class="comment">// 获取一行数据</span></span><br><span class="line">        text = get_line();</span><br><span class="line">        m_start_line = m_checked_idx;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;got 1 http line: %s\n&quot;</span>, text );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> ( m_check_state ) &#123;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_REQUESTLINE: &#123;</span><br><span class="line">                ret = parse_request_line( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == BAD_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_HEADER: &#123;</span><br><span class="line">                ret = parse_headers( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == BAD_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ret == GET_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> do_request();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_CONTENT: &#123;</span><br><span class="line">                ret = parse_content( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == GET_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> do_request();</span><br><span class="line">                &#125;</span><br><span class="line">                line_status = LINE_OPEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> INTERNAL_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当得到一个完整、正确的HTTP请求时，我们就分析目标文件的属性，</span></span><br><span class="line"><span class="comment">// 如果目标文件存在、对所有用户可读，且不是目录，则使用mmap将其</span></span><br><span class="line"><span class="comment">// 映射到内存地址m_file_address处，并告诉调用者获取文件成功</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::do_request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// &quot;/home/nowcoder/webserver/resources&quot;</span></span><br><span class="line">    <span class="built_in">strcpy</span>( m_real_file, doc_root );</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>( doc_root );</span><br><span class="line">    <span class="built_in">strncpy</span>( m_real_file + len, m_url, FILENAME_LEN - len - <span class="number">1</span> );</span><br><span class="line">    <span class="comment">// 获取m_real_file文件的相关的状态信息，-1失败，0成功</span></span><br><span class="line">    <span class="keyword">if</span> ( stat( m_real_file, &amp;m_file_stat ) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断访问权限</span></span><br><span class="line">    <span class="keyword">if</span> ( ! ( m_file_stat.st_mode &amp; S_IROTH ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> FORBIDDEN_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是目录</span></span><br><span class="line">    <span class="keyword">if</span> ( S_ISDIR( m_file_stat.st_mode ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以只读方式打开文件</span></span><br><span class="line">    <span class="keyword">int</span> fd = open( m_real_file, O_RDONLY );</span><br><span class="line">    <span class="comment">// 创建内存映射</span></span><br><span class="line">    m_file_address = ( <span class="keyword">char</span>* )mmap( <span class="number">0</span>, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span> );</span><br><span class="line">    close( fd );</span><br><span class="line">    <span class="keyword">return</span> FILE_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对内存映射区执行munmap操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::unmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_file_address )</span><br><span class="line">    &#123;</span><br><span class="line">        munmap( m_file_address, m_file_stat.st_size );</span><br><span class="line">        m_file_address = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写HTTP响应</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( bytes_to_send == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 将要发送的字节为0，这一次响应结束。</span></span><br><span class="line">        modfd( m_epollfd, m_sockfd, EPOLLIN ); </span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 分散写</span></span><br><span class="line">        temp = writev(m_sockfd, m_iv, m_iv_count);</span><br><span class="line">        <span class="keyword">if</span> ( temp &lt;= <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="comment">// 如果TCP写缓冲没有空间，则等待下一轮EPOLLOUT事件，虽然在此期间，</span></span><br><span class="line">            <span class="comment">// 服务器无法立即接收到同一客户的下一个请求，但可以保证连接的完整性。</span></span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN ) &#123;</span><br><span class="line">                modfd( m_epollfd, m_sockfd, EPOLLOUT );</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            unmap();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_have_send += temp;</span><br><span class="line">        bytes_to_send -= temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_have_send &gt;= m_iv[<span class="number">0</span>].iov_len)</span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = <span class="number">0</span>;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_base = m_file_address + (bytes_have_send - m_write_idx);</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_len = bytes_to_send;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_base = m_write_buf + bytes_have_send;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = m_iv[<span class="number">0</span>].iov_len - temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_to_send &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 没有数据要发送了</span></span><br><span class="line">            unmap();</span><br><span class="line">            modfd(m_epollfd, m_sockfd, EPOLLIN);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m_linger)</span><br><span class="line">            &#123;</span><br><span class="line">                init();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往写缓冲中写入待发送的数据</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_response</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_write_idx &gt;= WRITE_BUFFER_SIZE ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    va_list arg_list;</span><br><span class="line">    va_start( arg_list, format );</span><br><span class="line">    <span class="keyword">int</span> len = vsnprintf( m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx, format, arg_list );</span><br><span class="line">    <span class="keyword">if</span>( len &gt;= ( WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_write_idx += len;</span><br><span class="line">    va_end( arg_list );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_status_line</span><span class="params">( <span class="keyword">int</span> status, <span class="keyword">const</span> <span class="keyword">char</span>* title )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response( <span class="string">&quot;%s %d %s\r\n&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, status, title );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_headers</span><span class="params">(<span class="keyword">int</span> content_len)</span> </span>&#123;</span><br><span class="line">    add_content_length(content_len);</span><br><span class="line">    add_content_type();</span><br><span class="line">    add_linger();</span><br><span class="line">    add_blank_line();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_content_length</span><span class="params">(<span class="keyword">int</span> content_len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response( <span class="string">&quot;Content-Length: %d\r\n&quot;</span>, content_len );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_linger</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response( <span class="string">&quot;Connection: %s\r\n&quot;</span>, ( m_linger == <span class="literal">true</span> ) ? <span class="string">&quot;keep-alive&quot;</span> : <span class="string">&quot;close&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_blank_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response( <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;\r\n&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_content</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span>* content )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response( <span class="string">&quot;%s&quot;</span>, content );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::add_content_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add_response(<span class="string">&quot;Content-Type:%s\r\n&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据服务器处理HTTP请求的结果，决定返回给客户端的内容</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">http_conn::process_write</span><span class="params">(HTTP_CODE ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> INTERNAL_ERROR:</span><br><span class="line">            add_status_line( <span class="number">500</span>, error_500_title );</span><br><span class="line">            add_headers( <span class="built_in">strlen</span>( error_500_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! add_content( error_500_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BAD_REQUEST:</span><br><span class="line">            add_status_line( <span class="number">400</span>, error_400_title );</span><br><span class="line">            add_headers( <span class="built_in">strlen</span>( error_400_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! add_content( error_400_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NO_RESOURCE:</span><br><span class="line">            add_status_line( <span class="number">404</span>, error_404_title );</span><br><span class="line">            add_headers( <span class="built_in">strlen</span>( error_404_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! add_content( error_404_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FORBIDDEN_REQUEST:</span><br><span class="line">            add_status_line( <span class="number">403</span>, error_403_title );</span><br><span class="line">            add_headers(<span class="built_in">strlen</span>( error_403_form));</span><br><span class="line">            <span class="keyword">if</span> ( ! add_content( error_403_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FILE_REQUEST:</span><br><span class="line">            add_status_line(<span class="number">200</span>, ok_200_title );</span><br><span class="line">            add_headers(m_file_stat.st_size);</span><br><span class="line">            m_iv[ <span class="number">0</span> ].iov_base = m_write_buf;</span><br><span class="line">            m_iv[ <span class="number">0</span> ].iov_len = m_write_idx;</span><br><span class="line">            m_iv[ <span class="number">1</span> ].iov_base = m_file_address;</span><br><span class="line">            m_iv[ <span class="number">1</span> ].iov_len = m_file_stat.st_size;</span><br><span class="line">            m_iv_count = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            bytes_to_send = m_write_idx + m_file_stat.st_size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_iv[ <span class="number">0</span> ].iov_base = m_write_buf;</span><br><span class="line">    m_iv[ <span class="number">0</span> ].iov_len = m_write_idx;</span><br><span class="line">    m_iv_count = <span class="number">1</span>;</span><br><span class="line">    bytes_to_send = m_write_idx;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由线程池中的工作线程调用，这是处理HTTP请求的入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_conn::process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析HTTP请求</span></span><br><span class="line">    HTTP_CODE read_ret = process_read();</span><br><span class="line">    <span class="keyword">if</span> ( read_ret == NO_REQUEST ) &#123;</span><br><span class="line">        modfd( m_epollfd, m_sockfd, EPOLLIN );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成响应</span></span><br><span class="line">    <span class="keyword">bool</span> write_ret = process_write( read_ret );</span><br><span class="line">    <span class="keyword">if</span> ( !write_ret ) &#123;</span><br><span class="line">        close_conn();</span><br><span class="line">    &#125;</span><br><span class="line">    modfd( m_epollfd, m_sockfd, EPOLLOUT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h2><p>逻辑单元内部的一种高效编程方法：有限状态机（finite state machine）。</p><p>有的应用层协议头部包含数据包类型字段，每种类型可以映射为逻辑单元的一种执行状态，服务器可以根据它来编写相应的处理逻辑。如下是一种状态独立的有限状态机：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">STATE_MACHINE( Package _pack )</span><br><span class="line">&#123;</span><br><span class="line">    PackageType _type = _pack.GetType();</span><br><span class="line">    <span class="keyword">switch</span>( _type )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> type_A:</span><br><span class="line">        process_package_A( _pack );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> type_B:</span><br><span class="line">        process_package_B( _pack );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的有限状态机，只不过该状态机的每个状态都是相互独立的，即状态之间没有相互转移。状态之间的转移是需要状态机内部驱动，如下代码：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">STATE_MACHINE()</span><br><span class="line">&#123;</span><br><span class="line">State cur_State = type_A;</span><br><span class="line">    <span class="keyword">while</span>( cur_State != type_C )</span><br><span class="line">    &#123;</span><br><span class="line">        Package _pack = getNewPackage();</span><br><span class="line">        <span class="keyword">switch</span>( cur_State )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> type_A:</span><br><span class="line">                process_package_state_A( _pack );</span><br><span class="line">                cur_State = type_B;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> type_B:</span><br><span class="line">                process_package_state_B( _pack );</span><br><span class="line">                cur_State = type_C;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该状态机包含三种状态：type_A、type_B 和 type_C，其中 type_A 是状态机的开始状态，type_C 是状态机的结束状态。状态机的当前状态记录在 cur_State 变量中。在一趟循环过程中，状态机先通过getNewPackage 方法获得一个新的数据包，然后根据 cur_State 变量的值判断如何处理该数据包。数据包处理完之后，状态机通过给 cur_State 变量传递目标状态值来实现状态转移。那么当状态机进入下一趟循环时，它将执行新的状态对应的逻辑。  </p><h3 id="EPOLLONESHOT事件"><a href="#EPOLLONESHOT事件" class="headerlink" title="EPOLLONESHOT事件"></a>EPOLLONESHOT事件</h3><p>即使可以使用 ET 模式，一个socket 上的某个事件还是可能被触发多次。这在并发程序中就会引起一个问题。比如一个线程在读取完某个 socket 上的数据后开始处理这些数据，而在数据的处理过程中该socket 上又有新数据可读（EPOLLIN 再次被触发），此时另外一个线程被唤醒来读取这些新的数据。于是就出现了两个线程同时操作一个 socket 的局面。一个socket连接在任一时刻都只被一个线程处理，可以使用 epoll 的 EPOLLONESHOT 事件实现。</p><p>对于注册了 EPOLLONESHOT 事件的文件描述符，操作系统最多触发其上注册的一个可读、可写或者异常事件，且只触发一次，除非我们使用 epoll_ctl 函数重置该文件描述符上注册的 EPOLLONESHOT 事件。这样，当一个线程在处理某个 socket 时，其他线程是不可能有机会操作该 socket 的。但反过来思考，注册了 EPOLLONESHOT 事件的 socket 一旦被某个线程处理完毕， 该线程就应该立即重置这个socket 上的 EPOLLONESHOT 事件，以确保这个 socket 下一次可读时，其 EPOLLIN 事件能被触发，进而让其他工作线程有机会继续处理这个 socket。  </p>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第五章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第四章linux网络编程</title>
    <link href="https://tsuiwade.github.io/2022/07/16/blog55-nowcoderProject4/"/>
    <id>https://tsuiwade.github.io/2022/07/16/blog55-nowcoderProject4/</id>
    <published>2022-07-16T10:04:52.000Z</published>
    <updated>2022-07-16T10:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-状态转换"><a href="#TCP-状态转换" class="headerlink" title="TCP 状态转换"></a>TCP 状态转换</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716231619986.png" alt="image-20220716231619986"></p><p>红客户端 绿服务器端 黑色异常</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716231822128.png" alt="image-20220716231822128"></p><p> <strong>2MSL（Maximum Segment Lifetime）</strong><br>主动断开连接的一方, 最后进入一个 TIME_WAIT状态, 这个状态会持续: 2msl 为了确保服务器端可以收到ACK，确保正确关闭<br>msl: 官方建议: 2分钟, 实际是30s<br>当 TCP 连接主动关闭方接收到被动关闭方发送的 FIN 和最终的 ACK 后，连接的主动关闭方必须处于TIME_WAIT 状态并持续 2MSL 时间。</p><p>这样就能够让 TCP 连接的主动关闭方在它发送的 ACK 丢失的情况下重新发送最终的 ACK。因为如果最后一个ack丢失的话，被动关闭方会一直等待，等不到就会再发送FIN，直到收到ACK；</p><p>主动关闭方重新发送的最终 ACK 并不是因为被动关闭方重传了 ACK（它们并不消耗序列号，被动关闭方也不会重传），而是因为被动关闭方重传了它的 FIN。事实上，被动关闭方总是重传 FIN 直到它收到一个最终的 ACK。  </p><hr><h2 id="4-24-半关闭-端口复用"><a href="#4-24-半关闭-端口复用" class="headerlink" title="4.24 半关闭 端口复用"></a>4.24 半关闭 端口复用</h2><h3 id="半关闭（能接收-不能发）"><a href="#半关闭（能接收-不能发）" class="headerlink" title="半关闭（能接收 不能发）"></a>半关闭（能接收 不能发）</h3><p>当 TCP 链接中 A 向 B 发送 FIN 请求关闭，另一端 B 回应 ACK 之后（A 端进入 FIN_WAIT_2状态），并没有立即发送 FIN 给 A，A 方处于半连接状态（半开关），此时 A 可以接收 B 发送的数据，但是 <strong>A</strong> 已经不能再向 B <strong>发送数据</strong>。  </p><p>从程序的角度，可以使用 API <strong>shutdown</strong>（SHUT_WR） 来控制实现半连接状态：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> how)</span></span>;</span><br><span class="line">sockfd: 需要关闭的socket的描述符</span><br><span class="line">how: 允许为shutdown操作选择以下几种方式:</span><br><span class="line">SHUT_RD(<span class="number">0</span>)： 关闭sockfd上的读功能，此选项将不允许sockfd进行读操作。该套接字不再接收数据，任何当前在套接字接受缓冲区的数据将被无声的丢弃掉。</span><br><span class="line">SHUT_WR(<span class="number">1</span>): 关闭sockfd的写功能，此选项将不允许sockfd进行写操作。进程不能在对此套接字发出写操作。</span><br><span class="line">SHUT_RDWR(<span class="number">2</span>):关闭sockfd的读写功能。相当于调用shutdown两次 相当于close：首先是以SHUT_RD,然后以SHUT_WR。</span><br></pre></td></tr></table></figure><p>使用 close 中止一个连接，但它只是减少描述符的引用计数，并不直接关闭连接，只有当描述符的引用计数为 0 时才关闭连接。shutdown 不考虑描述符的引用计数，直接关闭描述符。也可选择中止一个方向的连接，只中止读或只中止写。（有子进程则加一）<br>注意:</p><ol><li>如果有多个进程共享一个套接字，close 每被调用一次，计数减 1 ，直到计数为 0 时，也就是所用进程都调用了 close，套接字将被释放。</li><li>在多进程中如果一个进程调用了 shutdown(sfd, SHUT_RDWR) 后，其它的进程将无法进行通信。但如果一个进程 close(sfd) 将不会影响到其它进程。  </li></ol><h3 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h3><p>端口复用的用途是：防止服务器重启时 之前绑定的端口还没释放。程序突然退出而系统没有释放端口。</p><p>tcp_server.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> optval = <span class="number">1</span>; <span class="comment">// </span></span><br><span class="line">    setsockopt(lfd, SOL_SOCKET, SO_REUSEPORT, &amp;optval, <span class="keyword">sizeof</span>(optval)); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="keyword">int</span> ret = bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    ret = listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收客户端连接</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">    <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accpet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取客户端信息</span></span><br><span class="line">    <span class="keyword">char</span> cliIp[<span class="number">16</span>];</span><br><span class="line">    inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr, cliIp, <span class="keyword">sizeof</span>(cliIp));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> cliPort = ntohs(cliaddr.sin_port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出客户端的信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client&#x27;s ip is %s, and port is %d\n&quot;</span>, cliIp, cliPort );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收客户端发来的数据</span></span><br><span class="line">    <span class="keyword">char</span> recvBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = recv(cfd, recvBuf, <span class="keyword">sizeof</span>(recvBuf), <span class="number">0</span>); <span class="comment">////////</span></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;客户端已经断开连接...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, recvBuf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小写转大写</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            recvBuf[i] = <span class="built_in">toupper</span>(recvBuf[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after buf = %s\n&quot;</span>, recvBuf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大写字符串发给客户端</span></span><br><span class="line">        ret = send(cfd, recvBuf, <span class="built_in">strlen</span>(recvBuf) + <span class="number">1</span>, <span class="number">0</span>); <span class="comment">////////</span></span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;send&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    close(cfd);</span><br><span class="line">    close(lfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tcp_client.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;seraddr.sin_addr.s_addr);</span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    seraddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="keyword">int</span> ret = connect(fd, (struct sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        fgets(sendBuf, <span class="keyword">sizeof</span>(sendBuf), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        write(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>); <span class="comment">////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        <span class="keyword">int</span> len = read(fd, sendBuf, <span class="keyword">sizeof</span>(sendBuf)); <span class="comment">////////</span></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, sendBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;服务器已经断开连接...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行服务器端（9999）、运行客户端（36514）之后，第二个答案里的第三行是专门用来通信的socket</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716235324113.png" alt="image-20220716235324113"></p><p>如果断开服务器，客户端被动关闭处于close wait状态 ，服务器端主动关闭，处于fw2</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716235422484.png" alt="image-20220716235422484"></p><p>如果快速断开被动关闭的客户端 服务器处于time-wait 等待2msl后释放端口</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716235754918.png" alt="image-20220716235754918"></p><p>端口复用最常用的用途是:<br>1 防止服务器重启时之前绑定的端口还未释放<br>2 程序突然退出而系统没有释放 端口</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">// 设置套接字的属性/选项（不仅仅能设置端口复用）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname, <span class="keyword">const</span> <span class="keyword">void</span> *optval, socklen_toptlen)</span></span>;</span><br><span class="line">参数：</span><br><span class="line">    - sockfd : 要操作的文件描述符</span><br><span class="line">    - level : 级别 - SOL_SOCKET (端口复用的级别)</span><br><span class="line">    - optname : 选项的名称</span><br><span class="line">        - SO_REUSEADDR</span><br><span class="line">        - SO_REUSEPORT</span><br><span class="line">    - optval : 端口复用的值（整型）</span><br><span class="line">        - <span class="number">1</span> : 可以复用</span><br><span class="line">        - <span class="number">0</span> : 不可以复用</span><br><span class="line">    - optlen : optval参数的大小</span><br><span class="line">端口复用，设置的时机是在服务器绑定端口之前。</span><br><span class="line">setsockopt();</span><br><span class="line">bind();</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717001941962.png" alt="image-20220717001941962"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717002011322.png" alt="image-20220717002011322"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717002209461.png" alt="image-20220717002209461"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717002221751.png" alt="image-20220717002221751"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717002449530.png" alt="image-20220717002449530"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717002508544.png" alt="image-20220717002508544"></p><h2 id="4-25-IO多路复用"><a href="#4-25-IO多路复用" class="headerlink" title="4.25 IO多路复用"></a>4.25 IO多路复用</h2><p><strong><em>I/O 多路复用使得程序能同时监听多个文件描述符，能够提高程序的性能，</em></strong>Linux 下实现 I/O 多路复用的 系统调用主要有 select、poll 和 epoll。  </p><p>文件和内存！！！的IO。</p><h2 id="4-26-select"><a href="#4-26-select" class="headerlink" title="4.26 select"></a>4.26 select</h2><blockquote><p>主旨思想：</p><ol><li>首先要构造一个关于文件描述符的列表，将要监听的文件描述符添加到该列表中。</li><li>调用一个系统函数，监听该列表中的文件描述符，直到这些描述符中的一个或者多个进行I/O操作时，该函数才返回。<ol><li>这个函数是阻塞</li><li>函数对文件描述符的检测的操作是由内核完成的</li></ol></li><li>在返回时，它会告诉进程有多少（哪些）描述符要进行I/O操作。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sizeof(fd_set) = 128 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;</span><br><span class="line">- 参数：</span><br><span class="line">    - nfds : 委托内核检测的最大文件描述符的值 + <span class="number">1</span></span><br><span class="line">    - readfds : 要检测的文件描述符的读的集合，委托内核检测哪些文件描述符的读的属性</span><br><span class="line">    - 一般检测读操作</span><br><span class="line">        - 对应的是对方发送过来的数据，因为读是被动的接收数据，检测的就是读缓冲区</span><br><span class="line">        - 是一个传入传出参数</span><br><span class="line">    - writefds : 要检测的文件描述符的写的集合，委托内核检测哪些文件描述符的写的属性</span><br><span class="line">    - 委托内核检测写缓冲区是不是还可以写数据（不满的就可以写）</span><br><span class="line">    - exceptfds : 检测发生异常的文件描述符的集合(一般不用)</span><br><span class="line">    - timeout : 设置的超时时间</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">            <span class="keyword">long</span> tv_sec; <span class="comment">/* seconds */</span></span><br><span class="line">            <span class="keyword">long</span> tv_usec; <span class="comment">/* microseconds */</span></span><br><span class="line">        &#125;;</span><br><span class="line">        - <span class="literal">NULL</span> : 永久阻塞，直到检测到了文件描述符有变化</span><br><span class="line">        - tv_sec = <span class="number">0</span> tv_usec = <span class="number">0</span>， 不阻塞</span><br><span class="line">        - tv_sec &gt; <span class="number">0</span> tv_usec &gt; <span class="number">0</span>， 阻塞对应的时间</span><br><span class="line">- 返回值 :</span><br><span class="line">    - <span class="number">-1</span> : 失败</span><br><span class="line">    - &gt;<span class="number">0</span>(n) : 检测的集合中有n个文件描述符发生了变化</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 将参数文件描述符fd对应的标志位设置为0</span></span><br><span class="line"><span class="keyword">void</span> FD_CLR(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断fd对应的标志位是0还是1， 返回值 ： fd对应的标志位的值，0，返回0， 1，返回1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将参数文件描述符fd 对应的标志位，设置为1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fd_set一共有1024 bit, 全部初始化为0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717091112284.png" alt="image-20220717091112284"></p><p>100 101没有发送，就置零</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>); <span class="comment">// 一开始为3</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个fd_set的集合，存放的是需要检测的文件描述符</span></span><br><span class="line">    fd_set rdset, tmp;</span><br><span class="line">    FD_ZERO(&amp;rdset);</span><br><span class="line">    FD_SET(lfd, &amp;rdset);</span><br><span class="line">    <span class="keyword">int</span> maxfd = lfd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        tmp = rdset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用select系统函数，让内核帮检测哪些文件描述符有数据</span></span><br><span class="line">        <span class="keyword">int</span> ret = select(maxfd + <span class="number">1</span>, &amp;tmp, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>) &#123; <span class="comment">// 不可能等于0</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) &#123; <span class="comment">// 返回个数</span></span><br><span class="line">            <span class="comment">// 说明检测到了有文件描述符的对应的缓冲区的数据发生了改变</span></span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(lfd, &amp;tmp)) &#123; <span class="comment">// 判断两次，判断监听</span></span><br><span class="line">                <span class="comment">// 表示有新的客户端连接进来了</span></span><br><span class="line">                struct sockaddr_in cliaddr;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">                <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将新的文件描述符加入到集合中</span></span><br><span class="line">                FD_SET(cfd, &amp;rdset);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大的文件描述符</span></span><br><span class="line">                maxfd = maxfd &gt; cfd ? maxfd : cfd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = lfd + <span class="number">1</span>; i &lt;= maxfd; i++) &#123; <span class="comment">//从监听的3口开始监听到最大值</span></span><br><span class="line">                <span class="keyword">if</span>(FD_ISSET(i, &amp;tmp)) &#123;</span><br><span class="line">                    <span class="comment">// 说明这个文件描述符对应的客户端发来了数据</span></span><br><span class="line">                    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">int</span> len = read(i, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                    <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                        perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;client closed...\n&quot;</span>);</span><br><span class="line">                        close(i);</span><br><span class="line">                        FD_CLR(i, &amp;rdset);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, buf);</span><br><span class="line">                        write(i, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;seraddr.sin_addr.s_addr);</span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    seraddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="keyword">int</span> ret = connect(fd, (struct sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">&quot;send data %d&quot;</span>, num++);</span><br><span class="line">        write(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        <span class="keyword">int</span> len = read(fd, sendBuf, <span class="keyword">sizeof</span>(sendBuf));</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, sendBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;服务器已经断开连接...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// sleep(1);</span></span><br><span class="line">        usleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是多客户端可以连接到服务器。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717091222305.png" alt="image-20220717091222305"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717091231707.png" alt="image-20220717091231707"></p><p>poll 解决select 的第三个和第四个缺点。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717100834306.png" alt="image-20220717100834306"></p><h2 id="4-28-poll"><a href="#4-28-poll" class="headerlink" title="4.28 poll"></a>4.28 poll</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd; <span class="comment">/* 委托内核检测的文件描述符 */</span></span><br><span class="line">    <span class="keyword">short</span> events; <span class="comment">/* 委托内核检测文件描述符的什么事件 */</span></span><br><span class="line">    <span class="keyword">short</span> revents; <span class="comment">/* 文件描述符实际发生的事件 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">myfd</span>;</span> <span class="comment">// 举例</span></span><br><span class="line">myfd.fd = <span class="number">5</span>;</span><br><span class="line">myfd.events = POLLIN | POLLOUT; <span class="comment">// 检测可读可写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line">- 参数：</span><br><span class="line">    - fds : 是一个<span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> 结构体数组，这是一个需要检测的文件描述符的集合</span></span><br><span class="line"><span class="class">    - <span class="title">nfds</span> :</span> 这个是第一个参数数组中最后一个有效元素的下标 + <span class="number">1</span></span><br><span class="line">    - timeout : 阻塞时长</span><br><span class="line">        <span class="number">0</span> : 不阻塞</span><br><span class="line">        <span class="number">-1</span> : 阻塞，当检测到需要检测的文件描述符有变化，解除阻塞</span><br><span class="line">        &gt;<span class="number">0</span> : 阻塞的时长</span><br><span class="line">- 返回值：</span><br><span class="line">    <span class="number">-1</span> : 失败</span><br><span class="line">    &gt;<span class="number">0</span>（n） : 成功,n表示检测到集合中有n个文件描述符发生变化</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717001356597.png" alt="image-20220717001356597"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// poll.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化检测的文件描述符数组 ////////////////////////</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[1024];</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</span><br><span class="line">        fds[i].fd = <span class="number">-1</span>; <span class="comment">// </span></span><br><span class="line">        fds[i].events = POLLIN; <span class="comment">// 检测读事件  </span></span><br><span class="line">    &#125;</span><br><span class="line">    fds[<span class="number">0</span>].fd = lfd;</span><br><span class="line">    <span class="keyword">int</span> nfds = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用poll系统函数，让内核帮检测哪些文件描述符有数据</span></span><br><span class="line">        <span class="keyword">int</span> ret = poll(fds, nfds + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;poll&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明检测到了有文件描述符的对应的缓冲区的数据发生了改变</span></span><br><span class="line">            <span class="keyword">if</span>(fds[<span class="number">0</span>].revents &amp; POLLIN) &#123;</span><br><span class="line">                <span class="comment">// 表示有新的客户端连接进来了</span></span><br><span class="line">                struct sockaddr_in cliaddr;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">                <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将新的文件描述符加入到集合中</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(fds[i].fd == <span class="number">-1</span>) &#123;</span><br><span class="line">                        fds[i].fd = cfd;</span><br><span class="line">                        fds[i].events = POLLIN;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新最大的文件描述符的索引</span></span><br><span class="line">                nfds = nfds &gt; cfd ? nfds : cfd;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nfds; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(fds[i].revents &amp; POLLIN) &#123;</span><br><span class="line">                    <span class="comment">// 说明这个文件描述符对应的客户端发来了数据</span></span><br><span class="line">                    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="keyword">int</span> len = read(fds[i].fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                    <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                        perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;client closed...\n&quot;</span>);</span><br><span class="line">                        close(fds[i].fd);</span><br><span class="line">                        fds[i].fd = <span class="number">-1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, buf);</span><br><span class="line">                        write(fds[i].fd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.c 同上</span></span><br></pre></td></tr></table></figure><p>poll 解决select 的第三个和第四个缺点。仍然还是需要遍历。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717100834306.png" alt="image-20220717100834306"></p><h2 id="4-29-epoll"><a href="#4-29-epoll" class="headerlink" title="4.29 epoll"></a>4.29 epoll</h2><p>没有用户态到内核态的切换，之前是线性数据结构，现在是红黑树数据结构。</p><p>epoll是如何实现的？首先使用<code>epoll_create</code>在内核区创建实例，是一个eventpoll的结构体类型，返回文件描述符。</p><p>这个数据结构rbr红黑树结构、rdlist链表 。如果有数据了就从rbr放入rdlist中。以前拷贝回去的都是所有的，而这里拷贝回去的是就绪的。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717100946633.png" alt="image-20220717100946633"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建一个新的epoll实例。在内核中创建了一个数据，这个数据中有两个比较重要的数据，一个是需要检测的文件描述符的信息（红黑树），还有一个是就绪列表，存放检测到数据发送改变的文件描述符信息（双向链表）。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line">    - 参数：</span><br><span class="line">    size : 目前没有意义了。随便写一个数，必须大于<span class="number">0</span></span><br><span class="line">    - 返回值：</span><br><span class="line">        <span class="number">-1</span> : 失败</span><br><span class="line">        &gt; <span class="number">0</span> : 文件描述符，操作epoll实例的</span><br><span class="line">    </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">uint32_t</span> u32;</span><br><span class="line">    <span class="keyword">uint64_t</span> u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> events; <span class="comment">/* Epoll events  检测事件 */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data; <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line">    常见的Epoll检测事件events：</span><br><span class="line">    - EPOLLIN</span><br><span class="line">    - EPOLLOUT</span><br><span class="line">    - EPOLLERR</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对epoll实例进行管理：添加文件描述符信息，删除信息，修改信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line">    - 参数：</span><br><span class="line">        - epfd : epoll实例对应的文件描述符</span><br><span class="line">        - op : 要进行什么操作</span><br><span class="line">            EPOLL_CTL_ADD: 添加</span><br><span class="line">            EPOLL_CTL_MOD: 修改</span><br><span class="line">            EPOLL_CTL_DEL: 删除</span><br><span class="line">        - fd : 要检测的文件描述符</span><br><span class="line">        - event : 检测文件描述符什么事情</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line">    - 参数：</span><br><span class="line">        - epfd : epoll实例对应的文件描述符</span><br><span class="line">        - events : 传出参数，保存了发送了变化的文件描述符的信息</span><br><span class="line">        - maxevents : 第二个参数结构体数组的大小</span><br><span class="line">        - timeout : 阻塞时间</span><br><span class="line">            - <span class="number">0</span> : 不阻塞</span><br><span class="line">            - <span class="number">-1</span> : 阻塞，直到检测到fd数据发生变化，解除阻塞</span><br><span class="line">            - &gt; <span class="number">0</span> : 阻塞的时长（毫秒）</span><br><span class="line">    - 返回值：</span><br><span class="line">        - 成功，返回发送变化的文件描述符的个数 &gt; <span class="number">0</span></span><br><span class="line">        - 失败 <span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用epoll_create()创建一个epoll实例</span></span><br><span class="line">    <span class="keyword">int</span> epfd = epoll_create(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将监听的文件描述符相关的检测信息添加到epoll实例中</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epev</span>;</span></span><br><span class="line">    epev.events = EPOLLIN;</span><br><span class="line">    epev.data.fd = lfd;</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, lfd, &amp;epev);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epevs</span>[1024];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = epoll_wait(epfd, epevs, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;epoll_wait&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curfd = epevs[i].data.fd;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curfd == lfd) &#123;</span><br><span class="line">                <span class="comment">// 监听的文件描述符有数据达到，有客户端连接</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">                <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">                epev.events = EPOLLIN;</span><br><span class="line">                epev.data.fd = cfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &amp;epev);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(epevs[i].events &amp; EPOLLOUT) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="comment">// 有数据到达，需要通信</span></span><br><span class="line">                <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">int</span> len = read(curfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client closed...\n&quot;</span>);</span><br><span class="line">                    epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, <span class="literal">NULL</span>);</span><br><span class="line">                    close(curfd);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, buf);</span><br><span class="line">                    write(curfd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(lfd);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717104350319.png" alt="image-20220717104350319"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717104402343.png" alt="image-20220717104402343"></p><h2 id="4-31-epoll-的两种工作模式"><a href="#4-31-epoll-的两种工作模式" class="headerlink" title="4.31 epoll 的两种工作模式"></a>4.31 epoll 的两种工作模式</h2><ul><li><p>LT 模式 （水平触发）</p><blockquote><p>LT（level - triggered）是缺省的工作方式，并且同时支持 block 和 no-block socket。在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的</p></blockquote><p>假设委托内核检测读事件 -&gt; 检测fd的读缓冲区</p><p>读缓冲区有数据 - &gt; epoll检测到了会给用户通知</p><ul><li><p>a.用户不读数据，数据一直在缓冲区，epoll 会一直通知</p></li><li><p>b.用户只读了一部分数据，epoll会通知</p></li><li><p>c.缓冲区的数据读完了，不通知  </p></li></ul></li><li><p>ET 模式（边沿触发）</p><blockquote><p>ET（edge - triggered）是高速工作方式，只支持 no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了。但是请注意，如果一直不对这个 fd 作 IO 操作（从而导致它再次变成未就绪），内核不会发送更多的通知（only once）。</p><p>ET 模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。epoll工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄（文件描述符）的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。  </p></blockquote><p>假设委托内核检测读事件 -&gt; 检测fd的读缓冲区</p><p>读缓冲区有数据 - &gt; epoll检测到了会给用户通知</p><ul><li><p>a.用户不读数据，数据一直在缓冲区中，epoll下次检测的时候就不通知了</p></li><li><p>b.用户只读了一部分数据，epoll不通知</p></li><li><p>c.缓冲区的数据读完了，不通知  </p></li></ul></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> events; <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data; <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br><span class="line">常见的Epoll检测事件：</span><br><span class="line">- EPOLLIN</span><br><span class="line">- EPOLLOUT</span><br><span class="line">- EPOLLERR</span><br><span class="line">- EPOLLET</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll_lt.c LT 模式 （水平触发）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用epoll_create()创建一个epoll实例</span></span><br><span class="line">    <span class="keyword">int</span> epfd = epoll_create(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将监听的文件描述符相关的检测信息添加到epoll实例中</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epev</span>;</span></span><br><span class="line">    epev.events = EPOLLIN;</span><br><span class="line">    epev.data.fd = lfd;</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, lfd, &amp;epev);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epevs</span>[1024];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = epoll_wait(epfd, epevs, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;epoll_wait&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curfd = epevs[i].data.fd;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curfd == lfd) &#123;</span><br><span class="line">                <span class="comment">// 监听的文件描述符有数据达到，有客户端连接</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">                <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">                epev.events = EPOLLIN;</span><br><span class="line">                epev.data.fd = cfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &amp;epev);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(epevs[i].events &amp; EPOLLOUT) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="comment">// 有数据到达，需要通信</span></span><br><span class="line">                <span class="keyword">char</span> buf[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                <span class="keyword">int</span> len = read(curfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">                <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client closed...\n&quot;</span>);</span><br><span class="line">                    epoll_ctl(epfd, EPOLL_CTL_DEL, curfd, <span class="literal">NULL</span>);</span><br><span class="line">                    close(curfd);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, buf);</span><br><span class="line">                    write(curfd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(lfd);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;seraddr.sin_addr.s_addr);</span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    seraddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接服务器</span></span><br><span class="line">    <span class="keyword">int</span> ret = connect(fd, (struct sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// sprintf(sendBuf, &quot;send data %d&quot;, num++);</span></span><br><span class="line">        fgets(sendBuf, <span class="keyword">sizeof</span>(sendBuf), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        write(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收</span></span><br><span class="line">        <span class="keyword">int</span> len = read(fd, sendBuf, <span class="keyword">sizeof</span>(sendBuf));</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read buf = %s\n&quot;</span>, sendBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;服务器已经断开连接...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// epoll_et.c ET 模式（边沿触发）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    listen(lfd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用epoll_create()创建一个epoll实例</span></span><br><span class="line">    <span class="keyword">int</span> epfd = epoll_create(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将监听的文件描述符相关的检测信息添加到epoll实例中</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epev</span>;</span></span><br><span class="line">    epev.events = EPOLLIN;</span><br><span class="line">    epev.data.fd = lfd;</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_ADD, lfd, &amp;epev);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epevs</span>[1024];</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = epoll_wait(epfd, epevs, <span class="number">1024</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;epoll_wait&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curfd = epevs[i].data.fd;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(curfd == lfd) &#123;</span><br><span class="line">                <span class="comment">// 监听的文件描述符有数据达到，有客户端连接</span></span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">                <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">                <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置cfd属性非阻塞</span></span><br><span class="line">                <span class="keyword">int</span> flag = fcntl(cfd, F_GETFL);</span><br><span class="line">                flag | O_NONBLOCK;</span><br><span class="line">                fcntl(cfd, F_SETFL, flag);</span><br><span class="line"></span><br><span class="line">                epev.events = EPOLLIN | EPOLLET;    <span class="comment">// 设置边沿触发</span></span><br><span class="line">                epev.data.fd = cfd;</span><br><span class="line">                epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &amp;epev);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(epevs[i].events &amp; EPOLLOUT) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;  </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 循环读取出所有数据</span></span><br><span class="line">                <span class="keyword">char</span> buf[<span class="number">5</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>( (len = read(curfd, buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 打印数据</span></span><br><span class="line">                    <span class="comment">// printf(&quot;recv data : %s\n&quot;, buf);</span></span><br><span class="line">                    write(STDOUT_FILENO, buf, len);</span><br><span class="line">                    write(curfd, buf, len);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client closed....&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(errno == EAGAIN) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;data over.....&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(lfd);</span><br><span class="line">    close(epfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-32-UDP通信"><a href="#4-32-UDP通信" class="headerlink" title="4.32 UDP通信"></a>4.32 UDP通信</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717112034101.png" alt="image-20220717112034101"></p><p>而tcp</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716155939527.png" alt="image-20220716155939527"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</span><br><span class="line">    - 参数：</span><br><span class="line">        - sockfd : 通信的fd</span><br><span class="line">        - buf : 要发送的数据</span><br><span class="line">        - len : 发送数据的长度</span><br><span class="line">        - flags : <span class="number">0</span></span><br><span class="line">        - dest_addr : 通信的另外一端的地址信息</span><br><span class="line">        - addrlen : 地址的内存大小</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line">    - 参数：</span><br><span class="line">        - sockfd : 通信的fd</span><br><span class="line">        - buf : 接收数据的数组</span><br><span class="line">        - len : 数组的大小</span><br><span class="line">        - flags : <span class="number">0</span></span><br><span class="line">        - src_addr : 用来保存另外一端的地址信息，不需要可以指定为<span class="literal">NULL</span></span><br><span class="line">        - addrlen : 地址的内存大小</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udp_server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.绑定</span></span><br><span class="line">    <span class="keyword">int</span> ret = bind(fd, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> recvbuf[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">char</span> ipbuf[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">int</span> num = recvfrom(fd, recvbuf, <span class="keyword">sizeof</span>(recvbuf), <span class="number">0</span>, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client IP : %s, Port : %d\n&quot;</span>, </span><br><span class="line">            inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr, ipbuf, <span class="keyword">sizeof</span>(ipbuf)),</span><br><span class="line">            ntohs(cliaddr.sin_port));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client say : %s\n&quot;</span>, recvbuf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        sendto(fd, recvbuf, <span class="built_in">strlen</span>(recvbuf) + <span class="number">1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;cliaddr, <span class="keyword">sizeof</span>(cliaddr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// udp_client.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器的地址信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;saddr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">&quot;hello , i am client %d \n&quot;</span>, num++);</span><br><span class="line">        sendto(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">int</span> num = recvfrom(fd, sendBuf, <span class="keyword">sizeof</span>(sendBuf), <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;server say : %s\n&quot;</span>, sendBuf);</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以实现多个客户端。</p><h2 id="4-33-UDP广播"><a href="#4-33-UDP广播" class="headerlink" title="4.33 UDP广播"></a>4.33 UDP广播</h2><p>向子网中多台计算机发送消息，并且子网中所有的计算机都可以接收到发送方发送的消息，每个广播消息都包含一个特殊的IP地址，这个IP中子网内<strong>主机标志部分的二进制全部为1(255)。</strong><br>a.只能在局域网中使用。<br>b.客户端需要绑定服务器广播使用的端口，才可以接收到广播消息。  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置广播属性的函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname,<span class="keyword">const</span> <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> optlen)</span></span>;</span><br><span class="line">    - sockfd : 文件描述符</span><br><span class="line">    - level : SOL_SOCKET</span><br><span class="line">    - optname : SO_BROADCAST</span><br><span class="line">    - optval : <span class="keyword">int</span>类型的值，为<span class="number">1</span>表示允许广播</span><br><span class="line">    - optlen : optval的大小</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bro_server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.设置广播属性</span></span><br><span class="line">    <span class="keyword">int</span> op = <span class="number">1</span>;</span><br><span class="line">    setsockopt(fd, SOL_SOCKET, SO_BROADCAST, &amp;op, <span class="keyword">sizeof</span>(op));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.创建一个广播的地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    cliaddr.sin_family = AF_INET;</span><br><span class="line">    cliaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.193.255&quot;</span>, &amp;cliaddr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">&quot;hello, client....%d\n&quot;</span>, num++);</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        sendto(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;cliaddr, <span class="keyword">sizeof</span>(cliaddr));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;广播的数据：%s\n&quot;</span>, sendBuf);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bro_client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">in</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.客户端绑定本地的IP和端口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = bind(fd, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">int</span> num = recvfrom(fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;server say : %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-33-组播（多播）"><a href="#4-33-组播（多播）" class="headerlink" title="4.33 组播（多播）"></a>4.33 组播（多播）</h2><p>单播地址标识单个 IP 接口，广播地址标识某个子网的所有 IP 接口，多播地址标识一组 IP 接口。单播和广播是寻址方案的两个极端（要么单个要么全部），多播则意在两者之间提供一种折中方案。多播数据报只应该由对它感兴趣的接口接收，也就是说由运行相应多播会话应用系统的主机上的接口接收。另外，广播一般局限于局域网内使用，而多播则既可以用于局域网，也可以跨广域网使用。<br>a.组播既可以用于局域网，也可以用于广域网<br>b.客户端需要加入多播组，才能接收到多播的数据  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717165626932.png" alt="image-20220717165626932"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> level, <span class="keyword">int</span> optname,<span class="keyword">const</span> <span class="keyword">void</span> *optval, <span class="keyword">socklen_t</span> optlen)</span></span>;</span><br><span class="line">    <span class="comment">// 服务器设置多播的信息，外出接口</span></span><br><span class="line">    - level : IPPROTO_IP</span><br><span class="line">    - optname : IP_MULTICAST_IF</span><br><span class="line">    - optval : <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">    // 客户端加入到多播组：</span></span><br><span class="line"><span class="class">    - <span class="title">level</span> :</span> IPPROTO_IP</span><br><span class="line">    - optname : IP_ADD_MEMBERSHIP</span><br><span class="line">    - optval : <span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* IP multicast address of group. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_multiaddr</span>;</span> <span class="comment">// 组播的IP地址</span></span><br><span class="line">    <span class="comment">/* Local IP address of interface. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_interface</span>;</span> <span class="comment">// 本地的IP地址</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">in_addr_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">in_addr_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multi_server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.设置多播的属性，设置外出接口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_multiaddr</span>;</span></span><br><span class="line">    <span class="comment">// 初始化多播地址</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;239.0.0.10&quot;</span>, &amp;imr_multiaddr.s_addr);</span><br><span class="line">    setsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF, &amp;imr_multiaddr, <span class="keyword">sizeof</span>(imr_multiaddr));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.初始化客户端的地址信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    cliaddr.sin_family = AF_INET;</span><br><span class="line">    cliaddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;239.0.0.10&quot;</span>, &amp;cliaddr.sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">char</span> sendBuf[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(sendBuf, <span class="string">&quot;hello, client....%d\n&quot;</span>, num++);</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        sendto(fd, sendBuf, <span class="built_in">strlen</span>(sendBuf) + <span class="number">1</span>, <span class="number">0</span>, (struct sockaddr *)&amp;cliaddr, <span class="keyword">sizeof</span>(cliaddr));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;组播的数据：%s\n&quot;</span>, sendBuf);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// multi_client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个通信的socket</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">in</span>;</span></span><br><span class="line">    <span class="comment">// 2.客户端绑定本地的IP和端口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = bind(fd, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span> <span class="title">op</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;239.0.0.10&quot;</span>, &amp;op.imr_multiaddr.s_addr);</span><br><span class="line">    op.imr_interface.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入到多播组</span></span><br><span class="line">    setsockopt(fd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &amp;op, <span class="keyword">sizeof</span>(op));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">int</span> num = recvfrom(fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;server say : %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-35-本地套接字通信"><a href="#4-35-本地套接字通信" class="headerlink" title="4.35 本地套接字通信"></a>4.35 本地套接字通信</h2><blockquote><p>本地套接字的作用：本地的进程间通信<br>有关系的进程间的通信，父子进程<br>没有关系的进程间的通信<br>本地套接字实现流程和网络套接字类似，一般采用TCP的通信流程。  </p></blockquote><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220717171230447.png" alt="image-20220717171230447"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件: sys/un.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNIX_PATH_MAX 108</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> &#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sun_family; <span class="comment">// 地址族协议 af_local</span></span><br><span class="line">    <span class="keyword">char</span> sun_path[UNIX_PATH_MAX]; <span class="comment">// 套接字文件的路径, 这是一个伪文件, 大小永远=0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地套接字通信的流程 - tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line"><span class="number">1.</span> 创建监听的套接字</span><br><span class="line"><span class="keyword">int</span> lfd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="number">2.</span> 监听的套接字绑定本地的套接字文件 -&gt; server端</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="comment">// 绑定成功之后，指定的sun_path中的套接字文件会自动生成。 </span></span><br><span class="line">    bind(lfd, addr, len);</span><br><span class="line"><span class="number">3.</span> 监听</span><br><span class="line">    listen(lfd, <span class="number">100</span>);</span><br><span class="line"><span class="number">4.</span> 等待并接受连接请求</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> cfd = accept(lfd, &amp;cliaddr, len);</span><br><span class="line"><span class="number">5.</span> 通信</span><br><span class="line">    接收数据：read/recv</span><br><span class="line">    发送数据：write/send</span><br><span class="line"><span class="number">6.</span> 关闭连接</span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端的流程</span></span><br><span class="line"><span class="number">1.</span> 创建通信的套接字</span><br><span class="line"><span class="keyword">int</span> fd = socket(AF_UNIX/AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="number">2.</span> 监听的套接字绑定本地的IP 端口</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="comment">// 绑定成功之后，指定的sun_path中的套接字文件会自动生成。</span></span><br><span class="line">    bind(lfd, addr, len);</span><br><span class="line"><span class="number">3.</span> 连接服务器</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">serveraddr</span>;</span></span><br><span class="line">    connect(fd, &amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</span><br><span class="line"><span class="number">4.</span> 通信</span><br><span class="line">    接收数据：read/recv</span><br><span class="line">    发送数据：write/send</span><br><span class="line"><span class="number">5.</span> 关闭连接</span><br><span class="line">    close();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ipc_server.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    unlink(<span class="string">&quot;server.sock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建监听的套接字</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.绑定本地套接字文件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sun_family = AF_LOCAL;</span><br><span class="line">    <span class="built_in">strcpy</span>(addr.sun_path, <span class="string">&quot;server.sock&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = bind(lfd, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.监听</span></span><br><span class="line">    ret = listen(lfd, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.等待客户端连接</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);     </span><br><span class="line">    <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;cliaddr, &amp;len);</span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client socket filename: %s\n&quot;</span>, cliaddr.sun_path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">int</span> len = recv(cfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;client closed....\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;client say : %s\n&quot;</span>, buf);</span><br><span class="line">            send(cfd, buf, len, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(cfd);</span><br><span class="line">    close(lfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ipc_client.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    unlink(<span class="string">&quot;client.sock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建套接字</span></span><br><span class="line">    <span class="keyword">int</span> cfd = socket(AF_LOCAL, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.绑定本地套接字文件</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sun_family = AF_LOCAL;</span><br><span class="line">    <span class="built_in">strcpy</span>(addr.sun_path, <span class="string">&quot;client.sock&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = bind(cfd, (struct sockaddr *)&amp;addr, <span class="keyword">sizeof</span>(addr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.连接服务器</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    seraddr.sun_family = AF_LOCAL;</span><br><span class="line">    <span class="built_in">strcpy</span>(seraddr.sun_path, <span class="string">&quot;server.sock&quot;</span>);</span><br><span class="line">    ret = connect(cfd, (struct sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.通信</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;hello, i am client %d\n&quot;</span>, num++);</span><br><span class="line">        send(cfd, buf, <span class="built_in">strlen</span>(buf) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;client say : %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="keyword">int</span> len = recv(cfd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;recv&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server closed....\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server say : %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(cfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第四章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第三章linux多线程开发</title>
    <link href="https://tsuiwade.github.io/2022/07/14/blog54-nowcoderProject3/"/>
    <id>https://tsuiwade.github.io/2022/07/14/blog54-nowcoderProject3/</id>
    <published>2022-07-14T15:53:03.000Z</published>
    <updated>2022-07-14T15:53:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714155743501.png" alt="image-20220714155743501"></p><p>火狐浏览器开启的线程。PID进程号 LWP线程号</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220722163714455.png" alt="image-20220722163714455"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714155957795.png" alt="image-20220714155957795"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714160152562.png" alt="image-20220714160152562"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714160305621.png" alt="image-20220714160305621"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714162300308.png" alt="image-20220714162300308"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    一般情况下,main函数所在的线程我们称之为主线程（main线程），其余创建的线程</span></span><br><span class="line"><span class="comment">    称之为子线程。</span></span><br><span class="line"><span class="comment">    程序中默认只有一个进程，fork()函数调用，2进行</span></span><br><span class="line"><span class="comment">    程序中默认只有一个线程，pthread_create()函数调用，2个线程。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">    int pthread_create(pthread_t *thread, const pthread_attr_t *attr, </span></span><br><span class="line"><span class="comment">    void *(*start_routine) (void *), void *arg);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - 功能：创建一个子线程</span></span><br><span class="line"><span class="comment">        - 参数：</span></span><br><span class="line"><span class="comment">            - thread：传出参数，线程创建成功后，子线程的线程ID被写到该变量中。</span></span><br><span class="line"><span class="comment">            - attr : 设置线程的属性，一般使用默认值，NULL</span></span><br><span class="line"><span class="comment">            - start_routine : 函数指针，这个函数是子线程需要处理的逻辑代码</span></span><br><span class="line"><span class="comment">            - arg : 给第三个参数使用，传参</span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            成功：0</span></span><br><span class="line"><span class="comment">            失败：返回错误号。这个错误号和之前errno不太一样。</span></span><br><span class="line"><span class="comment">            获取错误号的信息：  char * strerror(int errnum);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child thread...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arg value: %d\n&quot;</span>, *(<span class="keyword">int</span> *)arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, (<span class="keyword">void</span> *)&amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// exit(0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程不是标准系统库 ，而是第三方</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715000852721.png" alt="image-20220715000852721"></p><p>因为主线程return 0 退出了，没执行子线程里的。只执行主线程。加了sleep就可以</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220722170427094.png" alt="image-20220722170427094"></p><hr><p>3.3 终止进程 pthread_exit   </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">    void pthread_exit(void *retval);</span></span><br><span class="line"><span class="comment">        功能：终止一个线程，在哪个线程中调用，就表示终止哪个线程</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            retval:需要传递一个指针，作为一个返回值，可以在pthread_join()中获取到。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    pthread_t pthread_self(void);</span></span><br><span class="line"><span class="comment">        功能：获取当前的线程的线程ID</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_equal(pthread_t t1, pthread_t t2);</span></span><br><span class="line"><span class="comment">        功能：比较两个线程ID是否相等</span></span><br><span class="line"><span class="comment">        不同的操作系统，pthread_t类型的实现不一样，有的是无符号的长整型，有的</span></span><br><span class="line"><span class="comment">        是使用结构体去实现的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child thread id : %ld\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;    <span class="comment">// pthread_exit(NULL);</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid : %ld, main thread id : %ld\n&quot;</span>, tid ,pthread_self());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让主线程退出,当主线程退出时，不会影响其他正常运行的线程。</span></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main thread exit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// exit(0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714234028445.png" alt="image-20220714234028445"></p><hr><h2 id="3-4-连接已终止的现场-pthread-join"><a href="#3-4-连接已终止的现场-pthread-join" class="headerlink" title="3.4 连接已终止的现场 pthread_join"></a>3.4 连接已终止的现场 pthread_join</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">    int pthread_join(pthread_t thread, void **retval);</span></span><br><span class="line"><span class="comment">        - 功能：和一个已经终止的线程进行连接</span></span><br><span class="line"><span class="comment">                回收子线程的资源</span></span><br><span class="line"><span class="comment">                这个函数是阻塞函数，调用一次只能回收一个子线程</span></span><br><span class="line"><span class="comment">                一般在主线程中使用</span></span><br><span class="line"><span class="comment">        - 参数：</span></span><br><span class="line"><span class="comment">            - thread：需要回收的子线程的ID</span></span><br><span class="line"><span class="comment">            - retval: 接收子线程退出时的返回值</span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            0 : 成功</span></span><br><span class="line"><span class="comment">            非0 : 失败，返回的错误号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> value = <span class="number">10</span>; <span class="comment">// 不能局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child thread id : %ld\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="comment">// sleep(3);</span></span><br><span class="line">    <span class="comment">// return NULL; </span></span><br><span class="line">    <span class="comment">// int value = 10; // 局部变量</span></span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)&amp;value);   <span class="comment">// return (void *)&amp;value;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid : %ld, main thread id : %ld\n&quot;</span>, tid ,pthread_self());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程调用pthread_join()回收子线程的资源</span></span><br><span class="line">    <span class="keyword">int</span> * thread_retval;</span><br><span class="line">    ret = pthread_join(tid, (<span class="keyword">void</span> **)&amp;thread_retval); <span class="comment">// 子线程不结束，join不执行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;exit data : %d\n&quot;</span>, *thread_retval);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;回收子线程资源成功！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让主线程退出,当主线程退出时，不会影响其他正常运行的线程。</span></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715093336175.png" alt="image-20220715093336175"></p><hr><h2 id="3-5-线程的分离-pthread-detach"><a href="#3-5-线程的分离-pthread-detach" class="headerlink" title="3.5 线程的分离 pthread_detach"></a>3.5 线程的分离 pthread_detach</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">    int pthread_detach(pthread_t thread);</span></span><br><span class="line"><span class="comment">        - 功能：分离一个线程。被分离的线程在终止的时候，会自动释放资源返回给系统。</span></span><br><span class="line"><span class="comment">          1.不能多次分离，会产生不可预料的行为。</span></span><br><span class="line"><span class="comment">          2.不能去连接一个已经分离的线程，会报错。</span></span><br><span class="line"><span class="comment">        - 参数：需要分离的线程的ID</span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            成功：0</span></span><br><span class="line"><span class="comment">            失败：返回错误号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chid thread id : %ld\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error1 : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出主线程和子线程的id</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid : %ld, main thread id : %ld\n&quot;</span>, tid, pthread_self());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置子线程分离,子线程分离后，子线程结束时对应的资源就不需要主线程释放</span></span><br><span class="line">    ret = pthread_detach(tid);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error2 : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置分离后，对分离的子线程进行连接 pthread_join() 是错误的</span></span><br><span class="line">    <span class="comment">// ret = pthread_join(tid, NULL);</span></span><br><span class="line">    <span class="comment">// if(ret != 0) &#123;</span></span><br><span class="line">    <span class="comment">//     char * errstr = strerror(ret);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;error3 : %s\n&quot;, errstr);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715094417683.png" alt="image-20220715094417683"></p><p>试试设置分离后，对分离的子线程进行join</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715094516540.png" alt="image-20220715094516540"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715094635605.png" alt="image-20220715094635605"></p><hr><h2 id="3-6-线程取消-pthread-cancel"><a href="#3-6-线程取消-pthread-cancel" class="headerlink" title="3.6 线程取消 pthread_cancel"></a>3.6 线程取消 pthread_cancel</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">    int pthread_cancel(pthread_t thread);</span></span><br><span class="line"><span class="comment">        - 功能：取消线程（让线程终止）</span></span><br><span class="line"><span class="comment">            取消某个线程，可以终止某个线程的运行，</span></span><br><span class="line"><span class="comment">            但是并不是立马终止，而是当子线程执行到一个取消点，线程才会终止。</span></span><br><span class="line"><span class="comment">            取消点：系统规定好的一些系统调用，我们可以粗略的理解为从用户区到内核区的切换，这个位置称之为取消点。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chid thread id : %ld\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child : %d\n&quot;</span>, i); <span class="comment">//这个是一个取消点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error1 : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消线程</span></span><br><span class="line">    pthread_cancel(tid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出主线程和子线程的id</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid : %ld, main thread id : %ld\n&quot;</span>, tid, pthread_self());</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715095844927.png" alt="image-20220715095844927"></p><p>子线程并没有打印完5个，而是在printf时到达取消点，就终止。</p><hr><h2 id="3-7线程属性"><a href="#3-7线程属性" class="headerlink" title="3.7线程属性"></a>3.7线程属性</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715100202031.png" alt="image-20220715100202031"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715100922322.png" alt="image-20220715100922322"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    int pthread_attr_init(pthread_attr_t *attr);</span></span><br><span class="line"><span class="comment">        - 初始化线程属性变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_attr_destroy(pthread_attr_t *attr);</span></span><br><span class="line"><span class="comment">        - 释放线程属性的资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);</span></span><br><span class="line"><span class="comment">        - 获取线程分离的状态属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);</span></span><br><span class="line"><span class="comment">        - 设置线程分离的状态属性</span></span><br><span class="line"><span class="comment">*/</span>     </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">callback</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chid thread id : %ld\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个线程属性变量</span></span><br><span class="line">    <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="comment">// 初始化属性变量</span></span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = pthread_create(&amp;tid, &amp;attr, callback, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> * errstr = strerror(ret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error1 : %s\n&quot;</span>, errstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取线程的栈的大小</span></span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">    pthread_attr_getstacksize(&amp;attr, &amp;size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread stack size : %ld\n&quot;</span>, size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出主线程和子线程的id</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid : %ld, main thread id : %ld\n&quot;</span>, tid, pthread_self());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放线程属性资源</span></span><br><span class="line">    pthread_attr_destroy(&amp;attr);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715101755534.png" alt="image-20220715101755534"></p><hr><h2 id="3-8-线程同步"><a href="#3-8-线程同步" class="headerlink" title="3.8 线程同步"></a>3.8 线程同步</h2><p>设计 有3个窗口 一共100个窗口。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用多线程实现买票的案例。</span></span><br><span class="line"><span class="comment">    有3个窗口，一共是100张票。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量，所有的线程都共享这一份资源。</span></span><br><span class="line"><span class="keyword">int</span> tickets = <span class="number">100</span>; <span class="comment">// 不能局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">sellticket</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 卖票</span></span><br><span class="line">    <span class="keyword">while</span>(tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        usleep(<span class="number">6000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld 正在卖第 %d 张门票\n&quot;</span>, pthread_self(), tickets);</span><br><span class="line">        tickets--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建3个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1, tid2, tid3;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收子线程的资源,阻塞</span></span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线程分离。</span></span><br><span class="line">    <span class="comment">// pthread_detach(tid1);</span></span><br><span class="line">    <span class="comment">// pthread_detach(tid2);</span></span><br><span class="line">    <span class="comment">// pthread_detach(tid3);</span></span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>); <span class="comment">// 退出主线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有问题</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715102933418.png" alt="image-20220715102933418"></p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715103248904.png" alt="image-20220715103248904"></p><p>临界区指tickets</p><hr><h2 id="3-9-互斥锁、互斥量-mutex"><a href="#3-9-互斥锁、互斥量-mutex" class="headerlink" title="3.9 互斥锁、互斥量 mutex"></a>3.9 互斥锁、互斥量 mutex</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715103532431.png" alt="image-20220715103532431"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715114012298.png" alt="image-20220715114012298"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715114054656.png" alt="image-20220715114054656"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    互斥量的类型 pthread_mutex_t</span></span><br><span class="line"><span class="comment">    int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);</span></span><br><span class="line"><span class="comment">        - 初始化互斥量</span></span><br><span class="line"><span class="comment">        - 参数 ：</span></span><br><span class="line"><span class="comment">            - mutex ： 需要初始化的互斥量变量</span></span><br><span class="line"><span class="comment">            - attr ： 互斥量相关的属性，NULL</span></span><br><span class="line"><span class="comment">        - restrict : C语言的修饰符，被修饰的指针，不能由另外的一个指针进行操作。</span></span><br><span class="line"><span class="comment">            pthread_mutex_t *restrict mutex = xxx;</span></span><br><span class="line"><span class="comment">            pthread_mutex_t * mutex1 = mutex; 不行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_mutex_destroy(pthread_mutex_t *mutex);</span></span><br><span class="line"><span class="comment">        - 释放互斥量的资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_mutex_lock(pthread_mutex_t *mutex);</span></span><br><span class="line"><span class="comment">        - 加锁，阻塞的，如果有一个线程加锁了，那么其他的线程只能阻塞等待</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_mutex_trylock(pthread_mutex_t *mutex);</span></span><br><span class="line"><span class="comment">        - 尝试加锁，如果加锁失败，不会阻塞，会直接返回。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int pthread_mutex_unlock(pthread_mutex_t *mutex);</span></span><br><span class="line"><span class="comment">        - 解锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量，所有的线程都共享这一份资源。</span></span><br><span class="line"><span class="keyword">int</span> tickets = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个互斥量</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">sellticket</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卖票</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            usleep(<span class="number">6000</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%ld 正在卖第 %d 张门票\n&quot;</span>, pthread_self(), tickets);</span><br><span class="line">            tickets--;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化互斥量</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建3个子线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid1, tid2, tid3;</span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, sellticket, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收子线程的资源,阻塞</span></span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>); <span class="comment">// 退出主线程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放互斥量资源</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有可能还是一个线程，如果票数增加就正确。</p><hr><h2 id="3-10-死锁"><a href="#3-10-死锁" class="headerlink" title="3.10 死锁"></a>3.10 死锁</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715142644522.png" alt="image-20220715142644522"></p><p>场景1：忘记释放锁，结果阻塞</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144054097.png" alt="image-20220715144054097"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144006208.png" alt="image-20220715144006208"></p><p>场景2：重复加相同锁</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144247466.png" alt="image-20220715144247466"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144309560.png" alt="image-20220715144309560"></p><p>场景3：多线程 多锁 抢占锁资源</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144806566.png" alt="image-20220715144806566"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220722212536063.png" alt="image-20220722212536063"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715144553043.png" alt="image-20220715144553043"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715145044194.png" alt="image-20220715145044194"></p><p>使用资源有序分配法，线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。</p><p>所以我们只需将线程 B 改成以相同顺序的获取资源，就可以打破死锁了。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/%E9%94%81%E4%B9%8B%E6%8F%90%E4%BE%9B.png" alt="img"></p><p>谈一谈「<strong>互斥锁、自旋锁、读写锁、乐观锁、悲观锁</strong>」的选择和使用。</p><p>当已经有一个线程加锁后，其他线程加锁则就会失败，互斥锁和自旋锁对于<code>加锁失败后</code>的处理方式是不一样的：</p><p><strong>互斥锁</strong>加锁失败后，线程会<strong>释放 CPU</strong> ，给其他线程；</p><p><strong>自旋锁</strong>加锁失败后，线程会<strong>忙等待</strong>，直到它拿到锁；</p><p><code>互斥锁</code>是一种「独占锁」，比如当线程 A 加锁成功后，此时互斥锁已经被线程 A 独占了，只要线程 A 没有释放手中的锁，线程 B 加锁就会失败，于是就会释放 CPU 让给其他线程，<strong>既然线程 B 释放掉了 CPU，自然线程 B 加锁的代码就会被阻塞</strong>。对于互斥锁加锁失败而阻塞的现象，是由<strong>操作系统内核实现的</strong>。当加锁失败时，内核会将线程置为「睡眠」状态，等到锁被释放后，内核会在合适的时机唤醒线程，当这个线程成功获取到锁后，于是就可以继续执行。</p><p>所以，互斥锁加锁失败时，会从用户态陷入到内核态，让内核帮我们切换线程，虽然简化了使用锁的难度，但是存在一定的性能开销成本。会有<strong>两次线程上下文切换的成本</strong>。所以，<strong>如果你能确定被锁住的代码执行时间很短，就不应该用互斥锁，而应该选用自旋锁，否则使用互斥锁。</strong></p><p>自旋锁是通过 CPU 提供的 <code>CAS</code> 函数（<em>Compare And Swap</em>），在「用户态」完成加锁和解锁操作，不会主动产生线程上下文切换，所以相比互斥锁来说，会快一些，开销也小一些。</p><p>一般加锁的过程，包含两个步骤：</p><ul><li>第一步，查看锁的状态，如果锁是空闲的，则执行第二步；</li><li>第二步，将锁设置为当前线程持有；</li></ul><p>CAS 函数就把这两个步骤合并成一条硬件级指令，形成<strong>原子指令</strong>，这样就保证了这两个步骤是不可分割的，要么一次性执行完两个步骤，要么两个步骤都不执行。</p><p>使用自旋锁的时候，当发生多线程竞争锁的情况，加锁失败的线程会「忙等待」，直到它拿到锁。这里的「忙等待」可以用 <code>while</code> 循环等待实现，不过最好是使用 CPU 提供的 <code>PAUSE</code> 指令来实现「忙等待」，因为可以减少循环等待时的耗电量。需要注意，在单核 CPU 上，需要抢占式的调度器（即不断通过时钟中断一个线程，运行其他线程）。否则，自旋锁在单 CPU 上无法使用，因为一个自旋的线程永远不会放弃 CPU。</p><p><strong>当加锁失败时，互斥锁用「线程切换」来应对，自旋锁则用「忙等待」来应对</strong>。</p><p>写锁是独占锁，因为任何时刻只能有一个线程持有写锁，类似互斥锁和自旋锁，而读锁是共享锁，因为读锁可以被多个线程同时持有。读写锁在读多写少的场景，能发挥出优势。</p><p>前面提到的互斥锁、自旋锁、读写锁，都是属于悲观锁。</p><p>悲观锁做事比较悲观，它认为<strong>多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁</strong>。</p><p>那相反的，如果多线程同时修改共享资源的概率比较低，就可以采用乐观锁。</p><p>乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是：<strong>先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作</strong>。可见，乐观锁的心态是，不管三七二十一，先改了资源再说。另外，你会发现<strong>乐观锁全程并没有加锁，所以它也叫无锁编程</strong>。</p><p>实际上，我们常见的 SVN 和 Git 也是用了乐观锁的思想，先让用户编辑代码，然后提交的时候，通过版本号来判断是否产生了冲突，发生了冲突的地方，需要我们自己修改后，再重新提交。</p><p>乐观锁虽然去除了加锁解锁的操作，但是一旦发生冲突，重试的成本非常高，所以<strong>只有在冲突概率非常低，且加锁成本非常高的场景时，才考虑使用乐观锁。</strong></p><hr><h2 id="3-11-读写锁"><a href="#3-11-读写锁" class="headerlink" title="3.11 读写锁"></a>3.11 读写锁</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715145139509.png" alt="image-20220715145139509"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715181242740.png" alt="image-20220715181242740"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    案例：8个线程操作同一个全局变量。</span></span><br><span class="line"><span class="comment">    3个线程不定时写这个全局变量，5个线程不定时的读这个全局变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个共享数据</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// pthread_mutex_t mutex;</span></span><br><span class="line"><span class="keyword">pthread_rwlock_t</span> rwlock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">writeNum</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwlock);</span><br><span class="line">        num++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;++write, tid : %ld, num : %d\n&quot;</span>, pthread_self(), num);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">readNum</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwlock);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;===read, tid : %ld, num : %d\n&quot;</span>, pthread_self(), num);</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   pthread_rwlock_init(&amp;rwlock, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建3个写线程，5个读线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> wtids[<span class="number">3</span>], rtids[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        pthread_create(&amp;wtids[i], <span class="literal">NULL</span>, writeNum, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_create(&amp;rtids[i], <span class="literal">NULL</span>, readNum, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置线程分离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">       pthread_detach(wtids[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         pthread_detach(rtids[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_rwlock_destroy(&amp;rwlock);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用锁之前效果</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715182857154.png" alt="image-20220715182857154"></p><p> 利用互斥锁试试，但是互斥锁，当有一个线程读的时候，其他线程不能读，效率太低。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715183025599.png" alt="image-20220715183025599"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715183039703.png" alt="image-20220715183039703"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715183110137.png" alt="image-20220715183110137"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715183154178.png" alt="image-20220715183154178"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715183338882.png" alt="image-20220715183338882"></p><p>结果虽然正确。读写锁才能保证其他线程也能读，且效率更高。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715191430731.png" alt="image-20220715191430731"></p><hr><h2 id="3-12-生产者消费者模型"><a href="#3-12-生产者消费者模型" class="headerlink" title="3.12 生产者消费者模型"></a>3.12 生产者消费者模型</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715194155420.png" alt="image-20220715194155420"></p><p>生产者 将东西 生产到容器中，消费者从容器中消费。当容器满了，生产者通知消费者取走东西，当容器为空，消费者通知生产者生产。</p><p>条件变量，信号量。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    生产者消费者模型（粗略的版本）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个互斥量</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">producer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不断的创建新的节点，添加到链表中</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">newNode</span> =</span> (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        head = newNode;</span><br><span class="line">        newNode-&gt;num = rand() % <span class="number">1000</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;add node, num : %d, tid : %ld\n&quot;</span>, newNode-&gt;num, pthread_self());</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">customer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="comment">// 保存头结点的指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">tmp</span> =</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否有数据</span></span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 有数据</span></span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;del node, num : %d, tid : %ld\n&quot;</span>, tmp-&gt;num, pthread_self());</span><br><span class="line">            <span class="built_in">free</span>(tmp);</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            usleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有数据</span></span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建5个生产者线程，和5个消费者线程, 容器是列表</span></span><br><span class="line">    <span class="keyword">pthread_t</span> ptids[<span class="number">5</span>], ctids[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_create(&amp;ptids[i], <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;ctids[i], <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_detach(ptids[i]);</span><br><span class="line">        pthread_detach(ctids[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715220400658.png" alt="image-20220715220400658"></p><p>出现问题，互斥量来确保同步，还需要 条件变量或信号量来解决生产者和消费者 同步问题。</p><p><em>以上代码是粗略代码造成的结果</em></p><hr><h2 id="3-13-条件变量"><a href="#3-13-条件变量" class="headerlink" title="3.13 条件变量"></a>3.13 条件变量</h2><p>加上互斥锁之后结果：</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715221736873.png" alt="image-20220715221736873"></p><p>没问题，这么做但不好。需要生产者和消费者各自判断，最好需要通知方式。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715221857709.png" alt="image-20220715221857709"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    条件变量的类型 pthread_cond_t</span></span><br><span class="line"><span class="comment">    int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);</span></span><br><span class="line"><span class="comment">    int pthread_cond_destroy(pthread_cond_t *cond);</span></span><br><span class="line"><span class="comment">    int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);</span></span><br><span class="line"><span class="comment">        - 等待，调用了该函数，线程会阻塞。</span></span><br><span class="line"><span class="comment">    int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);</span></span><br><span class="line"><span class="comment">        - 等待多长时间，调用了这个函数，线程会阻塞，直到指定的时间结束。</span></span><br><span class="line"><span class="comment">    int pthread_cond_signal(pthread_cond_t *cond);</span></span><br><span class="line"><span class="comment">        - 唤醒一个或者多个等待的线程</span></span><br><span class="line"><span class="comment">    int pthread_cond_broadcast(pthread_cond_t *cond);</span></span><br><span class="line"><span class="comment">        - 唤醒所有的等待的线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个互斥量</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="comment">// 创建条件变量</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> cond;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">producer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不断的创建新的节点，添加到链表中</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">newNode</span> =</span> (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        head = newNode;</span><br><span class="line">        newNode-&gt;num = rand() % <span class="number">1000</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;add node, num : %d, tid : %ld\n&quot;</span>, newNode-&gt;num, pthread_self());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 只要生产了一个，就通知消费者消费</span></span><br><span class="line">        pthread_cond_signal(&amp;cond);<span class="comment">////</span></span><br><span class="line"></span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">customer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="comment">// 保存头结点的指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">tmp</span> =</span> head;</span><br><span class="line">        <span class="comment">// 判断是否有数据</span></span><br><span class="line">        <span class="keyword">if</span>(head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 有数据</span></span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;del node, num : %d, tid : %ld\n&quot;</span>, tmp-&gt;num, pthread_self());</span><br><span class="line">            <span class="built_in">free</span>(tmp);</span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">            usleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有数据，需要等待</span></span><br><span class="line">            <span class="comment">// 当这个函数调用阻塞wait的时候，会对互斥锁进行解锁，当不阻塞的，继续向下执行，会重新加锁。从而生产者可以继续执行</span></span><br><span class="line">            pthread_cond_wait(&amp;cond, &amp;mutex); <span class="comment">////</span></span><br><span class="line">            pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_cond_init(&amp;cond, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建5个生产者线程，和5个消费者线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> ptids[<span class="number">5</span>], ctids[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_create(&amp;ptids[i], <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;ctids[i], <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_detach(ptids[i]);</span><br><span class="line">        pthread_detach(ctids[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_cond_destroy(&amp;cond);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715233223049.png" alt="image-20220715233223049"></p><hr><h2 id="3-14-信号量-semaphore"><a href="#3-14-信号量-semaphore" class="headerlink" title="3.14 信号量 semaphore"></a>3.14 信号量 semaphore</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220715233434744.png" alt="image-20220715233434744"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    信号量的类型 sem_t</span></span><br><span class="line"><span class="comment">    int sem_init(sem_t *sem, int pshared, unsigned int value);</span></span><br><span class="line"><span class="comment">        - 初始化信号量</span></span><br><span class="line"><span class="comment">        - 参数：</span></span><br><span class="line"><span class="comment">            - sem : 信号量变量的地址</span></span><br><span class="line"><span class="comment">            - pshared : 0 用在线程间 ，非0 用在进程间</span></span><br><span class="line"><span class="comment">            - value : 信号量中的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int sem_destroy(sem_t *sem);</span></span><br><span class="line"><span class="comment">        - 释放资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int sem_wait(sem_t *sem);</span></span><br><span class="line"><span class="comment">        - 对信号量加锁，调用一次对信号量的值-1，如果值为0，就阻塞</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int sem_trywait(sem_t *sem);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);</span></span><br><span class="line"><span class="comment">    int sem_post(sem_t *sem);</span></span><br><span class="line"><span class="comment">        - 对信号量解锁，调用一次对信号量的值+1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int sem_getvalue(sem_t *sem, int *sval);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    sem_t psem;</span></span><br><span class="line"><span class="comment">    sem_t csem;</span></span><br><span class="line"><span class="comment">    init(psem, 0, 8);</span></span><br><span class="line"><span class="comment">    init(csem, 0, 0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    producer() &#123;</span></span><br><span class="line"><span class="comment">        sem_wait(&amp;psem);</span></span><br><span class="line"><span class="comment">        sem_post(&amp;csem)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    customer() &#123;</span></span><br><span class="line"><span class="comment">        sem_wait(&amp;csem);</span></span><br><span class="line"><span class="comment">        sem_post(&amp;psem)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个互斥量</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="comment">// 创建两个信号量</span></span><br><span class="line"><span class="keyword">sem_t</span> psem;</span><br><span class="line"><span class="keyword">sem_t</span> csem;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">producer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不断的创建新的节点，添加到链表中</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;psem);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">newNode</span> =</span> (struct Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">        newNode-&gt;next = head;</span><br><span class="line">        head = newNode;</span><br><span class="line">        newNode-&gt;num = rand() % <span class="number">1000</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;add node, num : %d, tid : %ld\n&quot;</span>, newNode-&gt;num, pthread_self());</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sem_post(&amp;csem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">customer</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;csem);</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="comment">// 保存头结点的指针</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">tmp</span> =</span> head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;del node, num : %d, tid : %ld\n&quot;</span>, tmp-&gt;num, pthread_self());</span><br><span class="line">        <span class="built_in">free</span>(tmp);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sem_post(&amp;psem);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    sem_init(&amp;psem, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    sem_init(&amp;csem, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建5个生产者线程，和5个消费者线程</span></span><br><span class="line">    <span class="keyword">pthread_t</span> ptids[<span class="number">5</span>], ctids[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_create(&amp;ptids[i], <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">        pthread_create(&amp;ctids[i], <span class="literal">NULL</span>, customer, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pthread_detach(ptids[i]);</span><br><span class="line">        pthread_detach(ctids[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716000312137.png" alt="image-20220716000312137"></p>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第三章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>socket.io模块学习记录</title>
    <link href="https://tsuiwade.github.io/2022/07/10/blog53-socketio/"/>
    <id>https://tsuiwade.github.io/2022/07/10/blog53-socketio/</id>
    <published>2022-07-10T15:38:49.000Z</published>
    <updated>2022-07-10T15:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Socket.IO 是一个库，可以在客户端和服务器之间实现<strong>低延迟</strong>、<strong>双向</strong>和<strong>基于事件的</strong>通信</p><p><strong>Socket.IO</strong> 是一个面向实时 <a href="https://zh.m.wikipedia.org/w/index.php?title=Web_应用&amp;action=edit&amp;redlink=1">web 应用</a>的 <a href="https://zh.m.wikipedia.org/wiki/JavaScript">JavaScript</a> 库。它使得服务器和客户端之间实时双向的通信成为可能。他有两个部分：在<a href="https://zh.m.wikipedia.org/wiki/浏览器">浏览器</a>中运行的<a href="https://zh.m.wikipedia.org/wiki/客户端">客户端</a>库，和一个面向<a href="https://zh.m.wikipedia.org/wiki/Node.js">Node.js</a>的服务端库。两者有着几乎一样的<a href="https://zh.m.wikipedia.org/wiki/API">API</a>。像Node.js一样，它也是<a href="https://zh.m.wikipedia.org/w/index.php?title=事件驱动程序设计&amp;action=edit&amp;redlink=1">事件驱动</a>的.</p><p>Socket.IO 主要使用<a href="https://zh.m.wikipedia.org/wiki/WebSocket">WebSocket</a>协议。但是如果需要的话，Socket.io可以回退到几种其它方法，例如<a href="https://zh.m.wikipedia.org/wiki/Adobe_Flash">Adobe Flash</a> Sockets，<a href="https://zh.m.wikipedia.org/wiki/JSONP">JSONP</a>拉取，或是<a href="https://zh.m.wikipedia.org/wiki/Comet_(web技术">传统的AJAX拉取</a>)，并且在同时提供完全相同的接口。尽管它可以被用作WebSocket的<a href="https://zh.m.wikipedia.org/w/index.php?title=Wrapper_library&amp;action=edit&amp;redlink=1">包装库</a>，它还是提供了许多其它功能，比如广播至多个套接字，存储与不同客户有关的数据，和<a href="https://zh.m.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;redlink=1">异步IO操作</a>。</p><p>可以使用<a href="https://zh.m.wikipedia.org/wiki/Node包管理器">npm</a>（node 软件包）工具来安装。</p><p> Socket 为客户端和服务器提供了双向通信机制。</p><p>这意味着服务器可以 <em>推送</em> 消息给客户端。无论何时你发布一条消息，服务器都可以接收到消息并推送给其他连接到服务器的客户端。</p><p>Socket.IO 的核心理念就是允许发送、接收任意事件和任意数据。任意能被编码为 JSON 的对象都可以用于传输。二进制数据也是支持的。</p><p>这里的实现方案是，当用户输入消息时，服务器接收一个 <code>chat message</code> 事件。<code>index.html</code> 文件中的 <code>script</code> 部分现在应该内容如下：</p><p>接下来的目标就是让服务器将消息发送给其他用户。</p><p>要将事件发送给每个用户，Socket.IO 提供了 <code>io.emit</code> 方法：</p><hr><hr><h1 id="socket（套接字？插槽）"><a href="#socket（套接字？插槽）" class="headerlink" title="socket（套接字？插槽）"></a>socket（套接字？插槽）</h1><p>Socket其实并不是一个协议，而是为了方便使用TCP或UDP而抽象出来的一层，是位于应用层和传输控制层之间的一组接口。“Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，提供一套调用TCP/IP协议的API。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220711204509818.png" alt="image-20220711204509818" style="zoom:67%;" /></p><p>所谓 socket（套接字），就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字<strong>上联应用进程，下联网络协议栈</strong>，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。</p><p>socket 可以看成是两个网络应用程序进行通信时，各自通信连接中的端点，这是一个逻辑上的概念。它是网络环境中进程间通信的 API，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相连进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 socket 中，该 socket 通过与网络接口卡（NIC）相连的传输介质将这段信息送到另外一台主机的 socket 中，使对方能够接收到这段信息。<strong>socket 是由 IP 地址和端口结合的，提供向应用层进程传送数据包的机制。</strong></p><p>socket 本身有“插座”的意思，在 Linux 环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。既然是文件，那么理所当然的，我们可以使用文件描述符引用套接字。与管道类似的，Linux 系统将其封装成文件的目的是为了统一接口，使得读写套接字和读写文件的操作一致。区别是管道主要应用于本地进程间通信，而套接字多应用于网络进程间数据的传递。  </p><p>// 套接字通信分两部分：<br>- 服务器端：被动接受连接，一般不会主动发起连接<br>- 客户端：主动向服务器发起连接<br>socket是一套通信的接口，Linux 和 Windows 都有，但是有一些细微的差别  </p><h1 id="websocket和http的关系"><a href="#websocket和http的关系" class="headerlink" title="websocket和http的关系"></a>websocket和http的关系</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>1、都是基于TCP的，都是可靠传输协议。</p><p>2、都是应用层协议。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220711203604868.png" alt="image-20220711203604868" style="zoom: 80%;" /></p><h1 id="Http、Socket、WebSocket之间联系与区别"><a href="#Http、Socket、WebSocket之间联系与区别" class="headerlink" title="Http、Socket、WebSocket之间联系与区别"></a><a href="https://www.cnblogs.com/aspirant/p/11334957.html">Http、Socket、WebSocket之间联系与区别</a></h1><p><strong>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</strong></p><p>可以把WebSocket想象成HTTP(应用层)，HTTP和Socket什么关系，WebSocket和Socket就是什么关系。</p><p>HTTP 协议有一个缺陷：通信只能由客户端发起，做不到服务器主动向客户端推送信息。</p><p><strong>WebSocket 协议 它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</strong></p><hr><p>socket和http的区别：<br>Http协议：简单的对象访问协议，对应于应用层。Http协议是基于TCP链接的。<br>tcp协议：对应于传输层<br>ip协议：对应于网络层<br>TCP/IP是传输层协议，主要解决数据如何在网络中传输；而Http是应用层协议，主要解决如何包装数据。</p><p><strong>Socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。</strong></p><hr><p>Http连接：http连接就是所谓的短连接，及客户端向服务器发送一次请求，服务器端相应后连接即会断掉。</p><p>socket连接：socket连接及时所谓的长连接，理论上客户端和服务端一旦建立连接，则不会主动断掉；但是由于各种环境因素可能会是连接断开，比如说：服务器端或客户端主机down了，网络故障，或者两者之间长时间没有数据传输，网络防火墙可能会断开该链接已释放网络资源。所以当一个socket连接中没有数据的传输，那么为了位置连续的连接需要发送心跳消息，具体心跳消息格式是开发者自己定义的。</p><hr><p>1.HTTP的长连接一般就只能坚持一分钟而已，而且是浏览器决定的，你的页面很难控制这个行为。<br>Socket连接就可以维持很久，几天、数月都有可能，只要网络不断、程序不结束，而且是可以编程灵活控制的。<br>2.HTTP连接是建立在Socket连接之上。在实际的网络栈中，Socket连接的确是HTTP连接的一部分。但是从HTTP协议看，它的连接一般是指它本身的那部分。</p><hr><p>TCP/IP协议栈主要分为四层:应用层、传输层、网络层、数据链路层,</p><p>每层都有相应的协议，如下图（TCP/IP四层模型）</p><p>应用层包括http（万维网）、ftp（文件传输）、smtp（电子邮件）、dns、telnet</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/9dbde0322cc1482fa17b38a4e3bfe664.jpeg" alt="img"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716100956055.png" alt="image-20220716100956055"></p><p>之前不太懂为什么有OSI七层模型、四层模型，其实他们的区分标准在于OSI七层模型是理论上的分层方式，而四层模型是实践过程中的分层模型。</p><p>OSI七层模型ISO（国际标准化组织）提出的一套理论性的网络标准化协议，可以把它看成一本教科书，它在指定之前是没有经过实践的，而为什么我们实践的过程中又没有遵循OSI的标准来分层呢，是因为我们在实践的过程中发现有些功能不必要分得那么细，而TCP四层模型就是我们实践过程中发现比较合理的分层，虽然我们实际过程中都没有按OSI分为七层，但是OSI对我们实践过程分层有着指导性的意义。</p><p>五层协议将四层协议中的网络接口层分为数据链路层和物理层</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/v2-9120fb10ff256120099cd152799fe309_720w.jpg" alt="img"></p><p><strong>TPC/IP协议栈，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。</strong></p><p>把<strong>IP想像两个站点</strong>，<strong>TCP和UDP是高速公路，HTTP 、FTP 就是货车</strong>，而 Socket 就是两个站点的检票口。<strong>货车(http)在一端站点(ip)先通过检票口(socket)，检票后行驶在高速公路(tcp)上，到达另一站点(ip)卸载货物(http)。</strong></p><hr><p><a href="https://www.jianshu.com/p/4e80b931cdea">https://www.jianshu.com/p/4e80b931cdea</a></p><h3 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h3><p>Socket.io提供了基于事件的实时双向通讯</p><p>Browser和WebServer间的实时数据传输是一个很重要的需求，但最早只能通过AJAX轮询方式实现。在WebSocket标准没有推出之前，AJAX轮询是一种可行的方案。</p><p>AJAX轮询原理是设置定时器，定时通过AJAX同步服务端数据。这种方式存在延时且对服务端造成很大负载。直至2011年，IETF才标准化WebSocket - 一种基于TCP套接字进行收发数据的协议。</p><h3 id="WebSocket-协议"><a href="#WebSocket-协议" class="headerlink" title="WebSocket 协议"></a>WebSocket 协议</h3><p>WebSocket是HTML5新增的一种<strong>通信协议</strong>，其特点是服务端可以主动向客户端推送信息，客户端也可以主动向服务端发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p>在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后浏览器和服务端之间就形成了一条快速通道，两者之间就直接可以数据相互传送，带来的好处是</p><ol><li>相互沟通的<code>Header</code>很小，大概只有2Bytes。</li><li>服务器不再被动的接收到浏览器的请求之后才返回数据，而是在有新数据时就主动推送给浏览器。</li></ol><p>为了建立一个WebSocket连接，浏览器首先要向服务器发起一个HTTP请求，这个请求和通常的HTTP请求不同，包含了一些附加头信息，其中附加头信息<code>Upgrade: WebSocket</code>表明这是一个申请协议升级的HTTP请求。服务端解析这些头信息，然后产生应答信息返回给客户端，客户端和服务端的WebSocket连接就建立起来了。双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续直到客户端或者服务端的某一方主动关闭连接。</p><h3 id="为什么要使用WebSocket呢？"><a href="#为什么要使用WebSocket呢？" class="headerlink" title="为什么要使用WebSocket呢？"></a>为什么要使用WebSocket呢？</h3><p>Browser已经支持HTTP协议，为什么还要开发一种新的WebSocket协议呢？</p><p><strong>我们知道HTTP协议是一种单向的网络协议，在建立连接后，仅允许Browser/UserAgent向WebServer发出请求资源后，WebServer才能返回对应的数据，而WebServer不能主动的推送数据给Browser/UserAgent。</strong></p><p>最初这么设计HTTP协议的原因是，假设WebServer能主动的推送数据给Browser/UserAgent，那么Browser/UserAgent就太容易受到攻击了，一些广告商也会主动把广告在不经意间强行的传输给客户端，这不能不说是一个灾难。那么单向的HTTP协议给Web应用开发带哪些问题呢？</p><p>现在假设我们要开发一个基于Web的应用去获取当前WebServer的实时数据。例如股票实时行情、火车票剩余票数等。这就需要Browser/UserAgent与WebServer之间反复进行HTTP通信，Browser/UserAgent不断的发送请求去获取当前的实时数据。</p><p>常见的方式</p><ul><li>Polling</li></ul><p><strong>Polling轮询是通过Browser/UserAgent定时向WebServer发送HTTP请求</strong>，WebServer收到请求后把最新的数据发回给Browser/UserAgent，Browser/UserAgent得到数据后将其显示，然后再定期重复此过程。</p><p>虽然这样可以满足需求，但仍存在问题，例如某段时间内WebServer没有更新的数据，但Browser/UserAgent仍然会定时发送请求过来询问，WebServer可以把以前的老数据再传送过去，Browser/UserAgent把这些没有变化的数据再显示出来。这样既浪费网络带宽，有浪费CPU利用率。</p><p>如果说把Browser/UserAgent发送请求的周期调大一些，就可以缓解这个问题，但如果WebServer的数据更新很快时，这样又不能保证Web应用获取数据的实时性。</p><ul><li>LongPolling</li></ul><p>LongPolling是对Polling的一种改进。</p><p>Browser/UserAgent发送HTTP请求到WebServer，此时WebServer可以做2件事情：</p><ol><li>如果WebServer有新的数据需要传送，就立即把数据发回给Browser/UserAgent，Browser/UserAgent收到数据后，立即再发送HTTP请求给WebServer。</li><li>如果WebServer没有新数据需要传送，这里与Polling的方式不同的是，WebServer不是立即发送回应给Browser/UserAgent，而是将这个请求保持住，等待有新的数据来到，再去响应这个请求。当然，如果WebServer的数据长期没有更新，一段时间后，这个HTTP请求就会超时，Browser/UserAgent收到超时信息后，在立即发送一个新的HTTP请求给服务器，然后依次循环这个过程。</li></ol><p>LongPolling的方式虽然在某种程度上减少了网络带宽和CPU利用率等问题，但仍存在缺陷。</p><p>例如WebServer的数据更新速度较快，WebServer在传送一个数据包给Browser/UserAgent后必须等待Browser的下一个HTTP请求到来，才能传递第二个更新的数据包给Browser。这样的话，Browser显示实时数据最快的时间为2 xRTT（往返时间）。另外在网络拥堵的情况下，这个应该是不能让用户接受的。另外，由于HTTP数据包的头部数据量很大（通常有400多个字节），但真正被服务器需要的数据却很少（有时只有10个字节左右），这样的数据包在网络上周期性传输，难免对网络带宽是一种浪费。</p><p>综上所述，要是在Browser有一种新的网路一些，能支持客户端和服务端的双向通信，而且协议的头部又不那么庞大就very nice了。WebSocket正是肩负这样的使命登上了Web的舞台。</p><h3 id="WebSocket-原理"><a href="#WebSocket-原理" class="headerlink" title="WebSocket 原理"></a>WebSocket 原理</h3><p>WebSocket是一种<strong>双向通信协议</strong>，它建立在TCP之上，同HTTP一样通过TCP来传输数据，但与HTTP最大不同的是：</p><ol><li>WebSocket是一种双向通信协议，在建立连接后，WebSocket服务器和Browser/UserAgent都能主动的向对象发送或接收数据，就像Socket一样，不同的是WebSocket是一种建立在Web基础上的简单模拟Socket的协议。</li><li>WebSocket需要通过握手连接，类似TCP也需要客户端和服务端进行握手连接，连接成功后才能相互通信。</li></ol><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/4933701-2e68a6248c39caa9.gif" alt="img"></p><p>简单说明下WebSocket握手的过程</p><p>当Web应用端调用<code>new WebSocket(url)</code>接口时，Browser就开始了与地址为URL的WebServer建立握手连接的过程。</p><ol><li>Browser与WebSocket服务器通过TCP三次握手建立连接，如果这个建立连接失败，那么后面的过程就不会执行，Web应用将收到错误消息通知。</li><li>在TCP建立连接成功后，Browser/UserAgent通过HTTP协议传送WebSocket支持的版本号、协议的字版本号、原始地址、主机地址等一系列字段给服务端。</li><li>WebSocket服务器收到Browser/UserAgent发送来的握手请求后，如果数据包数据和格式正确，客户端和服务端的协议版本匹配等，就接受本次握手连接，并给出对应的数据回复，同样回复的数据包也是采用HTTP协议传输。</li><li>Browser收到服务器回复的数据包后，如果数据包内容、格式都没有问题的话，就表示本次连接成功，触发<code>onopen</code>消息，此时Web开发者就可以在此时通过<code>send</code>接口向服务器发送数据。否则，握手连接失败，Web应用会收到<code>onerror</code>消息，并且能知道连接失败的原因。</li></ol><h3 id="WebSocket与TCP、HTTP的关系"><a href="#WebSocket与TCP、HTTP的关系" class="headerlink" title="WebSocket与TCP、HTTP的关系"></a>WebSocket与TCP、HTTP的关系</h3><h1 id="“三次握手，四次挥手”你真的懂吗？"><a href="#“三次握手，四次挥手”你真的懂吗？" class="headerlink" title="“三次握手，四次挥手”你真的懂吗？"></a>“三次握手，四次挥手”你真的懂吗？</h1><p>客户端：是服务器吗？我要跟你通信，听得到我说话吗？<br>服务器：可以通信，你听得到我说话吗？<br>客户端：我也听得到。</p><p>是双工</p><p>三次握手和四次挥手TCP一定是客户端发起 （谁发请求谁就是客户端） （http是基于tcp连接的）</p><p>TCP滑动窗口<a href="https://www.bilibili.com/video/BV1PZ4y1P7zp">https://www.bilibili.com/video/BV1PZ4y1P7zp</a></p><p>UDP报文格式：源端口+目标端口+报文长度+内容</p><p>TCP报文格式，一行4字节，1字节8位</p><p>16位源端口号 | 16位目的端口号</p><p>32位序号（seq 每个报文的序号，随机生成</p><p>32位确认序号 ack （服务器的ack=客户端发起请求的seq+1， 客户端的ack=服务器的seq+1</p><p>4位首部长度 | 保留6位 | URG | ACK(1位标志位) | PSH | RST | SYN(1位， 为1则为新) | FIN(我要结束，我要断开) | 16位窗口大小 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710220737099.png" alt="image-20220710220737099"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716200913805.png" alt="image-20220716200913805"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716201845317.png" alt="image-20220716201845317"></p><p>全文背诵：</p><p>面试官你好，这个问题我是知道的。TCP/IP协议是传输层的一个面向连接的安全可靠的传输协议。</p><p>三次握手的机制是为了保证能建立一个安全可靠的连接；第一次握手是由客户端发起，客户端会向服务端发送一个报文，报文里面SYN标志位是置1的，当服务端收到这个报文的时候就知道客户端要和我发起一个新的连接，于是服务端就向客户端发送一个确认消息包ACK位置1，以上两次握手之后，对于客户端而言，其实是已经知道了所有信息，就是我既能给服务端发送消息，我还能收到服务端的消息；对于服务端而言，两次握手是不够的，因为到目前为止，服务端只知道一件事情，就是客户端给我发送的消息我收的到，但是我发给客户端的消息，客户端能不能收到我还不知道。</p><p>所以还要进行第三次握手。第三次握手就是当客户端收到服务端发过来的确认消息的报文之后，还要继续给服务端进行一个回应，也是一个ACK位置1的一个确认消息。</p><p>通过以上三次连接，不管是服务端还是客户端都彼此知道了，我既能给对方发送消息也能收到对方的消息，那么这个连接就能被安全的建立了。</p><p>四次握手机制，也是由客户端（服务器也可以）首先发起的，客户端会发起一个报文，在报文里面FIN标志位置1；当服务端收到这报文之后，我就知道了客户端想要和我断开连接，但是此时服务端不一定能做好准备，因为当客户端发起断开连接的时候，对于服务端而言它极有可能有未发送完的的消息，它还要继续发送；所以此时对于服务端而言他只能进行一个消息确认，我先告诉对方，我知道你要和我断开连接了，但是我这还可能没有做好准备，你还需要等我一下，等会我会告诉你；于是，发完这个消息确认包后，可能稍作片刻，它可能会继续发送一个断开连接的报文，一个FIN位置1的报文，是由服务端发给客户端的，这个报文表示了服务端已经做好了断开连接的准备，那么当这个报文发给客户端的时候，客户端同样要给服务端继续发送一个消息确认的报文。一共有四次，通过这四次的相互沟通和连接，我就知道了，不管是服务端还是客户端都已经做好了断开连接的准备，于是连接就可以被断开了。</p><p>这是我对三次握手和四次挥手的理解。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710221248490.png" alt="image-20220710221248490"></p><p>为什么服务器要分两次挥手，因为有可能正在发送一个数据给客户端，不能立刻断开。</p><p>server的第二步说：我知道你要和我断开，你先等我一下，我还没传输完。</p><p>server的第三步说：我终于传输完了，客户端你断开吧。</p><p>四次挥手发生在断开连接的时候，在程序中当调用了close()会使用TCP协议进行四次挥手。<br>客户端和服务器端都可以主动发起断开连接，谁先调用close()谁就是发起。<br>因为在TCP连接的时候，采用三次握手建立的的连接是双向的，在断开的时候需要双向断开。  </p><h1 id="网络分层结构"><a href="#网络分层结构" class="headerlink" title="网络分层结构"></a>网络分层结构</h1><p>开放系统互连参考模型 (Open System Interconnect 简称OSI）</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220711171534690.png" alt="image-20220711171534690"></p><p>7、应用层：用户app里的数据，图片、声音、文字</p><p>6、表示层： 用bmp或jpeg编码表示图片数据，WAV或mp3编码表示声音数据，wmv或avi编码表示视频数据。</p><p>5、会话层：会话连接，建立两个应用软件之间的会话关系和连接。</p><p>4、传输层（数据段）：简历TCP或UDP连接，建立端到端的连接。 给报文打上端口号，例如80是网页数据，4000是qq数据</p><p>3、网络层（数据包）：给数据表打上ip地址，并且使用路由转发。使用的协议统一，网络层基于IP地址进行<strong>路由</strong>转发。进行数据传输：路由数据包，选择传递数据的最佳路径，支持逻辑<strong>寻址</strong>和路径选择。</p><p>2、数据链路层（数据帧）：以太网协议，mac地址，访问介质：定义如何格式化数据以便传输以及访问网络，支持错误检测。</p><p>1、物理层（数据位）：网线，二进制传输，定义了各种规范。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716100310633.png" alt="image-20220716100310633"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224132044.png" alt="image-20220710224132044"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224203925.png" alt="image-20220710224203925"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224218692.png" alt="image-20220710224218692"></p><h1 id="网络模型图"><a href="#网络模型图" class="headerlink" title="网络模型图"></a>网络模型图</h1><p>socket就是这里的TCP或UDP</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710230633852.png" alt="image-20220710230633852"></p><h1 id="基于TCP-UDP协议的应用层协议有哪些？"><a href="#基于TCP-UDP协议的应用层协议有哪些？" class="headerlink" title="基于TCP/UDP协议的应用层协议有哪些？"></a>基于TCP/UDP协议的应用层协议有哪些？</h1><p>1、基于TCP的<strong>应用层</strong>协议有：HTTP、FTP、SMTP、TELNET、SSH<br>协议    全称    默认端口<br>HTTP （ 浏览网页 ）    HyperText Transfer Protocol（超文本传输协议）    80<br>FTP    File Transfer Protocol (文件传输协议)    20用于传输数据，21用于传输控制信息<br>SMTP    Simple Mail Transfer Protocol (简单邮件传输协议)    25<br>TELNET    Teletype over the Network (远程登录，明码传输)    23</p><p>WebSocket 80或443端口丰富</p><p>SSH    Secure Shell（远程，加密传输）    22  使用多种加密技术 保证在 用户终端和服务器之间 建立加密安全连接</p><p>对称加密是一种加密类型，在加密和解密时候使用同一个密钥。SSH数据传输时候基本上所有过程都是使用对称密钥来加密。只有在刚开始创建连接阶段和身份认证握手阶段才使用非对称加密。为了确保信息的安全传输，SSH 在事物中的多个地方采用了多种不同类型的数据操纵技术，包括对称加密，非对称加密以及哈希。</p><p>2、基于UDP的应用层协议：DNS、TFTP（简单文件传输协议）、SNMP：简单网络管理协议<br>协议    全称    默认端口<br>DNS    Domain Name Service (域名服务)    53<br>TFTP    Trivial File Transfer Protocol (简单文件传输协议)    69<br>SNMP    Simple Network Management Protocol (简单网络管理协议)    通过UDP端口161接收，只有Trap信息采用UDP端口162。<br>NTP    Network Time Protocol (网络时间协议)    123</p><hr><p>网络层有ip协议、IGMP、ICMP协议</p><p>数据链路层有ethernet以太网、ppp、PPPoE协议。</p><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220801211824291.png" alt="image-20220801211824291"></p><p><strong>传输控制协议TCP(Transmission Control Protocol)</strong></p><p> <strong>用户数据包协议UDP(User Datagram Protocol)</strong></p><ol><li>TCP是面向<strong>连接</strong>的，通过三次握手建立客户端和服务端之间的可靠连接，而UDP是面向无连接的，不需要建立连接就可以直接给多台机器发送数据。</li><li>TCP保证<strong>可靠</strong>服务，会进行超时重传。而UDP不保证可靠交付。</li><li>TCP是面向<strong>字节流</strong>的协议，字节流没有头尾，但是流通过报文段发送出去，UDP是面向<strong>报文</strong>的协议，通过数据报发送数据。</li><li>TCP有流量控制（滑动窗口），拥塞控制（慢启动、拥塞避免、快重传、快恢复）等<strong>机制</strong>，而UDP只受数据生成的<strong>速率</strong>等影响，跟网络状况无关。</li><li>TCP是点对点连接的（全双工），UDP支持一对一、一对多、多对一和多对多的连接。</li></ol><p>UDP适合：直播，实时游戏，http3.0等场景。<br>不需要建立连接，一对一沟通，可以广播，对于丢包不敏感，网络较好的内网，即使网络不畅也不能降低数据发送的速度。</p><p>TCP适合发送文件 发送邮件 浏览网页</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224707044.png" alt="image-20220710224707044"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224734156.png" alt="image-20220710224734156"></p><p><strong>TCP面向字节流与UDP面向报文</strong><br>之前对于tcp和udp只是记住了一个面向字节流，一个是面向报文的，但是并没有真正的理解</p><p>通俗的解释：</p><p>面向<strong>报文</strong>的传输方式是应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。若报文太长，则IP层需要分片，降低效率。若太短，会是IP太小。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这也就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文。不会出现黏包的问题。</p><p>面向<strong>字节流</strong>的话，虽然应用程序和TCP的交互是一次一个数据块(大小不等)，但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应用程序传送的数据块太长，TCP就可以把它划分短一些再传送。如果应用程序一次只发送一个字节，TCP也可以等待积累有足够多的字节后再构成报文段发送出去。会出现黏包的问题。</p><h1 id="浏览器输入URL返回页面的过程"><a href="#浏览器输入URL返回页面的过程" class="headerlink" title="浏览器输入URL返回页面的过程"></a>浏览器输入URL返回页面的过程</h1><ol><li>首先解析域名，通过DNS查询，找到域名的IP地址</li><li>浏览器利用IP直接和网站主机通信，三次握手，<strong>建立TCP连接</strong>。浏览器会以一个随机端口向服务器的web程序80（HTTP是90端口，HTTPS是443端口）端口发起TCP的连接。</li><li>建立TCP连接吼，浏览器向主机发起一个HTTP请求。</li><li>服务器响应请求，返回响应数据。</li><li>浏览器解析响应内容，进行渲染，呈现给用户。</li><li>HTTP请求结束，断开TCP连接。</li></ol><h1 id="深入理解DNS解析过程"><a href="#深入理解DNS解析过程" class="headerlink" title="深入理解DNS解析过程"></a>深入理解DNS解析过程</h1><p>DNS是基于UDP协议的应用层协议</p><ol><li><p>检查浏览器缓存和本地hosts文件是否有网址记录。</p></li><li><p><strong>主机</strong>先向其本地域名服务器进行<strong>递归</strong>查询</p></li><li><p><strong>本地</strong>域名服务器采用迭代的查询，它先向根域名服务器查询</p></li><li><p><strong>根</strong>域名服务器告诉本地域名服务器，下一次应该查询的顶级域名服务器的IP地址。</p></li><li><p>本地域名服务器向<strong>顶级</strong>域名服务器发起查询。</p></li><li><p>顶级域名服务器告诉本地域名服务器，下一次应查询的<strong>权限</strong>域名服务器IP地址</p></li><li><p>本地域名服务器向权限域名服务器发起查询。</p></li><li><p>权限域名服务器告诉本地域名服务器所查询的IP地址。</p></li><li><p>本地域名服务器把查询结果告诉主机</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/1200133224-2.jpg" alt="DNS域名解析过程-前端八股文"></p></li></ol><p>域名(Domain)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mail.ccav.com</span><br><span class="line">---- ---- ----</span><br><span class="line">三级域名 二级域名 顶级域名</span><br></pre></td></tr></table></figure><h3 id="域名服务器划分"><a href="#域名服务器划分" class="headerlink" title="域名服务器划分"></a>域名服务器划分</h3><p>了解域名服务器划分之后，就会对DNS解析的过程大概有些了解。域名服务器按照层级分为：</p><p><strong>本地域名服务器</strong></p><p>本地域名服务器相当于一个班主任，你有点啥事都找他。当一个主机发出DNS查询的时候，这个查询的请求就会发送到本地域名服务器。本地域名服务器一般由ISP（联通电信）管理。</p><p><strong>根域名服务器</strong> .</p><p>根域名服务器是最高层次的域名服务，是校长,只负责规划大方向。他知道所有顶级域名服务器的域名和IP地址。不管那个本地域名服务器若自己不能不能解析，那首先请求的就是根域名服务器。根域名服务器不会把待查询的域名直接转换成IP，而是告诉本地域名服务器下一步应该找哪一个顶级域名服务器进行查询。</p><p><strong>顶级域名服务器</strong> com cn net gov </p><p>顶级域名服务器是负责各个方向的副校长，有负责安全的，有负责教学的。他负责管理该顶级域名下的所有二级域名，当收到DNS查询请求后就会给出响应的应答，可能是最终的结果，也可能是下一步应该找到的域名服务器的IP地址。</p><p><strong>权限域名服务器</strong> bilibili qq baidu</p><p>权限域名服务器就是负责一个区的域名服务器，是基层干活的，比如宿管，各科老师，他负责一个更小的区域。当一个权限服务还不能给出最后的回答时，就会告诉查询请求的DNS客户，下一步应该找哪个权限域名服务器。</p><p>再下还有主机名 www mail member space</p><h3 id="域名查询的两种方式"><a href="#域名查询的两种方式" class="headerlink" title="域名查询的两种方式"></a>域名查询的两种方式</h3><h4 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h4><p>递归查询，就是你找我要一个域名的IP地址，但是我不知道，那<strong>我去帮你去</strong>向知道的人问这个IP地址。举个例子就是，你问你班主任怎么做番茄炒鸡蛋，你班主任不知道，但是你班主任去问了食堂厨师，然后告诉你。这就叫递归查询。<br><strong>从host到本地域名服务器一般是用的递归查询。</strong></p><h4 id="迭代查询"><a href="#迭代查询" class="headerlink" title="迭代查询"></a>迭代查询</h4><p>迭代查询就是，你找我要一个域名的IP地址，我也不知道这个IP地址，但是我知道谁知道，<strong>我告诉你去找谁问</strong>。举个例子就是，你们班主任到了食堂随便拉了个人问怎么做番茄炒鸡蛋，那个人说，我只是个卖饭的，我不知道，但是我知道A君是在后厨的，你可以去问A君。然后你班主任就去问A君了。呐，这就叫迭代查询。<br><strong>从本地域名服务器到根域名服务器一般是用的迭代查询。</strong></p><h1 id="session"><a href="#session" class="headerlink" title="session"></a>session</h1><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224430637.png" alt="image-20220710224430637"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224459231.png" alt="image-20220710224459231"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220710224528356.png" alt="image-20220710224528356"></p><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>协议，网络协议的简称，网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。它的三要素是：语法、语义、时序。</p><p>为了使数据在网络上从源到达目的，网络通信的参与方必须遵循相同的规则，这套规则称为协议（protocol），<strong>它最终体现为在网络上传输的数据包的格式。</strong></p><p>协议往往分成几个层次进行定义，分层定义是为了使某一层协议的改变不影响其他层次的协议 。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716101810317.png" alt="image-20220716101810317"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716101526161.png" alt="image-20220716101526161"></p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716101848093.png" alt="image-20220716101848093"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102012808.png" alt="image-20220716102012808"></p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716101939094.png" alt="image-20220716101939094"></p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102105919.png" alt="image-20220716102105919"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102210270.png" alt="image-20220716102210270"></p><h2 id="以太网帧协议"><a href="#以太网帧协议" class="headerlink" title="以太网帧协议"></a>以太网帧协议</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102501564.png" alt="image-20220716102501564"></p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102517324.png" alt="image-20220716102517324"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102601333.png" alt="image-20220716102601333"></p><h2 id="分用"><a href="#分用" class="headerlink" title="分用"></a>分用</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102856437.png" alt="image-20220716102856437"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102903822.png" alt="image-20220716102903822"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102914332.png" alt="image-20220716102914332"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716103540290.png" alt="image-20220716103540290"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716103451453.png" alt="image-20220716103451453"></p><p>如何得到目标端的mac地址，arp请求会发给所有局域网内</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716103647487.png" alt="image-20220716103647487"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716102501564.png" alt="image-20220716102501564"></p><h2 id="字节序（同序为大端）"><a href="#字节序（同序为大端）" class="headerlink" title="字节序（同序为大端）"></a>字节序（同序为大端）</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716112033084.png" alt="image-20220716112033084"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716111515515.png" alt="image-20220716111515515"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716111945752.png" alt="image-20220716111945752"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716112003404.png" alt="image-20220716112003404"></p><p>网络字节序一定是大端，主机字节序不一定。</p><p>当格式化的数据在两台使用不同字节序的主机之间直接传递时，接收端必然错误的解释之。解决问题的方法是：发送端总是把要发送的数据转换成大端字节序数据后再发送，而接收端知道对方传送过来的数据总是采用大端字节序，所以接收端可以根据自身采用的字节序决定是否对接收到的数据进行转换（小端机转换，大端机不转换）。  </p><p>网络字节顺序是 TCP/IP 中规定好的一种数据表示格式，它与具体的 CPU 类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释，网络字节顺序采用大端排序方式。</p><p>BSD Socket提供了封装好的转换接口，方便程序员使用。包括从主机字节序到网络字节序的转换函数：htons、htonl；从网络字节序到主机字节序的转换函数：ntohs、ntohl。  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">// 转换端口</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">htons</span><span class="params">(<span class="keyword">uint16_t</span> hostshort)</span></span>; <span class="comment">// 主机字节序 - 网络字节序</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">ntohs</span><span class="params">(<span class="keyword">uint16_t</span> netshort)</span></span>; <span class="comment">// 主机字节序 - 网络字节序</span></span><br><span class="line"><span class="comment">// 转IP</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">htonl</span><span class="params">(<span class="keyword">uint32_t</span> hostlong)</span></span>; <span class="comment">// 主机字节序 - 网络字节序</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">uint32_t</span> netlong)</span></span>; <span class="comment">// 主机字节序 - 网络字节序  </span></span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716114523015.png" alt="image-20220716114523015"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716115324918.png" alt="image-20220716115324918"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716115609326.png" alt="image-20220716115609326"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716115408917.png" alt="image-20220716115408917"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716115654574.png" alt="image-20220716115654574"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716115705028.png" alt="image-20220716115705028"></p><h2 id="Socket地址"><a href="#Socket地址" class="headerlink" title="Socket地址"></a>Socket地址</h2><p>// socket地址其实是一个结构体，封装端口号和IP等信息。后面的socket相关的api中需要使用到这个socket地址。<br>// 客户端 -&gt; 服务器（IP, Port）  </p><h3 id="通用-socket-地址"><a href="#通用-socket-地址" class="headerlink" title="通用 socket 地址"></a>通用 socket 地址</h3><p>socket 网络编程接口中表示 socket 地址的是结构体 sockaddr，其定义如下：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/socket.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">sa_family_t</span> sa_family;<span class="comment">//sa_family 成员是地址族类型（sa_family_t）的变量</span></span><br><span class="line"><span class="keyword">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="keyword">sa_family_t</span>;</span><br></pre></td></tr></table></figure><p>sa_family 成员是地址族类型（sa_family_t）的变量。地址族类型通常与协议族类型对应。常见的协议族（protocol family，也称 domain）和对应的地址族入下所示：  </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716120025410.png" alt="image-20220716120025410"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716120117276.png" alt="image-20220716120117276"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716152431277.png" alt="image-20220716152431277"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">sa_family_t</span> sin_family; <span class="comment">/* __SOCKADDR_COMMON(sin_) */</span></span><br><span class="line"><span class="keyword">in_port_t</span> sin_port; <span class="comment">/* Port number. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">/* Internet address. */</span></span><br><span class="line"><span class="comment">/* Pad to size of `struct sockaddr&#x27;. */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (struct sockaddr) - __SOCKADDR_COMMON_SIZE - <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) - <span class="keyword">sizeof</span> (struct in_addr)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">in_addr_t</span> s_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span> sin6_family;</span><br><span class="line">    <span class="keyword">in_port_t</span> sin6_port; <span class="comment">/* Transport layer port # */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> sin6_flowinfo; <span class="comment">/* IPv6 flow information */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">sin6_addr</span>;</span> <span class="comment">/* IPv6 address */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> sin6_scope_id; <span class="comment">/* IPv6 scope-id */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> <span class="keyword">in_port_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">in_addr_t</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))</span></span><br></pre></td></tr></table></figure><p>所有专用 socket 地址（以及 sockaddr_storage）类型的变量在实际使用时都需要转化为通用 socket 地址类型 sockaddr（强制转化即可），因为所有 socket 编程接口使用的地址参数类型都是 sockaddr  </p><h2 id="IP地址转换（字符串ip-整数-，主机、网络字节序的转换）"><a href="#IP地址转换（字符串ip-整数-，主机、网络字节序的转换）" class="headerlink" title="IP地址转换（字符串ip-整数 ，主机、网络字节序的转换）"></a>IP地址转换（字符串ip-整数 ，主机、网络字节序的转换）</h2><p>通常，人们习惯用可读性好的字符串来表示 IP 地址，比如用点分十进制字符串表示 IPv4 地址，以及用十六进制字符串表示 IPv6 地址。但编程中我们需要先把它们转化为整数（二进制数）方能使用。而记录日志时则相反，我们要把整数表示的 IP 地址转化为可读的字符串。下面 3 个函数可用于用点分十进制字符串表示的 IPv4 地址和用网络字节序整数表示的 IPv4 地址之间的转换：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">in_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp, struct in_addr *inp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br></pre></td></tr></table></figure><p>下面这对更新的函数也能完成前面 3 个函数同样的功能，并且它们同时适用 IPv4 地址和 IPv6 地址：  </p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">// p:点分十进制的IP字符串，n:表示network，网络字节序的整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst)</span></span>;</span><br><span class="line">af:地址族： AF_INET AF_INET6</span><br><span class="line">src:需要转换的点分十进制的IP字符串</span><br><span class="line">dst:转换后的结果保存在这个里面</span><br><span class="line"><span class="comment">// 将网络字节序的整数，转换成点分十进制的IP地址字符串</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">inet_ntop</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">char</span> *dst, <span class="keyword">socklen_t</span> size)</span></span>;</span><br><span class="line">af:地址族： AF_INET AF_INET6</span><br><span class="line">src: 要转换的ip的整数的地址</span><br><span class="line">dst: 转换成IP地址字符串保存的地方</span><br><span class="line">size：第三个参数的大小（数组的大小）</span><br><span class="line">返回值：返回转换后的数据的地址（字符串），和 dst 是一样的</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716155600862.png" alt="image-20220716155600862"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716155541442.png" alt="image-20220716155541442"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716155835353.png" alt="image-20220716155835353"></p><h2 id="用socket实现网络通信"><a href="#用socket实现网络通信" class="headerlink" title="用socket实现网络通信"></a>用socket实现网络通信</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716155939527.png" alt="image-20220716155939527"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TCP 通信的流程</span></span><br><span class="line"><span class="comment">// 服务器端 （被动接受连接的角色）</span></span><br><span class="line"><span class="number">1.</span> 创建一个用于监听的套接字</span><br><span class="line">- 监听：监听有客户端的连接</span><br><span class="line">- 套接字：这个套接字其实就是一个文件描述符</span><br><span class="line"><span class="number">2.</span> 将这个监听文件描述符和本地的IP和端口绑定（IP和端口就是服务器的地址信息）</span><br><span class="line">- 客户端连接服务器的时候使用的就是这个IP和端口</span><br><span class="line"><span class="number">3.</span> 设置监听，监听的fd开始工作</span><br><span class="line"><span class="number">4.</span> 阻塞等待，当有客户端发起连接，解除阻塞，接受客户端的连接，会得到一个和客户端通信的套接字（fd）</span><br><span class="line"><span class="number">5.</span> 通信</span><br><span class="line">- 接收数据</span><br><span class="line">- 发送数据</span><br><span class="line"><span class="number">6.</span> 通信结束，断开连接</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="number">1.</span> 创建一个用于通信的套接字（fd）</span><br><span class="line"><span class="number">2.</span> 连接服务器，需要指定连接的服务器的 IP 和 端口</span><br><span class="line"><span class="number">3.</span> 连接成功了，客户端可以直接和服务器通信</span><br><span class="line">- 接收数据</span><br><span class="line">- 发送数据</span><br><span class="line"><span class="number">4.</span> 通信结束，断开连接</span><br></pre></td></tr></table></figure><h2 id="套接字Socket函数"><a href="#套接字Socket函数" class="headerlink" title="套接字Socket函数"></a>套接字Socket函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt; // 包含了这个头文件，上面两个就可以省略</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line">- 功能：创建一个套接字</span><br><span class="line">- 参数：</span><br><span class="line">    - domain: 协议族</span><br><span class="line">        AF_INET : ipv4</span><br><span class="line">        AF_INET6 : ipv6</span><br><span class="line">        AF_UNIX, AF_LOCAL : 本地套接字通信（进程间通信）</span><br><span class="line">    - type: 通信过程中使用的协议类型</span><br><span class="line">        SOCK_STREAM : 流式协议</span><br><span class="line">        SOCK_DGRAM : 报式协议</span><br><span class="line">    - protocol : 具体的一个协议。一般写<span class="number">0</span></span><br><span class="line">        - SOCK_STREAM : 流式协议默认使用 TCP</span><br><span class="line">        - SOCK_DGRAM : 报式协议默认使用 UDP</span><br><span class="line">    - 返回值：</span><br><span class="line">        - 成功：返回文件描述符，操作的就是内核缓冲区。</span><br><span class="line">        - 失败：<span class="number">-1</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> addrlen)</span></span>; <span class="comment">// socket命名</span></span><br><span class="line">- 功能：绑定，将fd 和本地的IP + 端口进行绑定</span><br><span class="line">- 参数：</span><br><span class="line">    - sockfd : 通过socket函数得到的文件描述符</span><br><span class="line">    - addr : 需要绑定的socket地址，这个地址封装了ip和端口号的信息</span><br><span class="line">    - addrlen : 第二个参数结构体占的内存大小</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>; <span class="comment">// /proc/sys/net/core/somaxconn</span></span><br><span class="line">- 功能：监听这个socket上的连接</span><br><span class="line">- 参数：</span><br><span class="line">    - sockfd : 通过socket()函数得到的文件描述符</span><br><span class="line">    - backlog : 未连接的和已经连接的和的最大值， <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line">- 功能：接收客户端连接，默认是一个阻塞的函数，阻塞等待客户端连接</span><br><span class="line">- 参数：</span><br><span class="line">    - sockfd : 用于监听的文件描述符</span><br><span class="line">    - addr : 传出参数，记录了连接成功后客户端的地址信息（ip，port）</span><br><span class="line">    - addrlen : 指定第二个参数的对应的内存大小</span><br><span class="line">- 返回值：</span><br><span class="line">    - 成功 ：用于通信的文件描述符</span><br><span class="line">    - <span class="number">-1</span> ： 失败</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> struct sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line">- 功能： 客户端连接服务器</span><br><span class="line">- 参数：</span><br><span class="line">    - sockfd : 用于通信的文件描述符</span><br><span class="line">    - addr : 客户端要连接的服务器的地址信息</span><br><span class="line">    - addrlen : 第二个参数的内存大小</span><br><span class="line">- 返回值：成功 <span class="number">0</span>， 失败 <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>; <span class="comment">// 写数据</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count)</span></span>; <span class="comment">// 读数据</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TCP 通信的服务器端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建socket(用于监听的套接字)</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.绑定</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    <span class="comment">// inet_pton(AF_INET, &quot;192.168.193.128&quot;, saddr.sin_addr.s_addr);</span></span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;  <span class="comment">// 0.0.0.0</span></span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = bind(lfd, (struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.监听</span></span><br><span class="line">    ret = listen(lfd, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.接收客户端连接</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientaddr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(clientaddr);</span><br><span class="line">    <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr *)&amp;clientaddr, &amp;len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出客户端的信息</span></span><br><span class="line">    <span class="keyword">char</span> clientIP[<span class="number">16</span>];</span><br><span class="line">    inet_ntop(AF_INET, &amp;clientaddr.sin_addr.s_addr, clientIP, <span class="keyword">sizeof</span>(clientIP));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> clientPort = ntohs(clientaddr.sin_port);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client ip is %s, port is %d\n&quot;</span>, clientIP, clientPort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.通信</span></span><br><span class="line">    <span class="keyword">char</span> recvBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取客户端的数据</span></span><br><span class="line">        <span class="keyword">int</span> num = read(cfd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recv client data : %s\n&quot;</span>, recvBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 表示客户端断开连接</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;clinet closed...&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> * data = <span class="string">&quot;hello,i am server&quot;</span>;</span><br><span class="line">        <span class="comment">// 给客户端发送数据</span></span><br><span class="line">        write(cfd, data, <span class="built_in">strlen</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 关闭文件描述符</span></span><br><span class="line">    close(cfd);</span><br><span class="line">    close(lfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TCP通信的客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建套接字</span></span><br><span class="line">    <span class="keyword">int</span> fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.连接服务器端</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    inet_pton(AF_INET, <span class="string">&quot;192.168.193.128&quot;</span>, &amp;serveraddr.sin_addr.s_addr);</span><br><span class="line">    serveraddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = connect(fd, (struct sockaddr *)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 通信</span></span><br><span class="line">    <span class="keyword">char</span> recvBuf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> * data = <span class="string">&quot;hello,i am client&quot;</span>;</span><br><span class="line">        <span class="comment">// 给客户端发送数据</span></span><br><span class="line">        write(fd, data , <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len = read(fd, recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recv server data : %s\n&quot;</span>, recvBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 表示服务器端断开连接</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server closed...&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TCP滑动窗口"><a href="#TCP滑动窗口" class="headerlink" title="TCP滑动窗口"></a>TCP滑动窗口</h2><p>滑动窗口（Sliding window）是一种<strong>流量控制技术</strong>。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。滑动窗口协议是用来改善吞吐量的一种技术，即<strong>容许发送方在接收任何应答之前传送附加的包。</strong>接收方告诉发送方在某一时刻能送多少包（称窗口尺寸）。</p><p>TCP 中采用滑动窗口来进行传输控制，<strong>滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据</strong>。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0时，发送方一般不能再发送数据报。</p><p>滑动窗口是 TCP 中实现诸如 ACK 确认、流量控制、拥塞控制的承载结构。  </p><p><strong>窗口理解为缓冲器的大小</strong>，会随着发送数据和接收数据而变化。通信双方都有发送和接收数据的缓冲区。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716202339331.png" alt="image-20220716202339331"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># mss: Maximum Segment Size(一条数据的最大的数据量)</span></span><br><span class="line"><span class="meta"># win: 滑动窗口，相当于空闲的大小</span></span><br><span class="line"><span class="number">1.</span> 客户端向服务器发起连接，客户端的滑动窗口是<span class="number">4096</span>，一次发送的最大数据量是<span class="number">1460</span></span><br><span class="line"><span class="number">2.</span> 服务器接收连接情况，告诉客户端服务器的窗口大小是<span class="number">6144</span>，一次发送的最大数据量是<span class="number">1024</span></span><br><span class="line"><span class="number">3.</span> 第三次握手</span><br><span class="line"><span class="number">4.</span> <span class="number">4</span><span class="number">-9</span> 客户端连续给服务器发送了<span class="number">6</span>k的数据，每次发送<span class="number">1</span>k</span><br><span class="line"><span class="number">5.</span> 第<span class="number">10</span>次，服务器告诉客户端：发送的<span class="number">6</span>k数据以及接收到，存储在缓冲区中，缓冲区数据已经处理了<span class="number">2</span>k,窗</span><br><span class="line">口大小是<span class="number">2</span>k = 剩余<span class="number">2</span>k空间</span><br><span class="line"><span class="number">6.</span> 第<span class="number">11</span>次，服务器告诉客户端：发送的<span class="number">6</span>k数据以及接收到，存储在缓冲区中，缓冲区数据已经处理了<span class="number">4</span>k,窗</span><br><span class="line">口大小是<span class="number">4</span>k，又处理<span class="number">2</span>k，还剩<span class="number">4</span>k空间</span><br><span class="line"><span class="number">7.</span> 第<span class="number">12</span>次，客户端给服务器发送了<span class="number">1</span>k的数据</span><br><span class="line"><span class="number">8.</span> 第<span class="number">13</span>次，客户端主动请求和服务器断开连接，并且给服务器发送了<span class="number">1</span>k的数据</span><br><span class="line"><span class="number">9.</span> 第<span class="number">14</span>次，服务器回复ACK <span class="number">8194</span>, a:同意断开连接的请求 b:告诉客户端已经接受到方才发的<span class="number">2</span>k的数据</span><br><span class="line">c:滑动窗口<span class="number">2</span>k</span><br><span class="line"><span class="number">10.</span>第<span class="number">15</span>、<span class="number">16</span>次，通知客户端滑动窗口的大小</span><br><span class="line"><span class="number">11.</span>第<span class="number">17</span>次，第三次挥手，服务器端给客户端发送FIN,请求断开连接</span><br><span class="line"><span class="number">12.</span>第<span class="number">18</span>次，第四次挥手，客户端同意了服务器端的断开请求</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220716202752580.png" alt="image-20220716202752580"></p><p>发送方的缓冲区：<br>    白色格子：空闲的空间<br>    灰色格子：数据已经被发送出去了，但是还没有被接收<br>    紫色格子：还没有发送出去的数据<br>接收方的缓冲区：<br>    白色格子：空闲的空间<br>    紫色格子：已经接收到的数据  </p><hr><h2 id="TCP通信并发-多进程实现并发服务器"><a href="#TCP通信并发-多进程实现并发服务器" class="headerlink" title="TCP通信并发 - 多进程实现并发服务器"></a>TCP通信并发 - 多进程实现并发服务器</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">要实现TCP通信服务器处理并发的任务，使用多线程或者多进程来解决。</span><br><span class="line">思路：</span><br><span class="line"><span class="number">1.</span> 一个父进程，多个子进程</span><br><span class="line"><span class="number">2.</span>父进程负责等待并接受客户端的连接</span><br><span class="line"><span class="number">3.</span>子进程：完成通信，接受一个客户端连接，就创建一个子进程用于通信。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多进程 服务器端   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recyleChild</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ret = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// 所有的子进程都回收了</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 还有子进程活着</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 被回收了</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;子进程 %d 被回收了\n&quot;</span>, ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    sigemptyset(&amp;act.sa_mask);</span><br><span class="line">    act.sa_handler = recyleChild;</span><br><span class="line">    <span class="comment">// 注册信号捕捉</span></span><br><span class="line">    sigaction(SIGCHLD, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="keyword">int</span> ret = bind(lfd,(struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    ret = listen(lfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不断循环等待客户端连接</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr*)&amp;cliaddr, &amp;len);</span><br><span class="line">        <span class="keyword">if</span>(cfd == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(errno == EINTR) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每一个连接进来，创建一个子进程跟客户端通信</span></span><br><span class="line">        <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程</span></span><br><span class="line">            <span class="comment">// 获取客户端的信息</span></span><br><span class="line">            <span class="keyword">char</span> cliIp[<span class="number">16</span>];</span><br><span class="line">            inet_ntop(AF_INET, &amp;cliaddr.sin_addr.s_addr, cliIp, <span class="keyword">sizeof</span>(cliIp));</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> cliPort = ntohs(cliaddr.sin_port);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;client ip is : %s, prot is %d\n&quot;</span>, cliIp, cliPort);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收客户端发来的数据</span></span><br><span class="line">            <span class="keyword">char</span> recvBuf[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = read(cfd, &amp;recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;recv client : %s\n&quot;</span>, recvBuf);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;client closed....\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                write(cfd, recvBuf, <span class="built_in">strlen</span>(recvBuf) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            close(cfd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">// 退出当前子进程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="多线程实现并发服务器"><a href="#多线程实现并发服务器" class="headerlink" title="多线程实现并发服务器"></a>多线程实现并发服务器</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd; <span class="comment">// 通信的文件描述符</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;  <span class="comment">// 线程号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> <span class="title">sockinfos</span>[128];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子线程和客户端通信   cfd 客户端的信息 线程号</span></span><br><span class="line">    <span class="comment">// 获取客户端的信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> * <span class="title">pinfo</span> =</span> (struct sockInfo *)arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cliIp[<span class="number">16</span>];</span><br><span class="line">    inet_ntop(AF_INET, &amp;pinfo-&gt;addr.sin_addr.s_addr, cliIp, <span class="keyword">sizeof</span>(cliIp));</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> cliPort = ntohs(pinfo-&gt;addr.sin_port);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client ip is : %s, prot is %d\n&quot;</span>, cliIp, cliPort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收客户端发来的数据</span></span><br><span class="line">    <span class="keyword">char</span> recvBuf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = read(pinfo-&gt;fd, &amp;recvBuf, <span class="keyword">sizeof</span>(recvBuf));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;recv client : %s\n&quot;</span>, recvBuf);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;client closed....\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        write(pinfo-&gt;fd, recvBuf, <span class="built_in">strlen</span>(recvBuf) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(pinfo-&gt;fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">int</span> lfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(lfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_port = htons(<span class="number">9999</span>);</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="keyword">int</span> ret = bind(lfd,(struct sockaddr *)&amp;saddr, <span class="keyword">sizeof</span>(saddr));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    ret = listen(lfd, <span class="number">128</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="keyword">sizeof</span>(sockinfos) / <span class="keyword">sizeof</span>(sockinfos[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">        bzero(&amp;sockinfos[i], <span class="keyword">sizeof</span>(sockinfos[i]));</span><br><span class="line">        sockinfos[i].fd = <span class="number">-1</span>;</span><br><span class="line">        sockinfos[i].tid = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环等待客户端连接，一旦一个客户端连接进来，就创建一个子线程进行通信</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">cliaddr</span>;</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        <span class="keyword">int</span> cfd = accept(lfd, (struct sockaddr*)&amp;cliaddr, &amp;len);</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockInfo</span> * <span class="title">pinfo</span>;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="comment">// 从这个数组中找到一个可以用的sockInfo元素</span></span><br><span class="line">            <span class="keyword">if</span>(sockinfos[i].fd == <span class="number">-1</span>) &#123;</span><br><span class="line">                pinfo = &amp;sockinfos[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == max - <span class="number">1</span>) &#123;</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pinfo-&gt;fd = cfd;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;pinfo-&gt;addr, &amp;cliaddr, len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建子线程</span></span><br><span class="line">        pthread_create(&amp;pinfo-&gt;tid, <span class="literal">NULL</span>, working, pinfo);</span><br><span class="line"></span><br><span class="line">        pthread_detach(pinfo-&gt;tid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(lfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Socket.io学习记录</summary>
    
    
    
    <category term="flutter" scheme="https://tsuiwade.github.io/categories/flutter/"/>
    
    
    <category term="flutter" scheme="https://tsuiwade.github.io/tags/flutter/"/>
    
    <category term="nodejs" scheme="https://tsuiwade.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第二章linux多进程开发</title>
    <link href="https://tsuiwade.github.io/2022/07/09/blog52-nowcoderProject2/"/>
    <id>https://tsuiwade.github.io/2022/07/09/blog52-nowcoderProject2/</id>
    <published>2022-07-09T11:14:33.000Z</published>
    <updated>2022-07-09T11:14:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709151547833.png" alt="image-20220709151547833"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709151741790.png" alt="image-20220709151741790"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152001679.png" alt="image-20220709152001679"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152137918.png" alt="image-20220709152137918"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152409441.png" alt="image-20220709152409441"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152513447.png" alt="image-20220709152513447" style="zoom: 67%;" /></p><p>进程的控制结构为PCB</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152551801.png" alt="image-20220709152551801"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152730589.png" alt="image-20220709152730589" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152820578.png" alt="image-20220709152820578" style="zoom:80%;" /></p><hr><h2 id="2-1-进程的状态"><a href="#2-1-进程的状态" class="headerlink" title="2.1 进程的状态"></a>2.1 进程的状态</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709152922274.png" alt="image-20220709152922274"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709153613473.png" alt="image-20220709153613473"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709153917036.png" alt="image-20220709153917036" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709154108593.png" alt="image-20220709154108593"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709155121586.png" alt="image-20220709155121586"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709154222057.png" alt="image-20220709154222057" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709154501219.png" alt="image-20220709154501219" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709155630565.png" alt="image-20220709155630565"></p><hr><h2 id="2-3-进程创建"><a href="#2-3-进程创建" class="headerlink" title="2.3 进程创建"></a>2.3 进程创建</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709155809181.png" alt="image-20220709155809181"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    pid_t fork(void);</span></span><br><span class="line"><span class="comment">        函数的作用：用于创建子进程。</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            fork()的返回值会返回两次。一次是在父进程中，一次是在子进程中。</span></span><br><span class="line"><span class="comment">            在父进程中返回创建的子进程的ID,</span></span><br><span class="line"><span class="comment">            在子进程中返回0</span></span><br><span class="line"><span class="comment">            如何区分父进程和子进程：通过fork的返回值。</span></span><br><span class="line"><span class="comment">            在父进程中返回-1，表示创建子进程失败，并且设置errno</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        父子进程之间的关系：</span></span><br><span class="line"><span class="comment">        区别：</span></span><br><span class="line"><span class="comment">            1.fork()函数的返回值不同</span></span><br><span class="line"><span class="comment">                父进程中: &gt;0 返回的子进程的ID</span></span><br><span class="line"><span class="comment">                子进程中: =0</span></span><br><span class="line"><span class="comment">            2.pcb中的一些数据</span></span><br><span class="line"><span class="comment">                当前的进程的id pid</span></span><br><span class="line"><span class="comment">                当前的进程的父进程的id ppid</span></span><br><span class="line"><span class="comment">                信号集</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        共同点：</span></span><br><span class="line"><span class="comment">            某些状态下：子进程刚被创建出来，还没有执行任何的写数据的操作</span></span><br><span class="line"><span class="comment">                - 用户区的数据</span></span><br><span class="line"><span class="comment">                - 文件描述符表</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        父子进程对变量是不是共享的？</span></span><br><span class="line"><span class="comment">            - 刚开始的时候，是一样的，共享的。如果修改了数据，不共享了。</span></span><br><span class="line"><span class="comment">            - 读时共享（子进程被创建，两个进程没有做任何的写的操作），写时拷贝。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是父进程还是子进程</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;pid : %d\n&quot;, pid);</span></span><br><span class="line">        <span class="comment">// 如果大于0，返回的是创建的子进程的进程号，当前是父进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am parent process, pid : %d, ppid : %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent num : %d\n&quot;</span>, num);</span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent num += 10 : %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前是子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am child process, pid : %d, ppid : %d\n&quot;</span>, getpid(),getppid());</span><br><span class="line">       </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child num : %d\n&quot;</span>, num);</span><br><span class="line">        num += <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child num += 100 : %d\n&quot;</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for循环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i : %d , pid : %d\n&quot;</span>, i , getpid());</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实际上，更准确来说，Linux 的 fork() 使用是通过写时拷贝 (copy- on-write) 实现。</span></span><br><span class="line"><span class="comment">写时拷贝是一种可以推迟甚至避免拷贝数据的技术。</span></span><br><span class="line"><span class="comment">内核此时并不复制整个进程的地址空间，而是让父子进程共享同一个地址空间。</span></span><br><span class="line"><span class="comment">只用在需要写入的时候才会复制地址空间，从而使各个进行拥有各自的地址空间。</span></span><br><span class="line"><span class="comment">也就是说，资源的复制是在需要写入的时候才会进行，在此之前，只有以只读方式共享。</span></span><br><span class="line"><span class="comment">注意：fork之后父子进程共享文件，</span></span><br><span class="line"><span class="comment">fork产生的子进程与父进程相同的文件文件描述符指向相同的文件表，引用计数增加，共享文件偏移指针。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>当前终端pid87186创建fork子进程87631（ 在父进程中 返回子进程的pid），一个父进程为87630，一个子进程87631。CPU时间片交替运行。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709161530157.png" alt="image-20220709161530157" style="zoom:50%;" /></p><hr><h2 id="2-4-父子进程关系及GDB多进程调试"><a href="#2-4-父子进程关系及GDB多进程调试" class="headerlink" title="2.4 父子进程关系及GDB多进程调试"></a>2.4 父子进程关系及GDB多进程调试</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709162506370.png" alt="image-20220709162506370"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709162743575.png" alt="image-20220709162743575" style="zoom:50%;" /></p><p>初始值一样，后续操作不一样。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709162845593.png" alt="image-20220709162845593" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712095224502.png" alt="image-20220712095224502"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709164650569.png" alt="image-20220709164650569"></p><p>父子进程间遵循<strong>读时共享写时复制</strong>的原则。只有进程空间的各段的内容要发生变化时（子进程或父进程进行写操作时，都会引起复制），才会将父进程的内容复制一份给子进程。<strong>父子进程在逻辑上仍然是严格相互独立的两个进程，各自维护各自的参数，只是在物理上实现了读时共享，写时复制。</strong> </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709173503178.png" alt="image-20220709173503178" style="zoom:50%;" /></p><hr><h2 id="2-5-父子进程关系"><a href="#2-5-父子进程关系" class="headerlink" title="2.5 父子进程关系"></a>2.5 父子进程关系</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709174528241.png" alt="image-20220709174528241" style="zoom:67%;" /></p><p>默认调试父进程，子进程自己跑自己的。   </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709174556763.png" alt="image-20220709174556763"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712170609358.png" alt="image-20220712170609358"></p><hr><h2 id="2-6-函数族"><a href="#2-6-函数族" class="headerlink" title="2.6 函数族"></a>2.6 函数族</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709191216787.png" alt="image-20220709191216787"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709192101771.png" alt="image-20220709192101771"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int execl(const char *path, const char *arg, ...);</span></span><br><span class="line"><span class="comment">        - 参数：</span></span><br><span class="line"><span class="comment">            - path:需要指定的执行的文件的路径或者名称</span></span><br><span class="line"><span class="comment">                a.out /home/nowcoder/a.out 推荐使用绝对路径</span></span><br><span class="line"><span class="comment">                ./a.out hello world</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            - arg:是执行可执行文件所需要的参数列表</span></span><br><span class="line"><span class="comment">                第一个参数一般没有什么作用，为了方便，一般写的是执行的程序的名称</span></span><br><span class="line"><span class="comment">                从第二个参数开始往后，就是程序执行所需要的的参数列表。</span></span><br><span class="line"><span class="comment">                参数最后需要以NULL结束（哨兵）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            只有当调用失败，才会有返回值，返回-1，并且设置errno</span></span><br><span class="line"><span class="comment">            如果调用成功，没有返回值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am parent process, pid : %d\n&quot;</span>,getpid());</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        <span class="comment">// execl(&quot;hello&quot;,&quot;hello&quot;,NULL);</span></span><br><span class="line"></span><br><span class="line">        execl(<span class="string">&quot;/bin/ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;aux&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        perror(<span class="string">&quot;execl&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am child process, pid : %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d, pid = %d\n&quot;</span>, i, getpid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712193814626.png" alt="image-20220712193814626" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712193751377.png" alt="image-20220712193751377" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712184916552.png" alt="image-20220712184916552" style="zoom:67%;" /></p><p>hello world不在一起的原因是因为产生了孤儿进程</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int execlp(const char *file, const char *arg, ... );</span></span><br><span class="line"><span class="comment">        - 会到环境变量中查找指定的可执行文件，如果找到了就执行，找不到就执行不成功。</span></span><br><span class="line"><span class="comment">        - 参数：</span></span><br><span class="line"><span class="comment">            - file:需要执行的可执行文件的文件名</span></span><br><span class="line"><span class="comment">                a.out</span></span><br><span class="line"><span class="comment">                ps</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            - arg:是执行可执行文件所需要的参数列表</span></span><br><span class="line"><span class="comment">                第一个参数一般没有什么作用，为了方便，一般写的是执行的程序的名称</span></span><br><span class="line"><span class="comment">                从第二个参数开始往后，就是程序执行所需要的的参数列表。</span></span><br><span class="line"><span class="comment">                参数最后需要以NULL结束（哨兵）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            只有当调用失败，才会有返回值，返回-1，并且设置errno</span></span><br><span class="line"><span class="comment">            如果调用成功，没有返回值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int execv(const char *path, char *const argv[]);</span></span><br><span class="line"><span class="comment">        argv是需要的参数的一个字符串数组</span></span><br><span class="line"><span class="comment">        char * argv[] = &#123;&quot;ps&quot;, &quot;aux&quot;, NULL&#125;;</span></span><br><span class="line"><span class="comment">        execv(&quot;/bin/ps&quot;, argv);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int execve(const char *filename, char *const argv[], char *const envp[]);</span></span><br><span class="line"><span class="comment">        char * envp[] = &#123;&quot;/home/nowcoder&quot;, &quot;/home/bbb&quot;, &quot;/home/aaa&quot;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个子进程，在子进程中执行exec函数族中的函数</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am parent process, pid : %d\n&quot;</span>,getpid());</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;aux&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am child process, pid : %d\n&quot;</span>, getpid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d, pid = %d\n&quot;</span>, i, getpid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-7-进程退出"><a href="#2-7-进程退出" class="headerlink" title="2.7 进程退出"></a>2.7 进程退出</h2><p>上是标准C库，下是linux系统函数</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709200757166.png" alt="image-20220709200757166"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709200943834.png" alt="image-20220709200943834" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709201041144.png" alt="image-20220709201041144" style="zoom:50%;" /></p><p>在程序中</p><p>孤儿进程：子进程先睡一秒，父进程运行玩死了，子进程还活着，子进程成为孤儿进程。</p><p>僵尸进程：父进程一直运行不死，子进程死了，残留内核区资源，成为僵尸进程。然后只能Ctrl+C杀死，子进程被进程号为1回收。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709201148099.png" alt="image-20220709201148099"></p><p>正常的情况下</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712195746801.png" alt="image-20220712195746801" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712195707422.png" alt="image-20220712195707422"></p><p>想让父进程死，就让子进程睡一秒钟</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712195924079.png" alt="image-20220712195924079"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709201834519.png" alt="image-20220709201834519"></p><p>​    孤儿进程的父进程号为1，父进程结束后会显示终端，由进程号为1的进程来回收子进程的资源。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709202519128.png" alt="image-20220709202519128"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712200503016.png" alt="image-20220712200503016"></p><p>子进程死了父进程还在进行。父进程14859处于休眠状态，子进程14860是僵尸进程。，kill -9杀不死。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712200624838.png" alt="image-20220712200624838"></p><hr><h2 id="2-8-wait函数"><a href="#2-8-wait函数" class="headerlink" title="2.8 wait函数"></a>2.8 wait函数</h2><p>主要针对僵尸进程。学习如何在父进程中回收子进程的资源。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712201345734.png" alt="image-20220712201345734"></p><p>wait 能够<strong>等待子进程状态改变</strong>，包含子进程结束、被信号停止、被信号暂停。调用wait会去释放子进程的资源。父进程默认wait阻塞了，</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">    pid_t wait(int *wstatus);</span></span><br><span class="line"><span class="comment">        功能：等待任意一个子进程结束，如果任意一个子进程结束了，此函数会回收子进程的资源。</span></span><br><span class="line"><span class="comment">        参数：int *wstatus</span></span><br><span class="line"><span class="comment">            进程退出时的状态信息，传入的是一个int类型的地址，传出参数。</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            - 成功：返回被回收的子进程的id</span></span><br><span class="line"><span class="comment">            - 失败：-1 (所有的子进程都结束，调用函数失败)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    调用wait函数的进程会被挂起（阻塞），直到它的一个子进程退出或者收到一个不能被忽略的信号时才被唤醒（相当于继续往下执行）</span></span><br><span class="line"><span class="comment">    如果没有子进程了，函数立刻返回，返回-1；如果子进程都已经结束了，也会立即返回，返回-1.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有一个父进程，创建5个子进程（兄弟）</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建5个子进程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;parent, pid = %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// int ret = wait(NULL);</span></span><br><span class="line">            <span class="keyword">int</span> st;</span><br><span class="line">            <span class="keyword">int</span> ret = wait(&amp;st);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(WIFEXITED(st)) &#123;</span><br><span class="line">                <span class="comment">// 是不是正常退出</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;退出的状态码：%d\n&quot;</span>, WEXITSTATUS(st));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(WIFSIGNALED(st)) &#123;</span><br><span class="line">                <span class="comment">// 是不是异常终止</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;被哪个信号干掉了：%d\n&quot;</span>, WTERMSIG(st));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child die, pid = %d\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">         <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child, pid = %d\n&quot;</span>,getpid());    </span><br><span class="line">            sleep(<span class="number">1</span>);       </span><br><span class="line">         &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// exit(0)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220721161212220.png" alt="image-20220721161212220" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712204152216.png" alt="image-20220712204152216" style="zoom:67%;" /></p><p>此时子进程已经死掉，成为僵尸进程。当被ctrl+c结束了父进程，僵尸进程就被进程号为1的进程回收了，因为父进程一死，子进程就变成孤儿进程。但并不能每次都结束父进程，应该在父进程中做一些操作。</p><p>wait(NULL) 表示不需要子进程退出的状态</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712204332100.png" alt="image-20220712204332100" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712210245314.png" alt="image-20220712210245314" style="zoom:67%;" /></p><p>子进程一直在打印，父进程没有动，说明父进程阻塞了。通过kill -9 13478 ，父进程不阻塞了，就打印。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712210434033.png" alt="image-20220712210434033" style="zoom:67%;" /></p><p>然后全kill掉，此时没有子进程了。<strong>所有子进程都结束，则返回-1。</strong></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712204628113.png" alt="image-20220712204628113" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712204642539.png" alt="image-20220712204642539" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712204712745.png" alt="image-20220712204712745" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712211021844.png" alt="image-20220712211021844" style="zoom:80%;" /></p><p>通过信号kill -9杀死</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712205059554.png" alt="image-20220712205059554" style="zoom:80%;" /></p><hr><h2 id="2-9-waitpid函数"><a href="#2-9-waitpid函数" class="headerlink" title="2.9 waitpid函数"></a>2.9 waitpid函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">    pid_t waitpid(pid_t pid, int *wstatus, int options);</span></span><br><span class="line"><span class="comment">        功能：回收指定进程号的子进程，可以设置是否阻塞。</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - pid:</span></span><br><span class="line"><span class="comment">                pid &gt; 0 : 某个子进程的pid</span></span><br><span class="line"><span class="comment">                pid = 0 : 回收当前进程组的所有子进程    </span></span><br><span class="line"><span class="comment">                pid = -1 : 回收所有的子进程，相当于 wait()  （最常用）</span></span><br><span class="line"><span class="comment">                pid &lt; -1 : 某个进程组的组id的绝对值，回收指定进程组中的子进程</span></span><br><span class="line"><span class="comment">            - options：设置阻塞或者非阻塞</span></span><br><span class="line"><span class="comment">                0 : 阻塞</span></span><br><span class="line"><span class="comment">                WNOHANG : 非阻塞</span></span><br><span class="line"><span class="comment">            - 返回值：</span></span><br><span class="line"><span class="comment">                &gt; 0 : 返回子进程的id</span></span><br><span class="line"><span class="comment">                = 0 : options=WNOHANG, 表示还有子进程或者</span></span><br><span class="line"><span class="comment">                = -1 ：错误，或者没有子进程了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有一个父进程，创建5个子进程（兄弟）</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建5个子进程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        pid = fork();</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;parent, pid = %d\n&quot;</span>, getpid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> st;</span><br><span class="line">            <span class="comment">// int ret = waitpid(-1, &amp;st, 0);</span></span><br><span class="line">            <span class="keyword">int</span> ret = waitpid(<span class="number">-1</span>, &amp;st, WNOHANG);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 说明还有子进程存在</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(WIFEXITED(st)) &#123;</span><br><span class="line">                    <span class="comment">// 是不是正常退出</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;退出的状态码：%d\n&quot;</span>, WEXITSTATUS(st));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(WIFSIGNALED(st)) &#123;</span><br><span class="line">                    <span class="comment">// 是不是异常终止</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;被哪个信号干掉了：%d\n&quot;</span>, WTERMSIG(st));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;child die, pid = %d\n&quot;</span>, ret);</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">         <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child, pid = %d\n&quot;</span>,getpid());    </span><br><span class="line">            sleep(<span class="number">1</span>);       </span><br><span class="line">         &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>int ret = waitpid(-1, &amp;st, 0);<strong>阻塞情况</strong></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712215332656.png" alt="image-20220712215332656"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712215357568.png" alt="image-20220712215357568"></p><p>父进程非阻塞。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712215625353.png" alt="image-20220712215625353" style="zoom:80%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712214240848.png" alt="image-20220712214240848"></p><p>所有子进程都结束之后，再回过来 ret返回了-1值。</p><hr><h2 id="2-10-进程间通信-IPC"><a href="#2-10-进程间通信-IPC" class="headerlink" title="2.10 进程间通信 IPC"></a>2.10 进程间通信 IPC</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712221317444.png" alt="image-20220712221317444"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712222017940.png" alt="image-20220712222017940"></p><hr><h2 id="2-11-匿名管道（PIPE）"><a href="#2-11-匿名管道（PIPE）" class="headerlink" title="2.11 匿名管道（PIPE）"></a>2.11 匿名管道（PIPE）</h2><p><strong>所谓的管道，就是内核里面的一串缓存</strong>。从管道的一段写入的数据，实际上是缓存在内核中的，另一端读取，也就是从内核中读取这段数据。另外，管道传输的数据是无格式的流且大小受限。</p><p>这两个描述符都是在一个进程里面，并没有起到进程间通信的作用，怎么样才能使得管道是跨过两个进程的呢？</p><p>我们可以使用 <code>fork</code> 创建子进程，<strong>创建的子进程会复制父进程的文件描述符</strong>，这样就做到了两个进程各有两个「 <code>fd[0]</code> 与 <code>fd[1]</code>」，两个进程就可以通过各自的 fd 写入和读取同一个管道文件实现跨进程通信了。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/6-%E7%AE%A1%E9%81%93-pipe-fork.jpg" alt="img" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220712222710566.png" alt="image-20220712222710566"></p><p>竖线为管道符，前后各为一个指令，ls为获取当前文件列表，wc -l统计个数。写入端就是向管道注入，管道读取端就是从管道输出。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713093759069.png" alt="image-20220713093759069"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713094021279.png" alt="image-20220713094021279"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713094503815.png" alt="image-20220713094503815"></p><p>父进程通过文件描述符5向管道写数据，子进程通过6从管道读数据，通过其管道5写数据，父进程通过6从管道读数据，父子进程共享文件描述符。 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713094835797.png" alt="image-20220713094835797" style="zoom:50%;" /></p><p>管道数据结构为环形队列。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713095024204.png" alt="image-20220713095024204" style="zoom:67%;" /></p><h2 id="2-12-父子进程通过匿名管道通信"><a href="#2-12-父子进程通过匿名管道通信" class="headerlink" title="2.12 父子进程通过匿名管道通信"></a>2.12 父子进程通过匿名管道通信</h2><p>数据被写到管道的写端，（应该是入端）</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713095309303.png" alt="image-20220713095309303" style="zoom:50%;" /></p><p>子进程发送数据给父进程，父进程读取到数据 后 输出</p><p><code>在fork之前创建管道</code></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713095708508.png" alt="image-20220713095708508" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713095916244.png" alt="image-20220713095916244" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713095929370.png" alt="image-20220713095929370"></p><p>如果子进程写之前休眠10秒，父进程仍然是阻塞等待。read是阻塞，管道默认是阻塞，当管道没有数据时，read阻塞，管道满了，write阻塞。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713100236399.png" alt="image-20220713100236399" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713100301798.png" alt="image-20220713100301798"></p><p>父进程先读后写，子进程先写后读。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713100626622.png" alt="image-20220713100626622" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713100739557.png" alt="image-20220713100739557" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713100758213.png" alt="image-20220713100758213" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220722105708703.png" alt="image-20220722105708703"></p><p>管道大小为4k</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713101030871.png" alt="image-20220713101030871" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713101045461.png" alt="image-20220713101045461"></p><h2 id="2-13-匿名管道通信案例"><a href="#2-13-匿名管道通信案例" class="headerlink" title="2.13 匿名管道通信案例"></a>2.13 匿名管道通信案例</h2><p>注释掉sleep</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713101531493.png" alt="image-20220713101531493" style="zoom:67%;" /></p><p>输出有错误，乱码 且 收到自己发的数据，不对。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713102307570.png" alt="image-20220713102307570" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713102327586.png" alt="image-20220713102327586" style="zoom:50%;" /></p><p>现在情况变成了</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713102353491.png" alt="image-20220713102353491" style="zoom:50%;" /></p><p>所以在读的时候 父进程要关闭写端，子进程要关闭读端</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713102934517.png" alt="image-20220713102934517" style="zoom: 50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713102959385.png" alt="image-20220713102959385" style="zoom:50%;" /></p><p>案例</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现 ps aux | grep xxx 父子进程间通信</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    子进程： ps aux, 子进程结束后，将数据发送给父进程</span></span><br><span class="line"><span class="comment">    父进程：获取到数据，过滤</span></span><br><span class="line"><span class="comment">    pipe()</span></span><br><span class="line"><span class="comment">    execlp()</span></span><br><span class="line"><span class="comment">    子进程将标准输出 stdout_fileno 重定向到管道的写端。  dup2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个管道</span></span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = pipe(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="comment">// 关闭写端</span></span><br><span class="line">        close(fd[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 从管道中读取</span></span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = read(fd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 过滤数据输出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">            <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wait(<span class="literal">NULL</span>); <span class="comment">// 回收子进程资源</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        <span class="comment">// 关闭读端</span></span><br><span class="line">        close(fd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件描述符的重定向 stdout_fileno -&gt; fd[1]</span></span><br><span class="line">        dup2(fd[<span class="number">1</span>], STDOUT_FILENO);</span><br><span class="line">        <span class="comment">// 执行 ps aux</span></span><br><span class="line">        execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;aux&quot;</span>, <span class="literal">NULL</span>); <span class="comment">// 管道就4k</span></span><br><span class="line">        perror(<span class="string">&quot;execlp&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="2-14-管道读写特点和管道设置非阻塞"><a href="#2-14-管道读写特点和管道设置非阻塞" class="headerlink" title="2.14 管道读写特点和管道设置非阻塞"></a>2.14 管道读写特点和管道设置非阻塞</h2><p>管道的读写特点：<br>使用管道时，需要注意以下几种特殊的情况（假设都是阻塞I/O操作）<br>1.所有的指向管道写端的文件描述符都关闭了（管道写端引用计数为0），有进程从管道的读端读数据，那么管道中剩余的数据被读取以后，<strong>再次read会返回0</strong>，就像读到文件末尾一样。</p><p>2.如果有指向管道写端的文件描述符没有关闭（管道的写端引用计数大于0），而持有管道写端的进程也没有往管道中写数据，这个时候有进程从管道中读取数据，那么管道中剩余的数据被读取后，再次<strong>read会阻塞</strong>，直到管道中有数据可以读了才读取数据并返回。</p><p>3.如果所有指向管道读端的文件描述符都关闭了（管道的读端引用计数为0），这个时候有进程向管道中写数据，那么该进程会收到一个信号SIGPIPE, 通常会导致进程异常终止。</p><p>4.如果有指向管道读端的文件描述符没有关闭（管道的读端引用计数大于0），而持有管道读端的进程也没有从管道中读数据，这时有进程向管道中写数据，那么在管道被写满的时候再次write会阻塞，直到管道中有空位置才能再次写入数据并返回。</p><p>总结：<br>    读管道：<br>        管道中有数据，read返回实际读到的字节数。<br>        管道中无数据：<br>            写端被全部关闭，read返回0（相当于读到文件的末尾）<br>            写端没有完全关闭，read阻塞等待</p><p>写管道：<br>    管道读端全部被关闭，进程异常终止（进程收到SIGPIPE信号）<br>    管道读端没有全部关闭：<br>        管道已满，write阻塞<br>        管道没有满，write将数据写入，并返回实际写入的字节数</p><p>父进程read阻塞</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713110555043.png" alt="image-20220713110555043" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713110514941.png" alt="image-20220713110514941" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713110755428.png" alt="image-20220713110755428" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    设置管道非阻塞</span></span><br><span class="line"><span class="comment">    int flags = fcntl(fd[0], F_GETFL);  // 获取原来的flag</span></span><br><span class="line"><span class="comment">    flags |= O_NONBLOCK;            // 修改flag的值</span></span><br><span class="line"><span class="comment">    fcntl(fd[0], F_SETFL, flags);   // 设置新的flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在fork之前创建管道</span></span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = pipe(pipefd);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 父进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am parent process, pid : %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭写端</span></span><br><span class="line">        close(pipefd[<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从管道的读取端读取数据</span></span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> flags = fcntl(pipefd[<span class="number">0</span>], F_GETFL);  <span class="comment">// 获取原来的flag</span></span><br><span class="line">        flags |= O_NONBLOCK;            <span class="comment">// 修改flag的值</span></span><br><span class="line">        fcntl(pipefd[<span class="number">0</span>], F_SETFL, flags);   <span class="comment">// 设置新的flag</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;len : %d\n&quot;</span>, len);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;parent recv : %s, pid : %d\n&quot;</span>, buf, getpid());</span><br><span class="line">            <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i am child process, pid : %d\n&quot;</span>, getpid());</span><br><span class="line">        <span class="comment">// 关闭读端</span></span><br><span class="line">        close(pipefd[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 向管道中写入数据</span></span><br><span class="line">            <span class="keyword">char</span> * str = <span class="string">&quot;hello,i am child&quot;</span>;</span><br><span class="line">            write(pipefd[<span class="number">1</span>], str, <span class="built_in">strlen</span>(str));</span><br><span class="line">            sleep(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709110426450.png" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713111545212.png" alt="image-20220713111545212" style="zoom:50%;" /></p><p>没有数据就-1， 没有阻塞。</p><hr><h2 id="2-15有名管道（FIFO）"><a href="#2-15有名管道（FIFO）" class="headerlink" title="2.15有名管道（FIFO）"></a>2.15有名管道（FIFO）</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713112030962.png" alt="image-20220713112030962"></p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713112131822.png" alt="image-20220713112131822"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713112720107.png" alt="image-20220713112720107"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713112734113.png" alt="image-20220713112734113"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713112936238.png" alt="image-20220713112936238"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建fifo文件</span></span><br><span class="line"><span class="comment">    1.通过命令： mkfifo 名字</span></span><br><span class="line"><span class="comment">    2.通过函数：int mkfifo(const char *pathname, mode_t mode);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">    int mkfifo(const char *pathname, mode_t mode);</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - pathname: 管道名称的路径</span></span><br><span class="line"><span class="comment">            - mode: 文件的权限 和 open 的 mode 是一样的</span></span><br><span class="line"><span class="comment">                    是一个八进制的数</span></span><br><span class="line"><span class="comment">        返回值：成功返回0，失败返回-1，并设置错误号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断文件是否存在</span></span><br><span class="line">    <span class="keyword">int</span> ret = access(<span class="string">&quot;test&quot;</span>, F_OK);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;管道不存在，创建管道\n&quot;</span>);</span><br><span class="line">        ret = mkfifo(<span class="string">&quot;fifo1&quot;</span>, <span class="number">0664</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   写数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向管道中写数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    有名管道的注意事项：</span></span><br><span class="line"><span class="comment">        1.一个为只读而打开一个管道的进程会阻塞，直到另外一个进程为只写打开管道</span></span><br><span class="line"><span class="comment">        2.一个为只写而打开一个管道的进程会阻塞，直到另外一个进程为只读打开管道</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    读管道：</span></span><br><span class="line"><span class="comment">        管道中有数据，read返回实际读到的字节数</span></span><br><span class="line"><span class="comment">        管道中无数据：</span></span><br><span class="line"><span class="comment">            管道写端被全部关闭，read返回0，（相当于读到文件末尾）</span></span><br><span class="line"><span class="comment">            写端没有全部被关闭，read阻塞等待</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    写管道：</span></span><br><span class="line"><span class="comment">        管道读端被全部关闭，进程异常终止（收到一个SIGPIPE信号）</span></span><br><span class="line"><span class="comment">        管道读端没有全部关闭：</span></span><br><span class="line"><span class="comment">            管道已经满了，write会阻塞</span></span><br><span class="line"><span class="comment">            管道没有满，write将数据写入，并返回实际写入的字节数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.判断文件是否存在</span></span><br><span class="line">    <span class="keyword">int</span> ret = access(<span class="string">&quot;test&quot;</span>, F_OK);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;管道不存在，创建管道\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.创建管道文件</span></span><br><span class="line">        ret = mkfifo(<span class="string">&quot;test&quot;</span>, <span class="number">0664</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.以只写的方式打开管道</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;test&quot;</span>, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;hello, %d\n&quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;write data : %s\n&quot;</span>, buf);</span><br><span class="line">        write(fd, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读数据</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从管道中读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.打开管道文件</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;test&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> len = read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;写端断开连接了...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;recv buf : %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写端停了，读端显示“写端断开连接”，程序结束。</p><p>运行读端，读端在open管道文件时阻塞了。运行写端，读端就运行了。</p><p>把读端停了，写端程序立马结束。</p><hr><h2 id="2-16-有名管道实现简单聊天功能"><a href="#2-16-有名管道实现简单聊天功能" class="headerlink" title="2.16 有名管道实现简单聊天功能"></a>2.16 有名管道实现简单聊天功能</h2><p>  <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713115229732.png" alt="image-20220713115229732"></p><p>chatA</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.判断有名管道文件是否存在</span></span><br><span class="line">    <span class="keyword">int</span> ret = access(<span class="string">&quot;fifo1&quot;</span>, F_OK);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 文件不存在</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;管道不存在，创建对应的有名管道\n&quot;</span>);</span><br><span class="line">        ret = mkfifo(<span class="string">&quot;fifo1&quot;</span>, <span class="number">0664</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = access(<span class="string">&quot;fifo2&quot;</span>, F_OK);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// 文件不存在</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;管道不存在，创建对应的有名管道\n&quot;</span>);</span><br><span class="line">        ret = mkfifo(<span class="string">&quot;fifo2&quot;</span>, <span class="number">0664</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.以只写的方式打开管道fifo1</span></span><br><span class="line">    <span class="keyword">int</span> fdw = open(<span class="string">&quot;fifo1&quot;</span>, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span>(fdw == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打开管道fifo1成功，等待写入...\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.以只读的方式打开管道fifo2</span></span><br><span class="line">    <span class="keyword">int</span> fdr = open(<span class="string">&quot;fifo2&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fdr == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;打开管道fifo2成功，等待读取...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.循环的写读数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">        <span class="comment">// 获取标准输入的数据</span></span><br><span class="line">        fgets(buf, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="comment">// 写数据</span></span><br><span class="line">        ret = write(fdw, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.读管道数据</span></span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">128</span>);</span><br><span class="line">        ret = read(fdr, buf, <span class="number">128</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;buf: %s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.关闭文件描述符</span></span><br><span class="line">    close(fdr);</span><br><span class="line">    close(fdw);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时只能收一句 发一句，不能把读和写都放入同一个进程中，必定有一个阻塞。所以要把读写分别放到不同进程里。A父进程写，子进程读。B父进程读，子进程写。</p><hr><h2 id="2-17内存映射"><a href="#2-17内存映射" class="headerlink" title="2.17内存映射"></a>2.17内存映射</h2><p>类似于动态库、共享库的位置。</p><p>可以指定映射 从文件的偏移量开始的len大小的文件。</p><p>内存映射之后，当修改了内存数据，也会同步到文件当中。 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713141211276.png" alt="image-20220713141211276"></p><p>左右为进程中的内存数据。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713143305010.png" alt="image-20220713143305010" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713141859759.png" alt="image-20220713141859759"></p><p>映射文件到内存当中。</p><p>mmap()在调用进程的虚拟地址空间里，创建了一个映射</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713142227869.png" alt="image-20220713142227869"></p><ul><li>flags:<ul><li>map_shared 映射区的数据会自动和磁盘文件进行同步，进程间通信必须要设置这个选项。</li><li>map_private 不同步，内存映射区的数据修改了，对原来的文件不会修改，会重新出一个新的文件（copy on write）</li></ul></li></ul><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713142715528.png" alt="image-20220713142715528"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713142742847.png" alt="image-20220713142742847"></p><p>案例需求</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713142855197.png" alt="image-20220713142855197"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713150351372.png" alt="image-20220713150351372"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713150656773.png" alt="image-20220713150656773"></p><p>父进程读数据，子进程写数据。以文件为桥梁。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713150921776.png" alt="image-20220713150921776"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713150940667.png" alt="image-20220713150940667"></p><p>1、如果对mmap的返回值ptr做++操作，可以，但是munmap错误。</p><p>2、如果open时O_RDONLY，mmap时prot参数指定PROT_READ | PROT_WRITE 会产生错误，返回MAP_FAILED；两者权限应该一致，mmap权限小于等于open才对。</p><p>3、如果文件偏移量为1000，offset必须是4k的整数倍，所以会报错返回map_failed。</p><p>4、mmap什么情况下回调用失败？第二个参数length = 0， 第三个参数prot只指定了写权限。或者和open不一致会报错。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713151649555.png" alt="image-20220713151649555"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713151752961.png" alt="image-20220713151752961"></p><h3 id="使用内存映射实现文件拷贝的功能"><a href="#使用内存映射实现文件拷贝的功能" class="headerlink" title="使用内存映射实现文件拷贝的功能"></a>使用内存映射实现文件拷贝的功能</h3><p>把english.txt复制为cpy.txt</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713151957260.png" alt="image-20220713151957260"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713152315628.png" alt="image-20220713152315628"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713152434989.png" alt="image-20220713152434989"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713152512439.png" alt="image-20220713152512439"></p><p>之前为文件映射，下面为<strong>匿名映射 MAP_ANONYMOUS</strong> 。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713152941820.png" alt="image-20220713152941820"></p><p>内存映射为非阻塞的。 子进程读取，父进程写。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153100366.png" alt="image-20220713153100366"></p><hr><h2 id="2-19-信号概述"><a href="#2-19-信号概述" class="headerlink" title="2.19 信号概述"></a>2.19 信号概述</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153253383.png" alt="image-20220713153253383"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153613482.png" alt="image-20220713153613482"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153821911.png" alt="image-20220713153821911"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153901814.png" alt="image-20220713153901814"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713153946392.png" alt="image-20220713153946392"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154013335.png" alt="image-20220713154013335"></p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154048465.png" alt="image-20220713154048465"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154055618.png" alt="image-20220713154055618"></p><p>针对core文件</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154842933.png" alt="image-20220713154842933"></p><p>用了buf野内存。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154912388.png" alt="image-20220713154912388"></p><p>要设置core文件</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154625742.png" alt="image-20220713154625742"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713155039196.png" alt="image-20220713155039196"></p><p>gdb a.out来调试，产生信号11。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713155148421.png" alt="image-20220713155148421"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713154413309.png" alt="image-20220713154413309"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160018537.png" alt="image-20220713160018537"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160111686.png" alt="image-20220713160111686"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160135830.png" alt="image-20220713160135830"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160419641.png" alt="image-20220713160419641"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160442910.png" alt="image-20220713160442910"></p><hr><h2 id="2-21-alarm函数"><a href="#2-21-alarm函数" class="headerlink" title="2.21 alarm函数"></a>2.21 alarm函数</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713160937737.png" alt="image-20220713160937737"></p><p>alarm（100）是不阻塞的。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713161131386.png" alt="image-20220713161131386"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713161145062.png" alt="image-20220713161145062"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713162237088.png" alt="image-20220713162237088"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713162352329.png" alt="image-20220713162352329"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713162644561.png" alt="image-20220713162644561"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713164815325.png" alt="image-20220713164815325"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713171214771.png" alt="image-20220713171214771"></p><p>过3s吼，每隔2秒定时一次。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713165638806.png" alt="image-20220713165638806"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713170125850.png" alt="image-20220713170125850"></p><p>立马调用“定时器开始了， 因为setitimer是非阻塞的。应该是每隔两秒钟发送一个信号，把进程杀死了，因为没有信号捕捉，所以没有定时的效果。</p><hr><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713172022840.png" alt="image-20220713172022840"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713172712393.png" alt="image-20220713172712393"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713182100095.png" alt="image-20220713182100095"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713183123518.png" alt="image-20220713183123518"></p><hr><h2 id="2-24信号集"><a href="#2-24信号集" class="headerlink" title="2.24信号集"></a>2.24信号集</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713184355053.png" alt="image-20220713184355053"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713184959698.png" alt="image-20220713184959698"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185257423.png" alt="image-20220713185257423"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185450518.png" alt="image-20220713185450518"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185441191.png" alt="image-20220713185441191"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185727380.png" alt="image-20220713185727380"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185630069.png" alt="image-20220713185630069"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713185706086.png" alt="image-20220713185706086"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713190200384.png" alt="image-20220713190200384"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713190225161.png" alt="image-20220713190225161"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713190258103.png" alt="image-20220713190258103"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220713190611343.png" alt="image-20220713190611343"></p><hr><p>之前都是对用户自定义的信号集进行操作。如果想对内核的信号集进行操作。只能sigprocmask，对系统中的阻塞信号集进行操作，想获取阻塞信号集或者设置阻塞信号集。通过sigprocmask把自定义的系统信号集设置到内核中，</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714005733605.png" alt="image-20220714005733605"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714005809132.png" alt="image-20220714005809132"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714005919493.png" alt="image-20220714005919493"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714012506081.png" alt="image-20220714012506081"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714010119582.png" alt="image-20220714010119582"></p><p>按了ctrl+c和ctrl+\ </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714010413244.png" alt="image-20220714010413244"></p><p>然后只能新建会话kill -9杀死。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714010508133.png" alt="image-20220714010508133"></p><p>或者可以输入&amp; 以后台方式运行，还可响应其他指令。 此时再ctrl+c，或\</p><p>输入fg转为前台。 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714010845622.png" alt="image-20220714010845622"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714010911746.png" alt="image-20220714010911746"></p><hr><h2 id="2-26-信号捕捉函数sigaction"><a href="#2-26-信号捕捉函数sigaction" class="headerlink" title="2.26 信号捕捉函数sigaction"></a>2.26 信号捕捉函数sigaction</h2><p>signum 可以是任何有效信号，除了SIGKILL和SIGSTOP（不能被捕捉）。</p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714101044645.png" alt="image-20220714101044645"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714101256982.png" alt="image-20220714101256982"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714102818217.png" alt="image-20220714102818217"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714103146248.png" alt="image-20220714103146248"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714103308334.png" alt="image-20220714103308334"></p><hr><h2 id="2-27-SIGCHLD信号"><a href="#2-27-SIGCHLD信号" class="headerlink" title="2.27 SIGCHLD信号"></a>2.27 SIGCHLD信号</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714104140287.png" alt="image-20220714104140287"></p><p>使用SIGCHLD信号解决僵尸进程问题。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105452323.png" alt="image-20220714105452323"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105421067.png" alt="image-20220714105421067"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105145067.png" alt="image-20220714105145067"></p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105512496.png" alt="image-20220714105512496"></p><p>同时有3个子进程死亡，在未决信号集处理信号的回调函数时，无法响应其他信号。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105747442.png" alt="image-20220714105747442"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714105956236.png" alt="image-20220714105956236"></p><p>会出现段错误。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714110408486.png" alt="image-20220714110408486" style="zoom: 50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714110451684.png" alt="image-20220714110451684" style="zoom:67%;" /></p><hr><h2 id="2-28-共享内存"><a href="#2-28-共享内存" class="headerlink" title="2.28 共享内存"></a>2.28 共享内存</h2><p>比内存映射效率高，内存映射需要关联一个文件，</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714112130286.png" alt="image-20220714112130286"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714113340274.png" alt="image-20220714113340274"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714113656491.png" alt="image-20220714113656491"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">共享内存相关的函数</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> size, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line">    - 功能：创建一个新的共享内存段，或者获取一个既有的共享内存段的标识。</span><br><span class="line">        新创建的内存段中的数据都会被初始化为<span class="number">0</span></span><br><span class="line">    - 参数：</span><br><span class="line">        - key : <span class="keyword">key_t</span>类型是一个整形，通过这个找到或者创建一个共享内存。</span><br><span class="line">                一般使用<span class="number">16</span>进制表示，非<span class="number">0</span>值</span><br><span class="line">        - size: 共享内存的大小</span><br><span class="line">        - shmflg: 属性</span><br><span class="line">            - 访问权限</span><br><span class="line">            - 附加属性：创建/判断共享内存是不是存在</span><br><span class="line">                - 创建：IPC_CREAT</span><br><span class="line">                - 判断共享内存是否存在： IPC_EXCL , 需要和IPC_CREAT一起使用</span><br><span class="line">                    IPC_CREAT | IPC_EXCL | <span class="number">0664</span></span><br><span class="line">        - 返回值：</span><br><span class="line">            失败：<span class="number">-1</span> 并设置错误号</span><br><span class="line">            成功：&gt;<span class="number">0</span> 返回共享内存的引用的ID，后面操作共享内存都是通过这个值。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> *shmaddr, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line">    - 功能：和当前的进程进行关联</span><br><span class="line">    - 参数：</span><br><span class="line">        - shmid : 共享内存的标识（ID）,由shmget返回值获取</span><br><span class="line">        - shmaddr: 申请的共享内存的起始地址，指定<span class="literal">NULL</span>，内核指定</span><br><span class="line">        - shmflg : 对共享内存的操作</span><br><span class="line">            - 读 ： SHM_RDONLY, 必须要有读权限</span><br><span class="line">            - 读写： <span class="number">0</span></span><br><span class="line">    - 返回值：</span><br><span class="line">        成功：返回共享内存的首（起始）地址。  失败(<span class="keyword">void</span> *) <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *shmaddr)</span></span>;</span><br><span class="line">    - 功能：解除当前进程和共享内存的关联</span><br><span class="line">    - 参数：</span><br><span class="line">        shmaddr：共享内存的首地址</span><br><span class="line">    - 返回值：成功 <span class="number">0</span>， 失败 <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br><span class="line">    - 功能：对共享内存进行操作。删除共享内存，共享内存要删除才会消失，创建共享内存的进行被销毁了对共享内存是没有任何影响。</span><br><span class="line">    - 参数：</span><br><span class="line">        - shmid: 共享内存的ID</span><br><span class="line">        - cmd : 要做的操作</span><br><span class="line">            - IPC_STAT : 获取共享内存的当前的状态</span><br><span class="line">            - IPC_SET : 设置共享内存的状态</span><br><span class="line">            - IPC_RMID: 标记共享内存被销毁</span><br><span class="line">        - buf：需要设置或者获取的共享内存的属性信息</span><br><span class="line">            - IPC_STAT : buf存储数据</span><br><span class="line">            - IPC_SET : buf中需要初始化数据，设置到内核中</span><br><span class="line">            - IPC_RMID : 没有用，<span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">key_t</span> <span class="title">ftok</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">int</span> proj_id)</span></span>;</span><br><span class="line">    - 功能：根据指定的路径名，和<span class="keyword">int</span>值，生成一个共享内存的key</span><br><span class="line">    - 参数：</span><br><span class="line">        - pathname:指定一个存在的路径</span><br><span class="line">            /home/nowcoder/Linux/a.txt</span><br><span class="line">            / </span><br><span class="line">        - proj_id: <span class="keyword">int</span>类型的值，但是这系统调用只会使用其中的<span class="number">1</span>个字节</span><br><span class="line">                   范围 ： <span class="number">0</span><span class="number">-255</span>  一般指定一个字符 <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><p>shmctl ：创建共享内存的进程被销毁了，对共享内存是没有任何影响的。</p><p>在write_shm.c中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建一个共享内存</span></span><br><span class="line">    <span class="keyword">int</span> shmid = shmget(<span class="number">100</span>, <span class="number">4096</span>, IPC_CREAT|<span class="number">0664</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;shmid : %d\n&quot;</span>, shmid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.和当前进程进行关联</span></span><br><span class="line">    <span class="keyword">void</span> * ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * str = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.写数据</span></span><br><span class="line">    <span class="built_in">memcpy</span>(ptr, str, <span class="built_in">strlen</span>(str) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.解除关联</span></span><br><span class="line">    shmdt(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.删除共享内存</span></span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在read_shm.c中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.获取一个共享内存</span></span><br><span class="line">    <span class="keyword">int</span> shmid = shmget(<span class="number">100</span>, <span class="number">0</span>, IPC_CREAT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;shmid : %d\n&quot;</span>, shmid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.和当前进程进行关联</span></span><br><span class="line">    <span class="keyword">void</span> * ptr = shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.读数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, (<span class="keyword">char</span> *)ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.解除关联</span></span><br><span class="line">    shmdt(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.删除共享内存</span></span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714140417147.png" alt="image-20220714140417147"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714140428610.png" alt="image-20220714140428610"></p><p>之前的实验是通过随便取的100内存，应该用ftok：根据指定的路径名，和int值，生成一个共享内存的key</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714140904302.png" alt="image-20220714140904302"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题1：操作系统如何知道一块共享内存被多少个进程关联？</span><br><span class="line">    - 共享内存维护了一个结构体struct shmid_ds 这个结构体中有一个成员 shm_nattch</span><br><span class="line">    - shm_nattach 记录了关联的进程个数</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714141051334.png" alt="image-20220714141051334"></p><p>键100转为0x64,如果有一个读一个写，那么状态数就为2了</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714141129189.png" alt="image-20220714141129189"></p><p>如果将其中一个读进程结束了，键变成0，共享内存被标记删除。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714141403061.png" alt="image-20220714141403061"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714141742551.png" alt="image-20220714141742551"></p><p>ipcrm -m 4只是标记了删除，连接数没有删，当其他进程ctrl + c，状态数才变0.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">问题<span class="number">2</span>：可不可以对共享内存进行多次删除 shmctl</span><br><span class="line">    - 可以的</span><br><span class="line">    - 因为shmctl 标记删除共享内存，不是直接删除</span><br><span class="line">    - 什么时候真正删除呢?</span><br><span class="line">        当和共享内存关联的进程数为<span class="number">0</span>的时候，就真正被删除</span><br><span class="line">    - 当共享内存的key为<span class="number">0</span>的时候，表示共享内存被标记删除了</span><br><span class="line">        如果一个进程和共享内存取消关联，那么这个进程就不能继续操作这个共享内存。也不能进行关联。</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">共享内存和内存映射的区别</span><br><span class="line"><span class="number">1.</span>共享内存可以直接创建，内存映射需要磁盘文件（匿名映射除外）</span><br><span class="line"><span class="number">2.</span>共享内存效果更高</span><br><span class="line"><span class="number">3.</span>内存</span><br><span class="line">    所有的进程操作的是同一块共享内存。</span><br><span class="line">    内存映射，每个进程在自己的虚拟地址空间中有一个独立的内存。</span><br><span class="line"><span class="number">4.</span>数据安全</span><br><span class="line">    - 进程突然退出</span><br><span class="line">        共享内存还存在</span><br><span class="line">        内存映射区消失</span><br><span class="line">    - 运行进程的电脑死机，宕机了</span><br><span class="line">        数据存在在共享内存中，没有了</span><br><span class="line">        内存映射区的数据 ，由于磁盘文件中的数据还在，所以内存映射区的数据还存在。</span><br><span class="line"><span class="number">5.</span>生命周期</span><br><span class="line">    - 内存映射区：进程退出，内存映射区销毁</span><br><span class="line">    - 共享内存：进程退出，共享内存还在，标记删除（所有的关联的进程数为<span class="number">0</span>），或者关机</span><br><span class="line">        如果一个进程退出，会自动和共享内存进行取消关联。</span><br></pre></td></tr></table></figure><hr><h2 id="2-30-守护进程"><a href="#2-30-守护进程" class="headerlink" title="2.30 守护进程"></a>2.30 守护进程</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714145944446.png" alt="image-20220714145944446"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150116296.png" alt="image-20220714150116296"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150131600.png" alt="image-20220714150131600"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150140913.png" alt="image-20220714150140913"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150309918.png" alt="image-20220714150309918"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150600775.png" alt="image-20220714150600775"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714150850261.png" alt="image-20220714150850261"></p><p>1、在终端上 输入指令 find查找2，重定向到/dev/null 设备上，管道符会创建子进程，&amp;在后台运行。是后台进程。</p><p>2、在shell中，默认没有会话 没有组，pid为400，创建ppid，然后创建出一个组 ，创建出的会话pid也是400，默认是后台程序。</p><p>3、运行find，创建新的进程组，首进程是658，父进程是bash 的400，组PGID是658，会话进程是400。 </p><p>4、sort是前台运行，是前台运行组，而bash和find是后台进程组。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714151125316.png" alt="image-20220714151125316" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714151211201.png" alt="image-20220714151211201"></p><p>后台服务进程，生命周期长，不拥有控制终端。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714152110355.png" alt="image-20220714152110355"></p><p>1、为什么 父进程退出</p><p>命令行启动进程，如果不退出父进程，父进程死了之后，shell会提供shell提示符。</p><p>使用fork可以确保子进程不会成为进程组的首进程。</p><p>2、子进程开启新会话，组id和进程id一样，又成为会话的id。要脱离控制终端。 </p><h3 id="写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。"><a href="#写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。" class="headerlink" title="写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。"></a>写一个守护进程，每隔2s获取一下系统时间，将这个时间写入到磁盘文件中。</h3><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714153957356.png" alt="image-20220714153957356" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714154206911.png" alt="image-20220714154206911" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714155024113.png" alt="image-20220714155024113" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220714154723472.png" alt="image-20220714154723472"></p>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第二章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>牛客网项目记录-第一章linux系统编程入门</title>
    <link href="https://tsuiwade.github.io/2022/07/07/blog51-nowcoderProject1/"/>
    <id>https://tsuiwade.github.io/2022/07/07/blog51-nowcoderProject1/</id>
    <published>2022-07-07T10:37:42.000Z</published>
    <updated>2022-07-07T10:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="1-2GCC"><a href="#1-2GCC" class="headerlink" title="1.2GCC"></a>1.2GCC</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707104035969.png" alt="image-20220707104035969"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707103826857.png" alt="image-20220707103826857"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707234008969.png" alt="image-20220707234008969"></p><p>gcc test.c -E -o test.i 将源代码 经过预处理器 转换为预处理后源代码</p><p>gcc test.i -S -o test.s 将预处理后源代码 经过编译器 编译成汇编语言</p><p>gcc test.s -s -o test.o 将汇编语言 经过汇编器 汇编成目标代码（二进制文件）</p><p>./test.o 可以执行</p><p>gcc test.c -S 直接生成test.s</p><p>gcc test.c 直接生成a.out</p><p>gcc test.c -o test 生成可执行文件test</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707104106542.png" alt="image-20220707104106542"></p><hr><p>1.4 静态库的制作和使用</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707162622123.png" alt="image-20220707162622123"></p><p>lesson04下面有calc和library</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707211708002.png" alt="image-20220707211708002"></p><p>calc目录下</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707163507506.png" alt="image-20220707163507506"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707163558574.png" alt="image-20220707163558574"></p><p>library目录下，文件基本同calc中文件</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707212819186.png" alt="image-20220707212819186"></p><p>将静态库文件拷贝到library/lib下</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707213127527.png" alt="image-20220707213127527"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707213245664.png" alt="image-20220707213245664"></p><p> 在main中使用库文件 </p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707213410642.png" alt="image-20220707213410642"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707213541008.png" alt="image-20220707213541008"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707164322392.png" alt="image-20220707164322392"></p><p>或者在library/src文件夹下</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707214201467.png" alt="image-20220707214201467"></p><hr><h2 id="1-6-动态库的制作和使用"><a href="#1-6-动态库的制作和使用" class="headerlink" title="1.6 动态库的制作和使用"></a>1.6 动态库的制作和使用</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707164605558.png" alt="image-20220707164605558"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707164918390.png" alt="image-20220707164918390"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707223732478.png" alt="image-20220707223732478"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707223928765.png" alt="image-20220707223928765"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707165332730.png" alt="image-20220707165332730"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707165444349.png" alt="image-20220707165444349"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707224945116.png" alt="image-20220707224945116"></p><p>有问题， 需要动态库加载到内存当中</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707230434407.png" alt="image-20220707230434407"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707230643122.png" alt="image-20220707230643122"></p><p>输入env输出环境变量</p><p>解决方法1</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707231740047.png" alt="image-20220707231740047"></p><p>$ 原有变量 ：增加新变量</p><p>此时仅在会话级别可行，新开会话不可行。</p><p>解决方法2，用户级别配置，根目录~下</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707232016476.png" alt="image-20220707232016476"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707232102006.png" alt="image-20220707232102006"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707232156867.png" alt="image-20220707232156867"></p><p>使其生效</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707232436634.png" alt="image-20220707232436634"></p><p>最后一样</p><p>方法4：修改/etc/ld.so.cache文件列表 里面是二进制数据，需要间接修改</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707233158730.png" alt="image-20220707233158730"></p><p>sudo vim /etc/ld.so.conf</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707233111497.png" alt="image-20220707233111497"></p><hr><p>动态库和静态库的优缺点</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707234615271.png" alt="image-20220707234615271"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220707234752872.png" alt="image-20220707234752872"></p><hr><h2 id="1-10-makefile"><a href="#1-10-makefile" class="headerlink" title="1.10 makefile"></a>1.10 makefile</h2><p>在项目src文件夹下make指令</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708095030870.png" alt="image-20220708095030870"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708094453324.png" alt="image-20220708094453324"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708094309244.png" alt="image-20220708094309244"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708094938348.png" alt="image-20220708094938348"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708095911920.png" alt="image-20220708095911920"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708100317745.png" alt="image-20220708100317745"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708100203735.png" alt="image-20220708100203735"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708101408184.png" alt="image-20220708101408184"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708100416196.png" alt="image-20220708100416196"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708100606699.png" alt="image-20220708100606699"></p><p>删除依赖 make clean</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708100930274.png" alt="image-20220708100930274"></p><hr><h2 id="1-13-GDB调试"><a href="#1-13-GDB调试" class="headerlink" title="1.13 GDB调试"></a>1.13 GDB调试</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220816162006469.png" alt="image-20220816162006469"></p><p> <img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708104655779.png" alt="image-20220708104655779"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708103904874.png" alt="image-20220708103904874"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708104440816.png" alt="image-20220708104440816"></p><p>没加调试信息就小点。</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708105455704.png" alt="image-20220708105455704"></p><p>输入list，显示10行</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708114141209.png" alt="image-20220708114141209"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708114550493.png" alt="image-20220708114550493"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708114637397.png" alt="image-20220708114637397"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708115114472.png" alt="image-20220708115114472"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708134856843.png" alt="image-20220708134856843"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708135029955.png" alt="image-20220708135029955"></p><hr><h2 id="1-17-文件IO"><a href="#1-17-文件IO" class="headerlink" title="1.17 文件IO"></a>1.17 文件IO</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708142349617.png" alt="image-20220708142349617"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708160455300.png" alt="image-20220708160455300"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708160948453.png" alt="image-20220708160948453"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708162755823.png" alt="image-20220708162755823"></p><h2 id="1-20-open-打开文件"><a href="#1-20-open-打开文件" class="headerlink" title="1.20 open 打开文件"></a>1.20 open 打开文件</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709002625234.png" alt="image-20220709002625234"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708213355579.png" alt="image-20220708213355579" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708213611066.png" alt="image-20220708213611066"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708213910568.png" alt="image-20220708213910568" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708213825026.png" alt="image-20220708213825026" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708214013338.png" alt="image-20220708214013338"></p><p>三参数的open函数</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708215043338.png" alt="image-20220708215043338"></p><p>rwx read/write/执行权限</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708215002576.png" alt="image-20220708215002576"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708215246114.png" alt="image-20220708215246114" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708215329505.png" alt="image-20220708215329505"></p><hr><h2 id="1-22-read-write函数"><a href="#1-22-read-write函数" class="headerlink" title="1.22 read write函数"></a>1.22 read write函数</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708220033643.png" alt="image-20220708220033643"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220708220158280.png" alt="image-20220708220158280"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709002426032.png" alt="image-20220709002426032" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709002259381.png" alt="image-20220709002259381" style="zoom:50%;" /></p><hr><h2 id="1-23-lseek函数"><a href="#1-23-lseek函数" class="headerlink" title="1.23 lseek函数"></a>1.23 lseek函数</h2><p>用来重新定位文件读写的位移</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    标准C库的函数</span></span><br><span class="line"><span class="comment">    #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">    int fseek(FILE *stream, long offset, int whence);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Linux系统函数</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    off_t lseek(int fd, off_t offset, int whence);</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - fd：文件描述符，通过open得到的，通过这个fd操作某个文件</span></span><br><span class="line"><span class="comment">            - offset：偏移量</span></span><br><span class="line"><span class="comment">            - whence:</span></span><br><span class="line"><span class="comment">                SEEK_SET</span></span><br><span class="line"><span class="comment">                    设置文件指针的偏移量</span></span><br><span class="line"><span class="comment">                SEEK_CUR</span></span><br><span class="line"><span class="comment">                    设置偏移量：当前位置 + 第二个参数offset的值</span></span><br><span class="line"><span class="comment">                SEEK_END</span></span><br><span class="line"><span class="comment">                    设置偏移量：文件大小 + 第二个参数offset的值</span></span><br><span class="line"><span class="comment">        返回值：返回文件指针的位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    作用：</span></span><br><span class="line"><span class="comment">        1.移动文件指针到文件头</span></span><br><span class="line"><span class="comment">        lseek(fd, 0, SEEK_SET);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2.获取当前文件指针的位置</span></span><br><span class="line"><span class="comment">        lseek(fd, 0, SEEK_CUR);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3.获取文件长度</span></span><br><span class="line"><span class="comment">        lseek(fd, 0, SEEK_END);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        4.拓展文件的长度，当前文件10b, 110b, 增加了100个字节</span></span><br><span class="line"><span class="comment">        lseek(fd, 100, SEEK_END)</span></span><br><span class="line"><span class="comment">        注意：需要写一次数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;hello.txt&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展文件的长度</span></span><br><span class="line">    <span class="keyword">int</span> ret = lseek(fd, <span class="number">100</span>, SEEK_END);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;lseek&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入一个空数据</span></span><br><span class="line">    write(fd, <span class="string">&quot; &quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-24-stat-lstat"><a href="#1-24-stat-lstat" class="headerlink" title="1.24 stat lstat"></a>1.24 stat lstat</h2><p>获取一个文件相关的一些信息</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709085617664.png" alt="image-20220709085617664"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    int stat(const char *pathname, struct stat *statbuf);</span></span><br><span class="line"><span class="comment">        作用：获取一个文件相关的一些信息</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            - pathname：操作的文件的路径</span></span><br><span class="line"><span class="comment">            - statbuf：结构体变量，传出参数，用于保存获取到的文件的信息</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            成功：返回0</span></span><br><span class="line"><span class="comment">            失败：返回-1 设置errno</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int lstat(const char *pathname, struct stat *statbuf);</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            - pathname：操作的文件的路径</span></span><br><span class="line"><span class="comment">            - statbuf：结构体变量，传出参数，用于保存获取到的文件的信息</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            成功：返回0</span></span><br><span class="line"><span class="comment">            失败：返回-1 设置errno</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = stat(<span class="string">&quot;a.txt&quot;</span>, &amp;statbuf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;stat&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: %ld\n&quot;</span>, statbuf.st_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709085805573.png" alt="image-20220709085805573"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709085854663.png" alt="image-20220709085854663"></p><p><strong>lstat 获取软连接信息，而stat会获取指向文件的信息</strong></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709090638561.png" alt="image-20220709090638561"></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709090650423.png" alt="image-20220709090650423"></p><hr><h2 id="1-25-模拟实现ls-l-命令"><a href="#1-25-模拟实现ls-l-命令" class="headerlink" title="1.25 模拟实现ls -l 命令"></a>1.25 模拟实现ls -l 命令</h2><p>想实现下图功能</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709090928800.png" alt="image-20220709090928800"></p><p>获取文件类型和文件权限</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709092833342.png" alt="image-20220709092833342"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟实现 ls -l 指令</span></span><br><span class="line"><span class="comment">// -rw-rw-r-- 1 nowcoder nowcoder 12 12月  3 15:48 a.txt</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断输入的参数是否正确</span></span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过stat函数获取用户传入的文件的信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret = stat(argv[<span class="number">1</span>], &amp;st);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;stat&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件类型和文件权限</span></span><br><span class="line">    <span class="keyword">char</span> perms[<span class="number">11</span>] = &#123;<span class="number">0</span>&#125;;   <span class="comment">// 用于保存文件类型和文件权限的字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(st.st_mode &amp; S_IFMT) &#123;</span><br><span class="line">        <span class="keyword">case</span> S_IFLNK:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> S_IFDIR:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> S_IFREG:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> S_IFBLK:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> S_IFCHR:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> S_IFSOCK:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> S_IFIFO:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            perms[<span class="number">0</span>] = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断文件的访问权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件所有者</span></span><br><span class="line">    perms[<span class="number">1</span>] = (st.st_mode &amp; S_IRUSR) ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">2</span>] = (st.st_mode &amp; S_IWUSR) ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">3</span>] = (st.st_mode &amp; S_IXUSR) ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件所在组</span></span><br><span class="line">    perms[<span class="number">4</span>] = (st.st_mode &amp; S_IRGRP) ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">5</span>] = (st.st_mode &amp; S_IWGRP) ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">6</span>] = (st.st_mode &amp; S_IXGRP) ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他人</span></span><br><span class="line">    perms[<span class="number">7</span>] = (st.st_mode &amp; S_IROTH) ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">8</span>] = (st.st_mode &amp; S_IWOTH) ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    perms[<span class="number">9</span>] = (st.st_mode &amp; S_IXOTH) ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 硬连接数</span></span><br><span class="line">    <span class="keyword">int</span> linkNum = st.st_nlink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件所有者</span></span><br><span class="line">    <span class="keyword">char</span> * fileUser = getpwuid(st.st_uid)-&gt;pw_name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件所在组</span></span><br><span class="line">    <span class="keyword">char</span> * fileGrp = getgrgid(st.st_gid)-&gt;gr_name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件大小</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> fileSize = st.st_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取修改的时间</span></span><br><span class="line">    <span class="keyword">char</span> * time = ctime(&amp;st.st_mtime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> mtime[<span class="number">512</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">strncpy</span>(mtime, time, <span class="built_in">strlen</span>(time) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%s %d %s %s %ld %s %s&quot;</span>, perms, linkNum, fileUser, fileGrp, fileSize, mtime, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709093234697.png" alt="image-20220709093234697"></p><hr><h2 id="1-26-文件属性操作函数access-chmod-chown-truncate"><a href="#1-26-文件属性操作函数access-chmod-chown-truncate" class="headerlink" title="1.26 文件属性操作函数access/chmod/chown/truncate"></a>1.26 文件属性操作函数access/chmod/chown/truncate</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709093328241.png" alt="image-20220709093328241"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int access(const char *pathname, int mode);</span></span><br><span class="line"><span class="comment">        作用：判断某个文件是否有某个权限，或者判断文件是否存在</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - pathname: 判断的文件路径</span></span><br><span class="line"><span class="comment">            - mode:</span></span><br><span class="line"><span class="comment">                R_OK: 判断是否有读权限</span></span><br><span class="line"><span class="comment">                W_OK: 判断是否有写权限</span></span><br><span class="line"><span class="comment">                X_OK: 判断是否有执行权限</span></span><br><span class="line"><span class="comment">                F_OK: 判断文件是否存在</span></span><br><span class="line"><span class="comment">        返回值：成功返回0， 失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = access(<span class="string">&quot;a.txt&quot;</span>, F_OK);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;access&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件存在！！!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">    int chmod(const char *pathname, mode_t mode);</span></span><br><span class="line"><span class="comment">        修改文件的权限</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - pathname: 需要修改的文件的路径</span></span><br><span class="line"><span class="comment">            - mode:需要修改的权限值，八进制的数</span></span><br><span class="line"><span class="comment">        返回值：成功返回0，失败返回-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = chmod(<span class="string">&quot;a.txt&quot;</span>, <span class="number">0777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;chmod&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vim /etc/passwd</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709095934609.png" alt="image-20220709095934609"></p><p>vim /etc/group</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709100008469.png" alt="image-20220709100008469" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709100042295.png" alt="image-20220709100042295" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    int truncate(const char *path, off_t length);</span></span><br><span class="line"><span class="comment">        作用：缩减或者扩展文件的尺寸至指定的大小</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - path: 需要修改的文件的路径</span></span><br><span class="line"><span class="comment">            - length: 需要最终文件变成的大小</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            成功返回0， 失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = truncate(<span class="string">&quot;b.txt&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;truncate&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-27-目录操作函数-mkdir等"><a href="#1-27-目录操作函数-mkdir等" class="headerlink" title="1.27 目录操作函数 mkdir等"></a>1.27 目录操作函数 mkdir等</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709100717934.png" alt="image-20220709100717934"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    int mkdir(const char *pathname, mode_t mode);</span></span><br><span class="line"><span class="comment">        作用：创建一个目录</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            pathname: 创建的目录的路径</span></span><br><span class="line"><span class="comment">            mode: 权限，八进制的数</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            成功返回0， 失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = mkdir(<span class="string">&quot;aaa&quot;</span>, <span class="number">0777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkdir&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int chdir(const char *path);</span></span><br><span class="line"><span class="comment">        作用：修改进程的工作目录</span></span><br><span class="line"><span class="comment">            比如在/home/nowcoder 启动了一个可执行程序a.out, 进程的工作目录 /home/nowcoder</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            path : 需要修改的工作目录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    char *getcwd(char *buf, size_t size);</span></span><br><span class="line"><span class="comment">        作用：获取当前工作目录</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - buf : 存储的路径，指向的是一个数组（传出参数）</span></span><br><span class="line"><span class="comment">            - size: 数组的大小</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            返回的指向的一块内存，这个数据就是第一个参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前的工作目录</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    getcwd(buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前的工作目录是：%s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改工作目录</span></span><br><span class="line">    <span class="keyword">int</span> ret = chdir(<span class="string">&quot;/home/nowcoder/Linux/lesson13&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;chdir&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的文件</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;chdir.txt&quot;</span>, O_CREAT | O_RDWR, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前的工作目录</span></span><br><span class="line">    <span class="keyword">char</span> buf1[<span class="number">128</span>];</span><br><span class="line">    getcwd(buf1, <span class="keyword">sizeof</span>(buf1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前的工作目录是：%s\n&quot;</span>, buf1);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">    int rename(const char *oldpath, const char *newpath);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = rename(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;rename&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709101242804.png" alt="image-20220709101242804" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709101657349.png" alt="image-20220709101657349" style="zoom:50%;" /></p><hr><h2 id="1-28-目录遍历函数opendir-readdir-closedir"><a href="#1-28-目录遍历函数opendir-readdir-closedir" class="headerlink" title="1.28 目录遍历函数opendir/readdir/closedir"></a>1.28 目录遍历函数opendir/readdir/closedir</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709101735515.png" alt="image-20220709101735515" style="zoom:67%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709101945277.png" alt="image-20220709101945277" style="zoom:50%;" /></p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709102100519.png" alt="image-20220709102100519"></p><p>例子 读取某目录下所有的普通文件个数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    // 打开一个目录</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;dirent.h&gt;</span></span><br><span class="line"><span class="comment">    DIR *opendir(const char *name);</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            - name: 需要打开的目录的名称</span></span><br><span class="line"><span class="comment">        返回值：</span></span><br><span class="line"><span class="comment">            DIR * 类型，理解为目录流</span></span><br><span class="line"><span class="comment">            错误返回NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 读取目录中的数据</span></span><br><span class="line"><span class="comment">    #include &lt;dirent.h&gt;</span></span><br><span class="line"><span class="comment">    struct dirent *readdir(DIR *dirp);</span></span><br><span class="line"><span class="comment">        - 参数：dirp是opendir返回的结果</span></span><br><span class="line"><span class="comment">        - 返回值：</span></span><br><span class="line"><span class="comment">            struct dirent，代表读取到的文件的信息</span></span><br><span class="line"><span class="comment">            读取到了末尾或者失败了，返回NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 关闭目录</span></span><br><span class="line"><span class="comment">    #include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;dirent.h&gt;</span></span><br><span class="line"><span class="comment">    int closedir(DIR *dirp);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFileNum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取某个目录下所有的普通文件的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s path\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = getFileNum(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;普通文件的个数为：%d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取目录下所有普通文件的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFileNum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * path)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.打开目录</span></span><br><span class="line">    DIR * dir = opendir(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dir == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;opendir&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">ptr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录普通文件的个数</span></span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((ptr = readdir(dir)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取名称</span></span><br><span class="line">        <span class="keyword">char</span> * dname = ptr-&gt;d_name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略掉. 和..</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(dname, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(dname, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是普通文件还是目录</span></span><br><span class="line">        <span class="keyword">if</span>(ptr-&gt;d_type == DT_DIR) &#123;</span><br><span class="line">            <span class="comment">// 目录,需要继续读取这个目录</span></span><br><span class="line">            <span class="keyword">char</span> newpath[<span class="number">256</span>];</span><br><span class="line">            <span class="built_in">sprintf</span>(newpath, <span class="string">&quot;%s/%s&quot;</span>, path, dname);</span><br><span class="line">            total += getFileNum(newpath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ptr-&gt;d_type == DT_REG) &#123;</span><br><span class="line">            <span class="comment">// 普通文件</span></span><br><span class="line">            total++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭目录</span></span><br><span class="line">    closedir(dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220721110809106.png" alt="image-20220721110809106"></p><hr><h2 id="1-29-dup函数"><a href="#1-29-dup函数" class="headerlink" title="1.29 dup函数"></a>1.29 dup函数</h2><p>复制文件描述符</p><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709104010554.png" alt="image-20220709104010554" style="zoom:50%;" /></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int dup(int oldfd);</span></span><br><span class="line"><span class="comment">        作用：复制一个新的文件描述符</span></span><br><span class="line"><span class="comment">        fd=3, int fd1 = dup(fd),</span></span><br><span class="line"><span class="comment">        fd指向的是a.txt, fd1也是指向a.txt</span></span><br><span class="line"><span class="comment">        从空闲的文件描述符表中找一个最小的，作为新的拷贝的文件描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;a.txt&quot;</span>, O_RDWR | O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">int</span> fd1 = dup(fd);</span><br><span class="line">    <span class="keyword">if</span>(fd1 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd : %d , fd1 : %d\n&quot;</span>, fd, fd1);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">char</span> * str = <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = write(fd1, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709104522066.png" alt="image-20220709104522066"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    int dup2(int oldfd, int newfd);</span></span><br><span class="line"><span class="comment">        作用：重定向文件描述符</span></span><br><span class="line"><span class="comment">        oldfd 指向 a.txt, newfd 指向 b.txt</span></span><br><span class="line"><span class="comment">        调用函数成功后：newfd 和 b.txt 做close, newfd 指向了 a.txt</span></span><br><span class="line"><span class="comment">        oldfd 必须是一个有效的文件描述符</span></span><br><span class="line"><span class="comment">        oldfd和newfd值相同，相当于什么都没有做</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;1.txt&quot;</span>, O_RDWR | O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">&quot;2.txt&quot;</span>, O_RDWR | O_CREAT, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd1 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd : %d, fd1 : %d\n&quot;</span>, fd, fd1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd2 = dup2(fd, fd1);</span><br><span class="line">    <span class="keyword">if</span>(fd2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过fd1去写数据，实际操作的是1.txt，而不是2.txt</span></span><br><span class="line">    <span class="keyword">char</span> * str = <span class="string">&quot;hello, dup2&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> len = write(fd1, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fd : %d, fd1 : %d, fd2 : %d\n&quot;</span>, fd, fd1, fd2);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    close(fd1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709105521984.png" alt="image-20220709105521984"></p><hr><h2 id="1-30-fcntl函数"><a href="#1-30-fcntl函数" class="headerlink" title="1.30 fcntl函数"></a>1.30 fcntl函数</h2><p><img src="http://rto3hzle5.hd-bkt.clouddn.com/image-20220709105622552.png" alt="image-20220709105622552" style="zoom:67%;" /></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    #include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">    #include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int fcntl(int fd, int cmd, ...);</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        fd : 表示需要操作的文件描述符</span></span><br><span class="line"><span class="comment">        cmd: 表示对文件描述符进行如何操作</span></span><br><span class="line"><span class="comment">            - F_DUPFD : 复制文件描述符,复制的是第一个参数fd，得到一个新的文件描述符（返回值）</span></span><br><span class="line"><span class="comment">                int ret = fcntl(fd, F_DUPFD);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            - F_GETFL : 获取指定的文件描述符文件状态flag</span></span><br><span class="line"><span class="comment">              获取的flag和我们通过open函数传递的flag是一个东西。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            - F_SETFL : 设置文件描述符文件状态flag</span></span><br><span class="line"><span class="comment">              必选项：O_RDONLY, O_WRONLY, O_RDWR 不可以被修改</span></span><br><span class="line"><span class="comment">              可选性：O_APPEND, O)NONBLOCK</span></span><br><span class="line"><span class="comment">                O_APPEND 表示追加数据</span></span><br><span class="line"><span class="comment">                NONBLOK 设置成非阻塞</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        阻塞和非阻塞：描述的是函数调用的行为。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.复制文件描述符</span></span><br><span class="line">    <span class="comment">// int fd = open(&quot;1.txt&quot;, O_RDONLY);</span></span><br><span class="line">    <span class="comment">// int ret = fcntl(fd, F_DUPFD);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.修改或者获取文件状态flag</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;1.txt&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件描述符状态flag</span></span><br><span class="line">    <span class="keyword">int</span> flag = fcntl(fd, F_GETFL);</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fcntl&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag |= O_APPEND;   <span class="comment">// flag = flag | O_APPEND</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改文件描述符状态的flag，给flag加入O_APPEND这个标记</span></span><br><span class="line">    <span class="keyword">int</span> ret = fcntl(fd, F_SETFL, flag);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fcntl&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> * str = <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">    write(fd, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Linux高并发服务器开发第一章</summary>
    
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/categories/c/"/>
    
    
    <category term="c++" scheme="https://tsuiwade.github.io/tags/c/"/>
    
  </entry>
  
</feed>
